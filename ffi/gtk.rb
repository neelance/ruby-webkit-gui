# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module GTK
  extend FFI::Library
  ffi_lib 'gtk-3'
  
  PATH_PRIO_MASK = 0x0f
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_align).</em>
  # 
  # === Options:
  # :fill ::
  #   
  # :start ::
  #   
  # :end ::
  #   
  # :center ::
  #   
  # 
  # @method _enum_gtk_align_
  # @return [Symbol]
  # @scope class
  enum :gtk_align, [
    :fill,
    :start,
    :end,
    :center
  ]
  
  # GtkArrowPlacement:
  # @GTK_ARROWS_BOTH: Place one arrow on each end of the menu.
  # @GTK_ARROWS_START: Place both arrows at the top of the menu.
  # @GTK_ARROWS_END: Place both arrows at the bottom of the menu.
  # 
  # Used to specify the placement of scroll arrows in scrolling menus.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_arrow_placement).</em>
  # 
  # === Options:
  # :arrows_both ::
  #   
  # :arrows_start ::
  #   
  # :arrows_end ::
  #   
  # 
  # @method _enum_gtk_arrow_placement_
  # @return [Symbol]
  # @scope class
  enum :gtk_arrow_placement, [
    :arrows_both,
    :arrows_start,
    :arrows_end
  ]
  
  # GtkArrowType
  # @GTK_ARROW_UP: Represents an upward pointing arrow.
  # @GTK_ARROW_DOWN: Represents a downward pointing arrow.
  # @GTK_ARROW_LEFT: Represents a left pointing arrow.
  # @GTK_ARROW_RIGHT: Represents a right pointing arrow.
  # @GTK_ARROW_NONE: No arrow. Since 2.10.
  # 
  # Used to indicate the direction in which a #GtkArrow should point.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_arrow_type).</em>
  # 
  # === Options:
  # :up ::
  #   
  # :down ::
  #   
  # :left ::
  #   
  # :right ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_arrow_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_arrow_type, [
    :up,
    :down,
    :left,
    :right,
    :none
  ]
  
  # GtkAttachOptions:
  # @GTK_EXPAND: the widget should expand to take up any extra space in its
  # container that has been allocated.
  # @GTK_SHRINK: the widget should shrink as and when possible.
  # @GTK_FILL: the widget should fill the space allocated to it.
  # 
  # Denotes the expansion properties that a widget will have when it (or its
  # parent) is resized.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_attach_options).</em>
  # 
  # === Options:
  # 
  # @method _enum_gtk_attach_options_
  # @return [Symbol]
  # @scope class
  enum :gtk_attach_options, [
  ]
  
  # GtkButtonBoxStyle:
  # @GTK_BUTTONBOX_DEFAULT_STYLE: Default packing.
  # @GTK_BUTTONBOX_SPREAD: Buttons are evenly spread across the box.
  # @GTK_BUTTONBOX_EDGE: Buttons are placed at the edges of the box.
  # @GTK_BUTTONBOX_START: Buttons are grouped towards the start of the box,
  #   (on the left for a HBox, or the top for a VBox).
  # @GTK_BUTTONBOX_END: Buttons are grouped towards the end of the box,
  #   (on the right for a HBox, or the bottom for a VBox).
  # @GTK_BUTTONBOX_CENTER: Buttons are centered in the box. Since 2.12.
  # 
  # Used to dictate the style that a #GtkButtonBox uses to layout the buttons it
  # contains. (See also: #GtkVButtonBox and #GtkHButtonBox).
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_button_box_style).</em>
  # 
  # === Options:
  # :buttonbox_spread ::
  #   
  # :buttonbox_edge ::
  #   
  # :buttonbox_start ::
  #   
  # :buttonbox_end ::
  #   
  # :buttonbox_center ::
  #   
  # 
  # @method _enum_gtk_button_box_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_button_box_style, [
    :buttonbox_spread, 1,
    :buttonbox_edge,
    :buttonbox_start,
    :buttonbox_end,
    :buttonbox_center
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_delete_type).</em>
  # 
  # === Options:
  # :chars ::
  #   
  # :word_ends ::
  #   
  # :words ::
  #   delete only the portion of the word to the
  #   left/right of cursor if we're in the middle
  #   of a word
  # :display_lines ::
  #   
  # :display_line_ends ::
  #   
  # :paragraph_ends ::
  #   
  # :paragraphs ::
  #   like C-k in Emacs (or its reverse)
  # :whitespace ::
  #   C-k in pico, kill whole line
  # 
  # @method _enum_gtk_delete_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_delete_type, [
    :chars,
    :word_ends,
    :words,
    :display_lines,
    :display_line_ends,
    :paragraph_ends,
    :paragraphs,
    :whitespace
  ]
  
  # Focus movement types
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_direction_type).</em>
  # 
  # === Options:
  # :dir_tab_forward ::
  #   
  # :dir_tab_backward ::
  #   
  # :dir_up ::
  #   
  # :dir_down ::
  #   
  # :dir_left ::
  #   
  # :dir_right ::
  #   
  # 
  # @method _enum_gtk_direction_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_direction_type, [
    :dir_tab_forward,
    :dir_tab_backward,
    :dir_up,
    :dir_down,
    :dir_left,
    :dir_right
  ]
  
  # GtkExpanderStyle:
  # @GTK_EXPANDER_COLLAPSED: The style used for a collapsed subtree.
  # @GTK_EXPANDER_SEMI_COLLAPSED: Intermediate style used during animation.
  # @GTK_EXPANDER_SEMI_EXPANDED: Intermediate style used during animation.
  # @GTK_EXPANDER_EXPANDED: The style used for an expanded subtree.
  # 
  # Used to specify the style of the expanders drawn by a #GtkTreeView.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_expander_style).</em>
  # 
  # === Options:
  # :collapsed ::
  #   
  # :semi_collapsed ::
  #   
  # :semi_expanded ::
  #   
  # :expanded ::
  #   
  # 
  # @method _enum_gtk_expander_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_expander_style, [
    :collapsed,
    :semi_collapsed,
    :semi_expanded,
    :expanded
  ]
  
  # Built-in stock icon sizes
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_icon_size).</em>
  # 
  # === Options:
  # :invalid ::
  #   
  # :menu ::
  #   
  # :small_toolbar ::
  #   
  # :large_toolbar ::
  #   
  # :button ::
  #   
  # :dnd ::
  #   
  # :dialog ::
  #   
  # 
  # @method _enum_gtk_icon_size_
  # @return [Symbol]
  # @scope class
  enum :gtk_icon_size, [
    :invalid,
    :menu,
    :small_toolbar,
    :large_toolbar,
    :button,
    :dnd,
    :dialog
  ]
  
  # GtkSensitivityType:
  # @GTK_SENSITIVITY_AUTO: The arrow is made insensitive if the
  #   thumb is at the end
  # @GTK_SENSITIVITY_ON: The arrow is always sensitive
  # @GTK_SENSITIVITY_OFF: The arrow is always insensitive
  # 
  # Determines how GTK+ handles the sensitivity of stepper arrows
  # at the end of range widgets.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_sensitivity_type).</em>
  # 
  # === Options:
  # :auto ::
  #   
  # :on ::
  #   
  # :off ::
  #   
  # 
  # @method _enum_gtk_sensitivity_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_sensitivity_type, [
    :auto,
    :on,
    :off
  ]
  
  # Reading directions for text
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_text_direction).</em>
  # 
  # === Options:
  # :dir_none ::
  #   
  # :dir_ltr ::
  #   
  # :dir_rtl ::
  #   
  # 
  # @method _enum_gtk_text_direction_
  # @return [Symbol]
  # @scope class
  enum :gtk_text_direction, [
    :dir_none,
    :dir_ltr,
    :dir_rtl
  ]
  
  # GtkJustification:
  # @GTK_JUSTIFY_LEFT: The text is placed at the left edge of the label.
  # @GTK_JUSTIFY_RIGHT: The text is placed at the right edge of the label.
  # @GTK_JUSTIFY_CENTER: The text is placed in the center of the label.
  # @GTK_JUSTIFY_FILL: The text is placed is distributed across the label.
  # 
  # Used for justifying the text inside a #GtkLabel widget. (See also
  # #GtkAlignment).
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_justification).</em>
  # 
  # === Options:
  # :justify_left ::
  #   
  # :justify_right ::
  #   
  # :justify_center ::
  #   
  # :justify_fill ::
  #   
  # 
  # @method _enum_gtk_justification_
  # @return [Symbol]
  # @scope class
  enum :gtk_justification, [
    :justify_left,
    :justify_right,
    :justify_center,
    :justify_fill
  ]
  
  # GtkMenuDirectionType:
  # @GTK_MENU_DIR_PARENT: To the parent menu shell
  # @GTK_MENU_DIR_CHILD: To the submenu, if any, associated with the item
  # @GTK_MENU_DIR_NEXT: To the next menu item
  # @GTK_MENU_DIR_PREV: To the previous menu item
  # 
  # An enumeration representing directional movements within a menu.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_menu_direction_type).</em>
  # 
  # === Options:
  # :dir_parent ::
  #   
  # :dir_child ::
  #   
  # :dir_next ::
  #   
  # :dir_prev ::
  #   
  # 
  # @method _enum_gtk_menu_direction_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_menu_direction_type, [
    :dir_parent,
    :dir_child,
    :dir_next,
    :dir_prev
  ]
  
  # GtkMessageType:
  # @GTK_MESSAGE_INFO: Informational message
  # @GTK_MESSAGE_WARNING: Nonfatal warning message
  # @GTK_MESSAGE_QUESTION: Question requiring a choice
  # @GTK_MESSAGE_ERROR: Fatal error message
  # @GTK_MESSAGE_OTHER: None of the above, doesn't get an icon
  # 
  # The type of message being displayed in the dialog.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_message_type).</em>
  # 
  # === Options:
  # :info ::
  #   
  # :warning ::
  #   
  # :question ::
  #   
  # :error ::
  #   
  # :other ::
  #   
  # 
  # @method _enum_gtk_message_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_message_type, [
    :info,
    :warning,
    :question,
    :error,
    :other
  ]
  
  # GtkMovementStep:
  # @GTK_MOVEMENT_LOGICAL_POSITIONS: Move forward or back by graphemes
  # @GTK_MOVEMENT_VISUAL_POSITIONS:  Move left or right by graphemes
  # @GTK_MOVEMENT_WORDS:             Move forward or back by words
  # @GTK_MOVEMENT_DISPLAY_LINES:     Move up or down lines (wrapped lines)
  # @GTK_MOVEMENT_DISPLAY_LINE_ENDS: Move to either end of a line
  # @GTK_MOVEMENT_PARAGRAPHS:        Move up or down paragraphs (newline-ended lines)
  # @GTK_MOVEMENT_PARAGRAPH_ENDS:    Move to either end of a paragraph
  # @GTK_MOVEMENT_PAGES:             Move by pages
  # @GTK_MOVEMENT_BUFFER_ENDS:       Move to ends of the buffer
  # @GTK_MOVEMENT_HORIZONTAL_PAGES:  Move horizontally by pages
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_movement_step).</em>
  # 
  # === Options:
  # :logical_positions ::
  #   
  # :visual_positions ::
  #   
  # :words ::
  #   
  # :display_lines ::
  #   
  # :display_line_ends ::
  #   
  # :paragraphs ::
  #   
  # :paragraph_ends ::
  #   
  # :pages ::
  #   
  # :buffer_ends ::
  #   
  # :horizontal_pages ::
  #   
  # 
  # @method _enum_gtk_movement_step_
  # @return [Symbol]
  # @scope class
  enum :gtk_movement_step, [
    :logical_positions,
    :visual_positions,
    :words,
    :display_lines,
    :display_line_ends,
    :paragraphs,
    :paragraph_ends,
    :pages,
    :buffer_ends,
    :horizontal_pages
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scroll_step).</em>
  # 
  # === Options:
  # :steps ::
  #   
  # :pages ::
  #   
  # :ends ::
  #   
  # :horizontal_steps ::
  #   
  # :horizontal_pages ::
  #   
  # :horizontal_ends ::
  #   
  # 
  # @method _enum_gtk_scroll_step_
  # @return [Symbol]
  # @scope class
  enum :gtk_scroll_step, [
    :steps,
    :pages,
    :ends,
    :horizontal_steps,
    :horizontal_pages,
    :horizontal_ends
  ]
  
  # GtkOrientation:
  # @GTK_ORIENTATION_HORIZONTAL: The widget is in horizontal orientation.
  # @GTK_ORIENTATION_VERTICAL: The widget is in vertical orientation.
  # 
  # Represents the orientation of widgets which can be switched between horizontal
  # and vertical orientation on the fly, like #GtkToolbar.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_orientation).</em>
  # 
  # === Options:
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # 
  # @method _enum_gtk_orientation_
  # @return [Symbol]
  # @scope class
  enum :gtk_orientation, [
    :horizontal,
    :vertical
  ]
  
  # GtkCornerType:
  # @GTK_CORNER_TOP_LEFT: Place the scrollbars on the right and bottom of the
  #  widget (default behaviour).
  # @GTK_CORNER_BOTTOM_LEFT: Place the scrollbars on the top and right of the
  #  widget.
  # @GTK_CORNER_TOP_RIGHT: Place the scrollbars on the left and bottom of the
  #  widget.
  # @GTK_CORNER_BOTTOM_RIGHT: Place the scrollbars on the top and left of the
  #  widget.
  # 
  # Specifies which corner a child widget should be placed in when packed into
  # a #GtkScrolledWindow. This is effectively the opposite of where the scroll
  # bars are placed.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_corner_type).</em>
  # 
  # === Options:
  # :top_left ::
  #   
  # :bottom_left ::
  #   
  # :top_right ::
  #   
  # :bottom_right ::
  #   
  # 
  # @method _enum_gtk_corner_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_corner_type, [
    :top_left,
    :bottom_left,
    :top_right,
    :bottom_right
  ]
  
  # GtkPackType:
  # @GTK_PACK_START: The child is packed into the start of the box
  # @GTK_PACK_END: The child is packed into the end of the box
  # 
  # Represents the packing location #GtkBox children. (See: #GtkVBox,
  # #GtkHBox, and #GtkButtonBox).
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_pack_type).</em>
  # 
  # === Options:
  # :start ::
  #   
  # :end ::
  #   
  # 
  # @method _enum_gtk_pack_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_pack_type, [
    :start,
    :end
  ]
  
  # priorities for path lookups
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_path_priority_type).</em>
  # 
  # === Options:
  # :prio_lowest ::
  #   
  # :prio_gtk ::
  #   
  # :prio_application ::
  #   
  # :prio_theme ::
  #   
  # :prio_rc ::
  #   
  # :prio_highest ::
  #   
  # 
  # @method _enum_gtk_path_priority_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_path_priority_type, [
    :prio_lowest, 0,
    :prio_gtk, 4,
    :prio_application, 8,
    :prio_theme, 10,
    :prio_rc, 12,
    :prio_highest, 15
  ]
  
  # widget path types
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_path_type).</em>
  # 
  # === Options:
  # :widget ::
  #   
  # :widget_class ::
  #   
  # :class ::
  #   
  # 
  # @method _enum_gtk_path_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_path_type, [
    :widget,
    :widget_class,
    :class
  ]
  
  # GtkPolicyType:
  # @GTK_POLICY_ALWAYS: The scrollbar is always visible.
  # @GTK_POLICY_AUTOMATIC: The scrollbar will appear and disappear as necessary. For example,
  #  when all of a #GtkCList can not be seen.
  # @GTK_POLICY_NEVER: The scrollbar will never appear.
  # 
  # Determines when a scroll bar will be visible.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_policy_type).</em>
  # 
  # === Options:
  # :always ::
  #   
  # :automatic ::
  #   
  # :never ::
  #   
  # 
  # @method _enum_gtk_policy_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_policy_type, [
    :always,
    :automatic,
    :never
  ]
  
  # GtkPositionType:
  # @GTK_POS_LEFT: The feature is at the left edge.
  # @GTK_POS_RIGHT: The feature is at the right edge.
  # @GTK_POS_TOP: The feature is at the top edge.
  # @GTK_POS_BOTTOM: The feature is at the bottom edge.
  # 
  # Describes which edge of a widget a certain feature is positioned at, e.g. the
  # tabs of a #GtkNotebook, the handle of a #GtkHandleBox or the label of a
  # #GtkScale.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_position_type).</em>
  # 
  # === Options:
  # :pos_left ::
  #   
  # :pos_right ::
  #   
  # :pos_top ::
  #   
  # :pos_bottom ::
  #   
  # 
  # @method _enum_gtk_position_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_position_type, [
    :pos_left,
    :pos_right,
    :pos_top,
    :pos_bottom
  ]
  
  # GtkReliefStyle:
  # @GTK_RELIEF_NORMAL: Draw a normal relief.
  # @GTK_RELIEF_HALF: A half relief.
  # @GTK_RELIEF_NONE: No relief.
  # 
  # Indicated the relief to be drawn around a #GtkButton.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_relief_style).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :half ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_relief_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_relief_style, [
    :normal,
    :half,
    :none
  ]
  
  # GtkResizeMode:
  # @GTK_RESIZE_PARENT: Pass resize request to the parent
  # @GTK_RESIZE_QUEUE: Queue resizes on this widget
  # @GTK_RESIZE_IMMEDIATE: Resize immediately. Deprecated.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_resize_mode).</em>
  # 
  # === Options:
  # :parent ::
  #   
  # :queue ::
  #   
  # :immediate ::
  #   
  # 
  # @method _enum_gtk_resize_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_resize_mode, [
    :parent,
    :queue,
    :immediate
  ]
  
  # scrolling types
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scroll_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :jump ::
  #   
  # :step_backward ::
  #   
  # :step_forward ::
  #   
  # :page_backward ::
  #   
  # :page_forward ::
  #   
  # :step_up ::
  #   
  # :step_down ::
  #   
  # :page_up ::
  #   
  # :page_down ::
  #   
  # :step_left ::
  #   
  # :step_right ::
  #   
  # :page_left ::
  #   
  # :page_right ::
  #   
  # :start ::
  #   
  # :end ::
  #   
  # 
  # @method _enum_gtk_scroll_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_scroll_type, [
    :none,
    :jump,
    :step_backward,
    :step_forward,
    :page_backward,
    :page_forward,
    :step_up,
    :step_down,
    :page_up,
    :page_down,
    :step_left,
    :step_right,
    :page_left,
    :page_right,
    :start,
    :end
  ]
  
  # GtkSelectionMode:
  # @GTK_SELECTION_NONE: No selection is possible.
  # @GTK_SELECTION_SINGLE: Zero or one element may be selected.
  # @GTK_SELECTION_BROWSE: Exactly one element is selected.
  #     In some circumstances, such as initially or during a search
  #     operation, it's possible for no element to be selected with
  #     %GTK_SELECTION_BROWSE. What is really enforced is that the user
  #     can't deselect a currently selected element except by selecting
  #     another element.
  # @GTK_SELECTION_MULTIPLE: Any number of elements may be selected.
  #      The Ctrl key may be used to enlarge the selection, and Shift
  #      key to select between the focus and the child pointed to.
  #      Some widgets may also allow Click-drag to select a range of elements.
  # @GTK_SELECTION_EXTENDED: Deprecated, behaves identical to %GTK_SELECTION_MULTIPLE.
  # 
  # Used to control what selections users are allowed to make.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_selection_mode).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :single ::
  #   
  # :browse ::
  #   
  # :multiple ::
  #   
  # 
  # @method _enum_gtk_selection_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_selection_mode, [
    :none,
    :single,
    :browse,
    :multiple
  ]
  
  # GtkShadowType:
  # @GTK_SHADOW_NONE: No outline.
  # @GTK_SHADOW_IN: The outline is bevelled inwards.
  # @GTK_SHADOW_OUT: The outline is bevelled outwards like a button.
  # @GTK_SHADOW_ETCHED_IN: The outline has a sunken 3d appearance.
  # @GTK_SHADOW_ETCHED_OUT: The outline has a raised 3d appearance.
  # 
  # Used to change the appearance of an outline typically provided by a #GtkFrame.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_shadow_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :in ::
  #   
  # :out ::
  #   
  # :etched_in ::
  #   
  # :etched_out ::
  #   
  # 
  # @method _enum_gtk_shadow_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_shadow_type, [
    :none,
    :in,
    :out,
    :etched_in,
    :etched_out
  ]
  
  # GtkStateType:
  # @GTK_STATE_NORMAL: State during normal operation.
  # @GTK_STATE_ACTIVE: State of a currently active widget, such as a depressed button.
  # @GTK_STATE_PRELIGHT: State indicating that the mouse pointer is over
  #                      the widget and the widget will respond to mouse clicks.
  # @GTK_STATE_SELECTED: State of a selected item, such the selected row in a list.
  # @GTK_STATE_INSENSITIVE: State indicating that the widget is
  #                         unresponsive to user actions.
  # @GTK_STATE_INCONSISTENT: The widget is inconsistent, such as checkbuttons
  #                          or radiobuttons that aren't either set to %TRUE nor %FALSE,
  #                          or buttons requiring the user attention.
  # @GTK_STATE_FOCUSED: The widget has the keyboard focus.
  # 
  # This type indicates the current state of a widget; the state determines how
  # the widget is drawn. The #GtkStateType enumeration is also used to
  # identify different colors in a #GtkStyle for drawing, so states can be
  # used for subparts of a widget as well as entire widgets.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_state_type).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :active ::
  #   
  # :prelight ::
  #   
  # :selected ::
  #   
  # :insensitive ::
  #   
  # :inconsistent ::
  #   
  # :focused ::
  #   
  # 
  # @method _enum_gtk_state_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_state_type, [
    :normal,
    :active,
    :prelight,
    :selected,
    :insensitive,
    :inconsistent,
    :focused
  ]
  
  # GtkToolbarStyle:
  # @GTK_TOOLBAR_ICONS: Buttons display only icons in the toolbar.
  # @GTK_TOOLBAR_TEXT: Buttons display only text labels in the toolbar.
  # @GTK_TOOLBAR_BOTH: Buttons display text and icons in the toolbar.
  # @GTK_TOOLBAR_BOTH_HORIZ: Buttons display icons and text alongside each
  #  other, rather than vertically stacked
  # 
  # Used to customize the appearance of a #GtkToolbar. Note that
  # setting the toolbar style overrides the user's preferences
  # for the default toolbar style.  Note that if the button has only
  # a label set and GTK_TOOLBAR_ICONS is used, the label will be
  # visible, and vice versa.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_toolbar_style).</em>
  # 
  # === Options:
  # :icons ::
  #   
  # :text ::
  #   
  # :both ::
  #   
  # :both_horiz ::
  #   
  # 
  # @method _enum_gtk_toolbar_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_toolbar_style, [
    :icons,
    :text,
    :both,
    :both_horiz
  ]
  
  # GtkWindowPosition:
  # @GTK_WIN_POS_NONE: No influence is made on placement.
  # @GTK_WIN_POS_CENTER: Windows should be placed in the center of the screen.
  # @GTK_WIN_POS_MOUSE: Windows should be placed at the current mouse position.
  # @GTK_WIN_POS_CENTER_ALWAYS: Keep window centered as it changes size, etc.
  # @GTK_WIN_POS_CENTER_ON_PARENT: Center the window on its transient
  #  parent (see gtk_window_set_transient_for()).
  # 
  # Window placement can be influenced using this enumeration. Note that
  # using #GTK_WIN_POS_CENTER_ALWAYS is almost always a bad idea.
  # It won't necessarily work well with all window managers or on all windowing systems.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_window_position).</em>
  # 
  # === Options:
  # :win_pos_none ::
  #   
  # :win_pos_center ::
  #   
  # :win_pos_mouse ::
  #   
  # :win_pos_center_always ::
  #   
  # :win_pos_center_on_parent ::
  #   
  # 
  # @method _enum_gtk_window_position_
  # @return [Symbol]
  # @scope class
  enum :gtk_window_position, [
    :win_pos_none,
    :win_pos_center,
    :win_pos_mouse,
    :win_pos_center_always,
    :win_pos_center_on_parent
  ]
  
  # GtkWindowType:
  # @GTK_WINDOW_TOPLEVEL: A regular window, such as a dialog.
  # @GTK_WINDOW_POPUP: A special window such as a tooltip.
  # 
  # A #GtkWindow can be one of these types. Most things you'd consider a
  # "window" should have type #GTK_WINDOW_TOPLEVEL; windows with this type
  # are managed by the window manager and have a frame by default (call
  # gtk_window_set_decorated() to toggle the frame).  Windows with type
  # #GTK_WINDOW_POPUP are ignored by the window manager; window manager
  # keybindings won't work on them, the window manager won't decorate the
  # window with a frame, many GTK+ features that rely on the window
  # manager will not work (e.g. resize grips and
  # maximization/minimization). #GTK_WINDOW_POPUP is used to implement
  # widgets such as #GtkMenu or tooltips that you normally don't think of
  # as windows per se. Nearly all windows should be #GTK_WINDOW_TOPLEVEL.
  # In particular, do not use #GTK_WINDOW_POPUP just to turn off
  # the window borders; use gtk_window_set_decorated() for that.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_window_type).</em>
  # 
  # === Options:
  # :toplevel ::
  #   
  # :popup ::
  #   
  # 
  # @method _enum_gtk_window_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_window_type, [
    :toplevel,
    :popup
  ]
  
  # GtkWrapMode:
  # @GTK_WRAP_NONE: do not wrap lines; just make the text area wider
  # @GTK_WRAP_CHAR: wrap text, breaking lines anywhere the cursor can
  #     appear (between characters, usually - if you want to be technical,
  #     between graphemes, see pango_get_log_attrs())
  # @GTK_WRAP_WORD: wrap text, breaking lines in between words
  # @GTK_WRAP_WORD_CHAR: wrap text, breaking lines in between words, or if
  #     that is not enough, also between graphemes
  # 
  # Describes a type of line wrapping.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_wrap_mode).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :char ::
  #   
  # :word ::
  #   
  # :word_char ::
  #   
  # 
  # @method _enum_gtk_wrap_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_wrap_mode, [
    :none,
    :char,
    :word,
    :word_char
  ]
  
  # GtkSortType:
  # @GTK_SORT_ASCENDING: Sorting is in ascending order.
  # @GTK_SORT_DESCENDING: Sorting is in descending order.
  # 
  # Determines the direction of a sort.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_sort_type).</em>
  # 
  # === Options:
  # :ascending ::
  #   
  # :descending ::
  #   
  # 
  # @method _enum_gtk_sort_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_sort_type, [
    :ascending,
    :descending
  ]
  
  # Style for gtk input method preedit/status
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_im_preedit_style).</em>
  # 
  # === Options:
  # :nothing ::
  #   
  # :callback ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_im_preedit_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_im_preedit_style, [
    :nothing,
    :callback,
    :none
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_im_status_style).</em>
  # 
  # === Options:
  # :nothing ::
  #   
  # :callback ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_im_status_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_im_status_style, [
    :nothing,
    :callback,
    :none
  ]
  
  # GtkPackDirection:
  # @GTK_PACK_DIRECTION_LTR: Widgets are packed left-to-right
  # @GTK_PACK_DIRECTION_RTL: Widgets are packed right-to-left
  # @GTK_PACK_DIRECTION_TTB: Widgets are packed top-to-bottom
  # @GTK_PACK_DIRECTION_BTT: Widgets are packed bottom-to-top
  # 
  # Determines how widgets should be packed insided menubars
  # and menuitems contained in menubars.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_pack_direction).</em>
  # 
  # === Options:
  # :ltr ::
  #   
  # :rtl ::
  #   
  # :ttb ::
  #   
  # :btt ::
  #   
  # 
  # @method _enum_gtk_pack_direction_
  # @return [Symbol]
  # @scope class
  enum :gtk_pack_direction, [
    :ltr,
    :rtl,
    :ttb,
    :btt
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_pages).</em>
  # 
  # === Options:
  # :all ::
  #   
  # :current ::
  #   
  # :ranges ::
  #   
  # :selection ::
  #   
  # 
  # @method _enum_gtk_print_pages_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_pages, [
    :all,
    :current,
    :ranges,
    :selection
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_page_set).</em>
  # 
  # === Options:
  # :all ::
  #   
  # :even ::
  #   
  # :odd ::
  #   
  # 
  # @method _enum_gtk_page_set_
  # @return [Symbol]
  # @scope class
  enum :gtk_page_set, [
    :all,
    :even,
    :odd
  ]
  
  # GtkNumberUpLayout:
  # @GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM: <inlinegraphic valign="middle" fileref="layout-lrtb.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP: <inlinegraphic valign="middle" fileref="layout-lrbt.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM: <inlinegraphic valign="middle" fileref="layout-rltb.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP: <inlinegraphic valign="middle" fileref="layout-rlbt.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT: <inlinegraphic valign="middle" fileref="layout-tblr.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT: <inlinegraphic valign="middle" fileref="layout-tbrl.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT: <inlinegraphic valign="middle" fileref="layout-btlr.png" format="PNG"></inlinegraphic>
  # @GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT: <inlinegraphic valign="middle" fileref="layout-btrl.png" format="PNG"></inlinegraphic>
  # 
  # Used to determine the layout of pages on a sheet when printing
  # multiple pages per sheet.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_number_up_layout).</em>
  # 
  # === Options:
  # :left_to_right_top_to_bottom ::
  #   
  # :left_to_right_bottom_to_top ::
  #   < nick=lrtb >
  # :right_to_left_top_to_bottom ::
  #   < nick=lrbt >
  # :right_to_left_bottom_to_top ::
  #   < nick=rltb >
  # :top_to_bottom_left_to_right ::
  #   < nick=rlbt >
  # :top_to_bottom_right_to_left ::
  #   < nick=tblr >
  # :bottom_to_top_left_to_right ::
  #   < nick=tbrl >
  # :bottom_to_top_right_to_left ::
  #   < nick=btlr >
  # 
  # @method _enum_gtk_number_up_layout_
  # @return [Symbol]
  # @scope class
  enum :gtk_number_up_layout, [
    :left_to_right_top_to_bottom,
    :left_to_right_bottom_to_top,
    :right_to_left_top_to_bottom,
    :right_to_left_bottom_to_top,
    :top_to_bottom_left_to_right,
    :top_to_bottom_right_to_left,
    :bottom_to_top_left_to_right,
    :bottom_to_top_right_to_left
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_page_orientation).</em>
  # 
  # === Options:
  # :portrait ::
  #   
  # :landscape ::
  #   
  # :reverse_portrait ::
  #   
  # :reverse_landscape ::
  #   
  # 
  # @method _enum_gtk_page_orientation_
  # @return [Symbol]
  # @scope class
  enum :gtk_page_orientation, [
    :portrait,
    :landscape,
    :reverse_portrait,
    :reverse_landscape
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_quality).</em>
  # 
  # === Options:
  # :low ::
  #   
  # :normal ::
  #   
  # :high ::
  #   
  # :draft ::
  #   
  # 
  # @method _enum_gtk_print_quality_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_quality, [
    :low,
    :normal,
    :high,
    :draft
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_duplex).</em>
  # 
  # === Options:
  # :simplex ::
  #   
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # 
  # @method _enum_gtk_print_duplex_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_duplex, [
    :simplex,
    :horizontal,
    :vertical
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_unit).</em>
  # 
  # === Options:
  # :pixel ::
  #   
  # :points ::
  #   
  # :inch ::
  #   
  # :mm ::
  #   
  # 
  # @method _enum_gtk_unit_
  # @return [Symbol]
  # @scope class
  enum :gtk_unit, [
    :pixel,
    :points,
    :inch,
    :mm
  ]
  
  # GtkTreeViewGridLines:
  # @GTK_TREE_VIEW_GRID_LINES_NONE: No grid lines.
  # @GTK_TREE_VIEW_GRID_LINES_HORIZONTAL: Horizontal grid lines.
  # @GTK_TREE_VIEW_GRID_LINES_VERTICAL: Vertical grid lines.
  # @GTK_TREE_VIEW_GRID_LINES_BOTH: Horizontal and vertical grid lines.
  # 
  # Used to indicate which grid lines to draw in a tree view.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tree_view_grid_lines).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # :both ::
  #   
  # 
  # @method _enum_gtk_tree_view_grid_lines_
  # @return [Symbol]
  # @scope class
  enum :gtk_tree_view_grid_lines, [
    :none,
    :horizontal,
    :vertical,
    :both
  ]
  
  # GtkDragResult:
  # @GTK_DRAG_RESULT_SUCCESS: The drag operation was successful.
  # @GTK_DRAG_RESULT_NO_TARGET: No suitable drag target.
  # @GTK_DRAG_RESULT_USER_CANCELLED: The user cancelled the drag operation.
  # @GTK_DRAG_RESULT_TIMEOUT_EXPIRED: The drag operation timed out.
  # @GTK_DRAG_RESULT_GRAB_BROKEN: The pointer or keyboard grab used
  #  for the drag operation was broken.
  # @GTK_DRAG_RESULT_ERROR: The drag operation failed due to some
  #  unspecified error.
  # 
  # Gives an indication why a drag operation failed.
  # The value can by obtained by connecting to the
  # #GtkWidget::drag-failed signal.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_drag_result).</em>
  # 
  # === Options:
  # :success ::
  #   
  # :no_target ::
  #   
  # :user_cancelled ::
  #   
  # :timeout_expired ::
  #   
  # :grab_broken ::
  #   
  # :error ::
  #   
  # 
  # @method _enum_gtk_drag_result_
  # @return [Symbol]
  # @scope class
  enum :gtk_drag_result, [
    :success,
    :no_target,
    :user_cancelled,
    :timeout_expired,
    :grab_broken,
    :error
  ]
  
  # GtkSizeRequestMode:
  # @GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: Prefer height-for-width geometry management
  # @GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: Prefer width-for-height geometry management
  # @GTK_SIZE_REQUEST_CONSTANT_SIZE: Dont trade height-for-width or width-for-height
  # 
  # Specifies a preference for height-for-width or
  # width-for-height geometry management.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_size_request_mode).</em>
  # 
  # === Options:
  # :height_for_width ::
  #   
  # :width_for_height ::
  #   
  # :constant_size ::
  #   
  # 
  # @method _enum_gtk_size_request_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_size_request_mode, [
    :height_for_width, 0,
    :width_for_height,
    :constant_size
  ]
  
  # GtkScrollablePolicy:
  # @GTK_SCROLL_MINIMUM: Scrollable adjustments are based on the minimum size
  # @GTK_SCROLL_NATURAL: Scrollable adjustments are based on the natural size
  # 
  # Defines the policy to be used in a scrollable widget when updating
  # the scrolled window adjustments in a given orientation.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scrollable_policy).</em>
  # 
  # === Options:
  # :scroll_minimum ::
  #   
  # :scroll_natural ::
  #   
  # 
  # @method _enum_gtk_scrollable_policy_
  # @return [Symbol]
  # @scope class
  enum :gtk_scrollable_policy, [
    :scroll_minimum, 0,
    :scroll_natural
  ]
  
  # GtkStateFlags:
  # @GTK_STATE_FLAG_NORMAL: State during normal operation.
  # @GTK_STATE_FLAG_ACTIVE: Widget is active.
  # @GTK_STATE_FLAG_PRELIGHT: Widget has a mouse pointer over it.
  # @GTK_STATE_FLAG_SELECTED: Widget is selected.
  # @GTK_STATE_FLAG_INSENSITIVE: Widget is insensitive.
  # @GTK_STATE_FLAG_INCONSISTENT: Widget is inconsistent.
  # @GTK_STATE_FLAG_FOCUSED: Widget has the keyboard focus.
  # 
  # Describes a widget state.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_state_flags).</em>
  # 
  # === Options:
  # :state_flag_normal ::
  #   
  # 
  # @method _enum_gtk_state_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_state_flags, [
    :state_flag_normal, 0
  ]
  
  # GtkRegionFlags:
  # @GTK_REGION_EVEN: Region has an even number within a set.
  # @GTK_REGION_ODD: Region has an odd number within a set.
  # @GTK_REGION_FIRST: Region is the first one within a set.
  # @GTK_REGION_LAST: Region is the last one within a set.
  # @GTK_REGION_SORTED: Region is part of a sorted area.
  # 
  # Describes a region within a widget.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_region_flags).</em>
  # 
  # === Options:
  # 
  # @method _enum_gtk_region_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_region_flags, [
  ]
  
  # GtkJunctionSides:
  # @GTK_JUNCTION_NONE: No junctions.
  # @GTK_JUNCTION_CORNER_TOPLEFT: Element connects on the top-left corner.
  # @GTK_JUNCTION_CORNER_TOPRIGHT: Element connects on the top-right corner.
  # @GTK_JUNCTION_CORNER_BOTTOMLEFT: Element connects on the bottom-left corner.
  # @GTK_JUNCTION_CORNER_BOTTOMRIGHT: Element connects on the bottom-right corner.
  # @GTK_JUNCTION_TOP: Element connects on the top side.
  # @GTK_JUNCTION_BOTTOM: Element connects on the bottom side.
  # @GTK_JUNCTION_LEFT: Element connects on the left side.
  # @GTK_JUNCTION_RIGHT: Element connects on the right side.
  # 
  # Describes how a rendered element connects to adjacent elements.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_junction_sides).</em>
  # 
  # === Options:
  # :junction_none ::
  #   
  # 
  # @method _enum_gtk_junction_sides_
  # @return [Symbol]
  # @scope class
  enum :gtk_junction_sides, [
    :junction_none, 0
  ]
  
  # GtkBorderStyle:
  # @GTK_BORDER_STYLE_NONE: No visible border
  # @GTK_BORDER_STYLE_SOLID: A solid border
  # @GTK_BORDER_STYLE_INSET: An inset border
  # @GTK_BORDER_STYLE_OUTSET: An outset border
  # 
  # Describes how the border of a UI element should be rendered.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_border_style).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :solid ::
  #   
  # :inset ::
  #   
  # :outset ::
  #   
  # 
  # @method _enum_gtk_border_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_border_style, [
    :none,
    :solid,
    :inset,
    :outset
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_widget_help_type).</em>
  # 
  # === Options:
  # :tooltip ::
  #   
  # :whats_this ::
  #   
  # 
  # @method _enum_gtk_widget_help_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_widget_help_type, [
    :tooltip,
    :whats_this
  ]
  
  # (Not documented)
  class SelectionData < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class WidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class WidgetClassPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class Clipboard < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class Tooltip < FFI::Struct
    layout :dummy, :char
  end
  
  # GtkCallback:
  # @widget: the widget to operate on
  # @data: user-supplied data
  # 
  # The type of the callback functions used for e.g. iterating over
  # the children of a container, see gtk_container_foreach().
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_callback_(data)
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [FFI::Pointer(*GtkWidget)] 
  # @scope class
  callback :gtk_callback, [:pointer], :pointer
  
  # forward declaration to avoid excessive includes (and concurrent includes)
  # 
  # 
  # GtkRequisition:
  # @width: the widget's desired width
  # @height: the widget's desired height
  # 
  # A <structname>GtkRequisition</structname> represents the desired size of a widget. See
  # <xref linkend="geometry-management"/> for more information.
  # 
  # = Fields:
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  module RequisitionWrappers
    def copy()
      Requisition.new GTK.requisition_copy(self)
    end
    
    def free()
      GTK.requisition_free(self)
    end
  end
  
  class Requisition < FFI::Struct
    include RequisitionWrappers
    layout :width, :int,
           :height, :int
  end
  
  # The widget is the base of the tree for displayable objects.
  #  (A displayable object is one which takes up some amount
  #  of screen real estate). It provides a common base and interface
  #  which actual widgets must adhere to.
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WidgetPrivate) 
  module WidgetWrappers
    def destroy()
      GTK.widget_destroy(self)
    end
    
    def destroyed(widget_pointer)
      GTK.widget_destroyed(self, widget_pointer)
    end
    
    def unparent()
      GTK.widget_unparent(self)
    end
    
    def show()
      GTK.widget_show(self)
    end
    
    def hide()
      GTK.widget_hide(self)
    end
    
    def show_now()
      GTK.widget_show_now(self)
    end
    
    def show_all()
      GTK.widget_show_all(self)
    end
    
    def set_no_show_all(no_show_all)
      GTK.widget_set_no_show_all(self, no_show_all)
    end
    
    def get_no_show_all()
      GTK.widget_get_no_show_all(self)
    end
    
    def map()
      GTK.widget_map(self)
    end
    
    def unmap()
      GTK.widget_unmap(self)
    end
    
    def realize()
      GTK.widget_realize(self)
    end
    
    def unrealize()
      GTK.widget_unrealize(self)
    end
    
    def draw(cr)
      GTK.widget_draw(self, cr)
    end
    
    def queue_draw()
      GTK.widget_queue_draw(self)
    end
    
    def queue_draw_area(x, y, width, height)
      GTK.widget_queue_draw_area(self, x, y, width, height)
    end
    
    def queue_draw_region(region)
      GTK.widget_queue_draw_region(self, region)
    end
    
    def queue_resize()
      GTK.widget_queue_resize(self)
    end
    
    def queue_resize_no_redraw()
      GTK.widget_queue_resize_no_redraw(self)
    end
    
    def size_request(requisition)
      GTK.widget_size_request(self, requisition)
    end
    
    def size_allocate(allocation)
      GTK.widget_size_allocate(self, allocation)
    end
    
    def get_request_mode()
      GTK.widget_get_request_mode(self)
    end
    
    def get_preferred_width(minimum_width, natural_width)
      GTK.widget_get_preferred_width(self, minimum_width, natural_width)
    end
    
    def get_preferred_height_for_width(width, minimum_height, natural_height)
      GTK.widget_get_preferred_height_for_width(self, width, minimum_height, natural_height)
    end
    
    def get_preferred_height(minimum_height, natural_height)
      GTK.widget_get_preferred_height(self, minimum_height, natural_height)
    end
    
    def get_preferred_width_for_height(height, minimum_width, natural_width)
      GTK.widget_get_preferred_width_for_height(self, height, minimum_width, natural_width)
    end
    
    def get_preferred_size(minimum_size, natural_size)
      GTK.widget_get_preferred_size(self, minimum_size, natural_size)
    end
    
    def get_child_requisition(requisition)
      GTK.widget_get_child_requisition(self, requisition)
    end
    
    def add_accelerator(accel_signal, accel_group, accel_key, accel_mods, accel_flags)
      GTK.widget_add_accelerator(self, accel_signal, accel_group, accel_key, accel_mods, accel_flags)
    end
    
    def remove_accelerator(accel_group, accel_key, accel_mods)
      GTK.widget_remove_accelerator(self, accel_group, accel_key, accel_mods)
    end
    
    def set_accel_path(accel_path, accel_group)
      GTK.widget_set_accel_path(self, accel_path, accel_group)
    end
    
    def list_accel_closures()
      GTK.widget_list_accel_closures(self)
    end
    
    def can_activate_accel(signal_id)
      GTK.widget_can_activate_accel(self, signal_id)
    end
    
    def mnemonic_activate(group_cycling)
      GTK.widget_mnemonic_activate(self, group_cycling)
    end
    
    def event(event)
      GTK.widget_event(self, event)
    end
    
    def send_expose(event)
      GTK.widget_send_expose(self, event)
    end
    
    def send_focus_change(event)
      GTK.widget_send_focus_change(self, event)
    end
    
    def activate()
      GTK.widget_activate(self)
    end
    
    def reparent(new_parent)
      GTK.widget_reparent(self, new_parent)
    end
    
    def intersect(area, intersection)
      GTK.widget_intersect(self, area, intersection)
    end
    
    def region_intersect(region)
      GTK.widget_region_intersect(self, region)
    end
    
    def freeze_child_notify()
      GTK.widget_freeze_child_notify(self)
    end
    
    def child_notify(child_property)
      GTK.widget_child_notify(self, child_property)
    end
    
    def thaw_child_notify()
      GTK.widget_thaw_child_notify(self)
    end
    
    def set_can_focus(can_focus)
      GTK.widget_set_can_focus(self, can_focus)
    end
    
    def get_can_focus()
      GTK.widget_get_can_focus(self)
    end
    
    def has_focus()
      GTK.widget_has_focus(self)
    end
    
    def is_focus()
      GTK.widget_is_focus(self)
    end
    
    def has_visible_focus()
      GTK.widget_has_visible_focus(self)
    end
    
    def grab_focus()
      GTK.widget_grab_focus(self)
    end
    
    def set_can_default(can_default)
      GTK.widget_set_can_default(self, can_default)
    end
    
    def get_can_default()
      GTK.widget_get_can_default(self)
    end
    
    def has_default()
      GTK.widget_has_default(self)
    end
    
    def grab_default()
      GTK.widget_grab_default(self)
    end
    
    def set_receives_default(receives_default)
      GTK.widget_set_receives_default(self, receives_default)
    end
    
    def get_receives_default()
      GTK.widget_get_receives_default(self)
    end
    
    def has_grab()
      GTK.widget_has_grab(self)
    end
    
    def device_is_shadowed(device)
      GTK.widget_device_is_shadowed(self, device)
    end
    
    def set_name(name)
      GTK.widget_set_name(self, name)
    end
    
    def get_name()
      GTK.widget_get_name(self)
    end
    
    def set_state(state)
      GTK.widget_set_state(self, state)
    end
    
    def get_state()
      GTK.widget_get_state(self)
    end
    
    def set_state_flags(flags, clear)
      GTK.widget_set_state_flags(self, flags, clear)
    end
    
    def unset_state_flags(flags)
      GTK.widget_unset_state_flags(self, flags)
    end
    
    def get_state_flags()
      GTK.widget_get_state_flags(self)
    end
    
    def set_sensitive(sensitive)
      GTK.widget_set_sensitive(self, sensitive)
    end
    
    def get_sensitive()
      GTK.widget_get_sensitive(self)
    end
    
    def is_sensitive()
      GTK.widget_is_sensitive(self)
    end
    
    def set_visible(visible)
      GTK.widget_set_visible(self, visible)
    end
    
    def get_visible()
      GTK.widget_get_visible(self)
    end
    
    def set_has_window(has_window)
      GTK.widget_set_has_window(self, has_window)
    end
    
    def get_has_window()
      GTK.widget_get_has_window(self)
    end
    
    def is_toplevel()
      GTK.widget_is_toplevel(self)
    end
    
    def is_drawable()
      GTK.widget_is_drawable(self)
    end
    
    def set_realized(realized)
      GTK.widget_set_realized(self, realized)
    end
    
    def get_realized()
      GTK.widget_get_realized(self)
    end
    
    def set_mapped(mapped)
      GTK.widget_set_mapped(self, mapped)
    end
    
    def get_mapped()
      GTK.widget_get_mapped(self)
    end
    
    def set_app_paintable(app_paintable)
      GTK.widget_set_app_paintable(self, app_paintable)
    end
    
    def get_app_paintable()
      GTK.widget_get_app_paintable(self)
    end
    
    def set_double_buffered(double_buffered)
      GTK.widget_set_double_buffered(self, double_buffered)
    end
    
    def get_double_buffered()
      GTK.widget_get_double_buffered(self)
    end
    
    def set_redraw_on_allocate(redraw_on_allocate)
      GTK.widget_set_redraw_on_allocate(self, redraw_on_allocate)
    end
    
    def set_parent(parent)
      GTK.widget_set_parent(self, parent)
    end
    
    def get_parent()
      Widget.new GTK.widget_get_parent(self)
    end
    
    def set_parent_window(parent_window)
      GTK.widget_set_parent_window(self, parent_window)
    end
    
    def get_parent_window()
      GTK.widget_get_parent_window(self)
    end
    
    def set_child_visible(is_visible)
      GTK.widget_set_child_visible(self, is_visible)
    end
    
    def get_child_visible()
      GTK.widget_get_child_visible(self)
    end
    
    def set_window(window)
      GTK.widget_set_window(self, window)
    end
    
    def get_window()
      GTK.widget_get_window(self)
    end
    
    def get_allocated_width()
      GTK.widget_get_allocated_width(self)
    end
    
    def get_allocated_height()
      GTK.widget_get_allocated_height(self)
    end
    
    def get_allocation(allocation)
      GTK.widget_get_allocation(self, allocation)
    end
    
    def set_allocation(allocation)
      GTK.widget_set_allocation(self, allocation)
    end
    
    def get_requisition(requisition)
      GTK.widget_get_requisition(self, requisition)
    end
    
    def child_focus(direction)
      GTK.widget_child_focus(self, direction)
    end
    
    def keynav_failed(direction)
      GTK.widget_keynav_failed(self, direction)
    end
    
    def error_bell()
      GTK.widget_error_bell(self)
    end
    
    def set_size_request(width, height)
      GTK.widget_set_size_request(self, width, height)
    end
    
    def get_size_request(width, height)
      GTK.widget_get_size_request(self, width, height)
    end
    
    def set_events(events)
      GTK.widget_set_events(self, events)
    end
    
    def add_events(events)
      GTK.widget_add_events(self, events)
    end
    
    def set_device_events(device, events)
      GTK.widget_set_device_events(self, device, events)
    end
    
    def add_device_events(device, events)
      GTK.widget_add_device_events(self, device, events)
    end
    
    def set_device_enabled(device, enabled)
      GTK.widget_set_device_enabled(self, device, enabled)
    end
    
    def get_device_enabled(device)
      GTK.widget_get_device_enabled(self, device)
    end
    
    def get_toplevel()
      Widget.new GTK.widget_get_toplevel(self)
    end
    
    def get_ancestor(widget_type)
      Widget.new GTK.widget_get_ancestor(self, widget_type)
    end
    
    def get_visual()
      GTK.widget_get_visual(self)
    end
    
    def set_visual(visual)
      GTK.widget_set_visual(self, visual)
    end
    
    def get_screen()
      GTK.widget_get_screen(self)
    end
    
    def has_screen()
      GTK.widget_has_screen(self)
    end
    
    def get_display()
      GTK.widget_get_display(self)
    end
    
    def get_root_window()
      GTK.widget_get_root_window(self)
    end
    
    def get_settings()
      GTK.widget_get_settings(self)
    end
    
    def get_clipboard(selection)
      Clipboard.new GTK.widget_get_clipboard(self, selection)
    end
    
    def get_hexpand()
      GTK.widget_get_hexpand(self)
    end
    
    def set_hexpand(expand)
      GTK.widget_set_hexpand(self, expand)
    end
    
    def get_hexpand_set()
      GTK.widget_get_hexpand_set(self)
    end
    
    def set_hexpand_set(set)
      GTK.widget_set_hexpand_set(self, set)
    end
    
    def get_vexpand()
      GTK.widget_get_vexpand(self)
    end
    
    def set_vexpand(expand)
      GTK.widget_set_vexpand(self, expand)
    end
    
    def get_vexpand_set()
      GTK.widget_get_vexpand_set(self)
    end
    
    def set_vexpand_set(set)
      GTK.widget_set_vexpand_set(self, set)
    end
    
    def queue_compute_expand()
      GTK.widget_queue_compute_expand(self)
    end
    
    def compute_expand(orientation)
      GTK.widget_compute_expand(self, orientation)
    end
    
    def get_support_multidevice()
      GTK.widget_get_support_multidevice(self)
    end
    
    def set_support_multidevice(support_multidevice)
      GTK.widget_set_support_multidevice(self, support_multidevice)
    end
    
    def get_accessible()
      GTK.widget_get_accessible(self)
    end
    
    def get_halign()
      GTK.widget_get_halign(self)
    end
    
    def set_halign(align)
      GTK.widget_set_halign(self, align)
    end
    
    def get_valign()
      GTK.widget_get_valign(self)
    end
    
    def set_valign(align)
      GTK.widget_set_valign(self, align)
    end
    
    def get_margin_left()
      GTK.widget_get_margin_left(self)
    end
    
    def set_margin_left(margin)
      GTK.widget_set_margin_left(self, margin)
    end
    
    def get_margin_right()
      GTK.widget_get_margin_right(self)
    end
    
    def set_margin_right(margin)
      GTK.widget_set_margin_right(self, margin)
    end
    
    def get_margin_top()
      GTK.widget_get_margin_top(self)
    end
    
    def set_margin_top(margin)
      GTK.widget_set_margin_top(self, margin)
    end
    
    def get_margin_bottom()
      GTK.widget_get_margin_bottom(self)
    end
    
    def set_margin_bottom(margin)
      GTK.widget_set_margin_bottom(self, margin)
    end
    
    def get_events()
      GTK.widget_get_events(self)
    end
    
    def get_device_events(device)
      GTK.widget_get_device_events(self, device)
    end
    
    def get_pointer(x, y)
      GTK.widget_get_pointer(self, x, y)
    end
    
    def is_ancestor(ancestor)
      GTK.widget_is_ancestor(self, ancestor)
    end
    
    def translate_coordinates(dest_widget, src_x, src_y, dest_x, dest_y)
      GTK.widget_translate_coordinates(self, dest_widget, src_x, src_y, dest_x, dest_y)
    end
    
    def hide_on_delete()
      GTK.widget_hide_on_delete(self)
    end
    
    def override_color(state, color)
      GTK.widget_override_color(self, state, color)
    end
    
    def override_background_color(state, color)
      GTK.widget_override_background_color(self, state, color)
    end
    
    def override_font(font_desc)
      GTK.widget_override_font(self, font_desc)
    end
    
    def override_symbolic_color(name, color)
      GTK.widget_override_symbolic_color(self, name, color)
    end
    
    def override_cursor(cursor, secondary_cursor)
      GTK.widget_override_cursor(self, cursor, secondary_cursor)
    end
    
    def reset_style()
      GTK.widget_reset_style(self)
    end
    
    def style_attach()
      GTK.widget_style_attach(self)
    end
    
    def has_rc_style()
      GTK.widget_has_rc_style(self)
    end
    
    def set_style(style)
      GTK.widget_set_style(self, style)
    end
    
    def ensure_style()
      GTK.widget_ensure_style(self)
    end
    
    def get_style()
      GTK.widget_get_style(self)
    end
    
    def modify_style(style)
      GTK.widget_modify_style(self, style)
    end
    
    def get_modifier_style()
      GTK.widget_get_modifier_style(self)
    end
    
    def modify_fg(state, color)
      GTK.widget_modify_fg(self, state, color)
    end
    
    def modify_bg(state, color)
      GTK.widget_modify_bg(self, state, color)
    end
    
    def modify_text(state, color)
      GTK.widget_modify_text(self, state, color)
    end
    
    def modify_base(state, color)
      GTK.widget_modify_base(self, state, color)
    end
    
    def modify_cursor(primary, secondary)
      GTK.widget_modify_cursor(self, primary, secondary)
    end
    
    def modify_font(font_desc)
      GTK.widget_modify_font(self, font_desc)
    end
    
    def reset_rc_styles()
      GTK.widget_reset_rc_styles(self)
    end
    
    def path(path_length, path, path_reversed)
      GTK.widget_path(self, path_length, path, path_reversed)
    end
    
    def class_path(path_length, path, path_reversed)
      GTK.widget_class_path(self, path_length, path, path_reversed)
    end
    
    def render_icon(stock_id, size, detail)
      GTK.widget_render_icon(self, stock_id, size, detail)
    end
    
    def create_pango_context()
      GTK.widget_create_pango_context(self)
    end
    
    def get_pango_context()
      GTK.widget_get_pango_context(self)
    end
    
    def create_pango_layout(text)
      GTK.widget_create_pango_layout(self, text)
    end
    
    def render_icon_pixbuf(stock_id, size)
      GTK.widget_render_icon_pixbuf(self, stock_id, size)
    end
    
    def set_composite_name(name)
      GTK.widget_set_composite_name(self, name)
    end
    
    def get_composite_name()
      GTK.widget_get_composite_name(self)
    end
    
    def style_get_property(property_name, value)
      GTK.widget_style_get_property(self, property_name, value)
    end
    
    def style_get_valist(first_property_name, var_args)
      GTK.widget_style_get_valist(self, first_property_name, var_args)
    end
    
    def style_get(first_property_name)
      GTK.widget_style_get(self, first_property_name)
    end
    
    def set_direction(dir)
      GTK.widget_set_direction(self, dir)
    end
    
    def get_direction()
      GTK.widget_get_direction(self)
    end
    
    def is_composited()
      GTK.widget_is_composited(self)
    end
    
    def shape_combine_region(region)
      GTK.widget_shape_combine_region(self, region)
    end
    
    def input_shape_combine_region(region)
      GTK.widget_input_shape_combine_region(self, region)
    end
    
    def list_mnemonic_labels()
      GTK.widget_list_mnemonic_labels(self)
    end
    
    def add_mnemonic_label(label)
      GTK.widget_add_mnemonic_label(self, label)
    end
    
    def remove_mnemonic_label(label)
      GTK.widget_remove_mnemonic_label(self, label)
    end
    
    def set_tooltip_window(custom_window)
      GTK.widget_set_tooltip_window(self, custom_window)
    end
    
    def get_tooltip_window()
      Window.new GTK.widget_get_tooltip_window(self)
    end
    
    def trigger_tooltip_query()
      GTK.widget_trigger_tooltip_query(self)
    end
    
    def set_tooltip_text(text)
      GTK.widget_set_tooltip_text(self, text)
    end
    
    def get_tooltip_text()
      GTK.widget_get_tooltip_text(self)
    end
    
    def set_tooltip_markup(markup)
      GTK.widget_set_tooltip_markup(self, markup)
    end
    
    def get_tooltip_markup()
      GTK.widget_get_tooltip_markup(self)
    end
    
    def set_has_tooltip(has_tooltip)
      GTK.widget_set_has_tooltip(self, has_tooltip)
    end
    
    def get_has_tooltip()
      GTK.widget_get_has_tooltip(self)
    end
    
    def in_destruction()
      GTK.widget_in_destruction(self)
    end
    
    def get_style_context()
      GTK.widget_get_style_context(self)
    end
    
    def get_path()
      GTK.widget_get_path(self)
    end
  end
  
  class Widget < FFI::Struct
    include WidgetWrappers
    layout :parent_instance, :char,
           :priv, WidgetPrivate
  end
  
  # GtkWidgetClass:
  # @parent_class: The object class structure needs to be the first
  #   element in the widget class structure in order for the class mechanism
  #   to work correctly. This allows a GtkWidgetClass pointer to be cast to
  #   a GObjectClass pointer.
  # @activate_signal: The signal to emit when a widget of this class is
  #   activated, gtk_widget_activate() handles the emission.
  #   Implementation of this signal is optional.
  # @get_request_mode: This allows a widget to tell its parent container whether
  #   it prefers to be allocated in %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH or
  #   %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT mode.
  #   %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH means the widget prefers to have
  #   #GtkWidgetClass.get_preferred_width() called and then
  #   #GtkWidgetClass.get_preferred_height_for_width().
  #   %GTK_SIZE_REQUEST_CONSTANT_SIZE disables any height-for-width or
  #   width-for-height geometry management for a said widget and is the
  #   default return.
  #   It's important to note (as described below) that any widget
  #   which trades height-for-width or width-for-height must respond properly 
  #   to both of the virtual methods #GtkWidgetClass.get_preferred_height_for_width()
  #   and #GtkWidgetClass.get_preferred_width_for_height() since it might be 
  #   queried in either #GtkSizeRequestMode by its parent container.
  # @get_preferred_height: This is called by containers to obtain the minimum
  #   and natural height of a widget. A widget that does not actually trade
  #   any height for width or width for height only has to implement these
  #   two virtual methods (#GtkWidgetClass.get_preferred_width() and
  #   #GtkWidgetClass.get_preferred_height()).
  # @get_preferred_width_for_height: This is analogous to
  #   #GtkWidgetClass.get_preferred_height_for_width() except that it
  #   operates in the oposite orientation. It's rare that a widget actually
  #   does %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT requests but this can happen
  #   when, for example, a widget or container gets additional columns to
  #   compensate for a smaller allocated height.
  # @get_preferred_width: This is called by containers to obtain the minimum
  #   and natural width of a widget. A widget will never be allocated a width
  #   less than its minimum and will only ever be allocated a width greater
  #   than the natural width once all of the said widget's siblings have
  #   received their natural widths.
  #   Furthermore, a widget will only ever be allocated a width greater than
  #   its natural width if it was configured to receive extra expand space
  #   from its parent container.
  # @get_preferred_height_for_width: This is similar to
  #   #GtkWidgetClass.get_preferred_height() except that it is passed a
  #   contextual width to request height for. By implementing this virtual
  #   method it is possible for a #GtkLabel to tell its parent how much height
  #   would be required if the label were to be allocated a said width.
  # @adjust_size_request: Convert an initial size request from a widget's
  #   #GtkSizeRequest virtual method implementations into a size request to
  #   be used by parent containers in laying out the widget.
  #   adjust_size_request adjusts <emphasis>from</emphasis> a child widget's
  #   original request <emphasis>to</emphasis> what a parent container should
  #   use for layout. The @for_size argument will be -1 if the request should
  #   not be for a particular size in the opposing orientation, i.e. if the
  #   request is not height-for-width or width-for-height. If @for_size is
  #   greater than -1, it is the proposed allocation in the opposing
  #   orientation that we need the request for. Implementations of
  #   adjust_size_request should chain up to the default implementation,
  #   which applies #GtkWidget's margin properties and imposes any values
  #   from gtk_widget_set_size_request(). Chaining up should be last,
  #   <emphasis>after</emphasis> your subclass adjusts the request, so
  #   #GtkWidget can apply constraints and add the margin properly.
  # @adjust_size_allocation: Convert an initial size allocation assigned
  #   by a #GtkContainer using gtk_widget_size_allocate(), into an actual
  #   size allocation to be used by the widget. adjust_size_allocation
  #   adjusts <emphasis>to</emphasis> a child widget's actual allocation
  #   <emphasis>from</emphasis> what a parent container computed for the
  #   child. The adjusted allocation must be entirely within the original
  #   allocation. In any custom implementation, chain up to the default
  #   #GtkWidget implementation of this method, which applies the margin
  #   and alignment properties of #GtkWidget. Chain up
  #   <emphasis>before</emphasis> performing your own adjustments so your
  #   own adjustments remove more allocation after the #GtkWidget base
  #   class has already removed margin and alignment. The natural size
  #   passed in should be adjusted in the same way as the allocated size,
  #   which allows adjustments to perform alignments or other changes
  #   based on natural size.
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :activate_signal ::
  #   (Integer) < public >
  # :dispatch_child_properties_changed ::
  #   (FFI::Pointer(*)) seldomly overidden
  # :destroy ::
  #   (FFI::Pointer(*)) basics
  # :show ::
  #   (FFI::Pointer(*)) 
  # :show_all ::
  #   (FFI::Pointer(*)) 
  # :hide ::
  #   (FFI::Pointer(*)) 
  # :map ::
  #   (FFI::Pointer(*)) 
  # :unmap ::
  #   (FFI::Pointer(*)) 
  # :realize ::
  #   (FFI::Pointer(*)) 
  # :unrealize ::
  #   (FFI::Pointer(*)) 
  # :size_allocate ::
  #   (FFI::Pointer(*)) 
  # :state_changed ::
  #   (FFI::Pointer(*)) 
  # :state_flags_changed ::
  #   (FFI::Pointer(*)) 
  # :parent_set ::
  #   (FFI::Pointer(*)) 
  # :hierarchy_changed ::
  #   (FFI::Pointer(*)) 
  # :style_set ::
  #   (FFI::Pointer(*)) 
  # :direction_changed ::
  #   (FFI::Pointer(*)) 
  # :grab_notify ::
  #   (FFI::Pointer(*)) 
  # :child_notify ::
  #   (FFI::Pointer(*)) 
  # :draw ::
  #   (FFI::Pointer(*)) 
  # :get_request_mode ::
  #   (FFI::Pointer(*)) size requests
  # :get_preferred_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width_for_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height_for_width ::
  #   (FFI::Pointer(*)) 
  # :mnemonic_activate ::
  #   (FFI::Pointer(*)) Mnemonics
  # :grab_focus ::
  #   (FFI::Pointer(*)) explicit focus
  # :focus ::
  #   (FFI::Pointer(*)) 
  # :move_focus ::
  #   (FFI::Pointer(*)) keyboard navigation
  # :keynav_failed ::
  #   (FFI::Pointer(*)) 
  # :event ::
  #   (FFI::Pointer(*)) events
  # :button_press_event ::
  #   (FFI::Pointer(*)) 
  # :button_release_event ::
  #   (FFI::Pointer(*)) 
  # :scroll_event ::
  #   (FFI::Pointer(*)) 
  # :motion_notify_event ::
  #   (FFI::Pointer(*)) 
  # :delete_event ::
  #   (FFI::Pointer(*)) 
  # :destroy_event ::
  #   (FFI::Pointer(*)) 
  # :key_press_event ::
  #   (FFI::Pointer(*)) 
  # :key_release_event ::
  #   (FFI::Pointer(*)) 
  # :enter_notify_event ::
  #   (FFI::Pointer(*)) 
  # :leave_notify_event ::
  #   (FFI::Pointer(*)) 
  # :configure_event ::
  #   (FFI::Pointer(*)) 
  # :focus_in_event ::
  #   (FFI::Pointer(*)) 
  # :focus_out_event ::
  #   (FFI::Pointer(*)) 
  # :map_event ::
  #   (FFI::Pointer(*)) 
  # :unmap_event ::
  #   (FFI::Pointer(*)) 
  # :property_notify_event ::
  #   (FFI::Pointer(*)) 
  # :selection_clear_event ::
  #   (FFI::Pointer(*)) 
  # :selection_request_event ::
  #   (FFI::Pointer(*)) 
  # :selection_notify_event ::
  #   (FFI::Pointer(*)) 
  # :proximity_in_event ::
  #   (FFI::Pointer(*)) 
  # :proximity_out_event ::
  #   (FFI::Pointer(*)) 
  # :visibility_notify_event ::
  #   (FFI::Pointer(*)) 
  # :window_state_event ::
  #   (FFI::Pointer(*)) 
  # :damage_event ::
  #   (FFI::Pointer(*)) 
  # :grab_broken_event ::
  #   (FFI::Pointer(*)) 
  # :selection_get ::
  #   (FFI::Pointer(*)) selection
  # :selection_received ::
  #   (FFI::Pointer(*)) 
  # :drag_begin ::
  #   (FFI::Pointer(*)) Source side drag signals
  # :drag_end ::
  #   (FFI::Pointer(*)) 
  # :drag_data_get ::
  #   (FFI::Pointer(*)) 
  # :drag_data_delete ::
  #   (FFI::Pointer(*)) 
  # :drag_leave ::
  #   (FFI::Pointer(*)) Target side drag signals
  # :drag_motion ::
  #   (FFI::Pointer(*)) 
  # :drag_drop ::
  #   (FFI::Pointer(*)) 
  # :drag_data_received ::
  #   (FFI::Pointer(*)) 
  # :drag_failed ::
  #   (FFI::Pointer(*)) 
  # :popup_menu ::
  #   (FFI::Pointer(*)) Signals used only for keybindings
  # :show_help ::
  #   (FFI::Pointer(*)) If a widget has multiple tooltips/whatsthis, it should show the
  #   one for the current focus location, or if that doesn't make
  #   sense, should cycle through them showing each tip alongside
  #   whatever piece of the widget it applies to.
  # :get_accessible ::
  #   (FFI::Pointer(*)) accessibility support
  # :screen_changed ::
  #   (FFI::Pointer(*)) 
  # :can_activate_accel ::
  #   (FFI::Pointer(*)) 
  # :composited_changed ::
  #   (FFI::Pointer(*)) 
  # :query_tooltip ::
  #   (FFI::Pointer(*)) 
  # :compute_expand ::
  #   (FFI::Pointer(*)) 
  # :adjust_size_request ::
  #   (FFI::Pointer(*)) 
  # :adjust_size_allocation ::
  #   (FFI::Pointer(*)) 
  # :style_updated ::
  #   (FFI::Pointer(*)) 
  # :priv ::
  #   (WidgetClassPrivate) < private >
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  module WidgetClassWrappers
    def set_accessible_type(type)
      GTK.widget_class_set_accessible_type(self, type)
    end
    
    def set_accessible_role(role)
      GTK.widget_class_set_accessible_role(self, role)
    end
    
    def install_style_property(pspec)
      GTK.widget_class_install_style_property(self, pspec)
    end
    
    def install_style_property_parser(pspec, parser)
      GTK.widget_class_install_style_property_parser(self, pspec, parser)
    end
    
    def find_style_property(property_name)
      GTK.widget_class_find_style_property(self, property_name)
    end
    
    def list_style_properties(n_properties)
      GTK.widget_class_list_style_properties(self, n_properties)
    end
  end
  
  class WidgetClass < FFI::Struct
    include WidgetClassWrappers
    layout :parent_class, :char,
           :activate_signal, :uint,
           :dispatch_child_properties_changed, :pointer,
           :destroy, :pointer,
           :show, :pointer,
           :show_all, :pointer,
           :hide, :pointer,
           :map, :pointer,
           :unmap, :pointer,
           :realize, :pointer,
           :unrealize, :pointer,
           :size_allocate, :pointer,
           :state_changed, :pointer,
           :state_flags_changed, :pointer,
           :parent_set, :pointer,
           :hierarchy_changed, :pointer,
           :style_set, :pointer,
           :direction_changed, :pointer,
           :grab_notify, :pointer,
           :child_notify, :pointer,
           :draw, :pointer,
           :get_request_mode, :pointer,
           :get_preferred_height, :pointer,
           :get_preferred_width_for_height, :pointer,
           :get_preferred_width, :pointer,
           :get_preferred_height_for_width, :pointer,
           :mnemonic_activate, :pointer,
           :grab_focus, :pointer,
           :focus, :pointer,
           :move_focus, :pointer,
           :keynav_failed, :pointer,
           :event, :pointer,
           :button_press_event, :pointer,
           :button_release_event, :pointer,
           :scroll_event, :pointer,
           :motion_notify_event, :pointer,
           :delete_event, :pointer,
           :destroy_event, :pointer,
           :key_press_event, :pointer,
           :key_release_event, :pointer,
           :enter_notify_event, :pointer,
           :leave_notify_event, :pointer,
           :configure_event, :pointer,
           :focus_in_event, :pointer,
           :focus_out_event, :pointer,
           :map_event, :pointer,
           :unmap_event, :pointer,
           :property_notify_event, :pointer,
           :selection_clear_event, :pointer,
           :selection_request_event, :pointer,
           :selection_notify_event, :pointer,
           :proximity_in_event, :pointer,
           :proximity_out_event, :pointer,
           :visibility_notify_event, :pointer,
           :window_state_event, :pointer,
           :damage_event, :pointer,
           :grab_broken_event, :pointer,
           :selection_get, :pointer,
           :selection_received, :pointer,
           :drag_begin, :pointer,
           :drag_end, :pointer,
           :drag_data_get, :pointer,
           :drag_data_delete, :pointer,
           :drag_leave, :pointer,
           :drag_motion, :pointer,
           :drag_drop, :pointer,
           :drag_data_received, :pointer,
           :drag_failed, :pointer,
           :popup_menu, :pointer,
           :show_help, :pointer,
           :get_accessible, :pointer,
           :screen_changed, :pointer,
           :can_activate_accel, :pointer,
           :composited_changed, :pointer,
           :query_tooltip, :pointer,
           :compute_expand, :pointer,
           :adjust_size_request, :pointer,
           :adjust_size_allocation, :pointer,
           :style_updated, :pointer,
           :priv, WidgetClassPrivate,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # Padding for future expansion
  # 
  # = Fields:
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  # :halign ::
  #   (Integer) 
  # :valign ::
  #   (Integer) 
  # :margin ::
  #   (unknown) 
  class WidgetAuxInfo < FFI::Struct
    layout :width, :int,
           :height, :int,
           :halign, :uint,
           :valign, :uint,
           :margin, :char
  end
  
  # Padding for future expansion
  # 
  # @method widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_type, :gtk_widget_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method widget_new(type, first_property_name)
  # @param [Integer] type 
  # @param [String] first_property_name 
  # @return [Widget] 
  # @scope class
  attach_function :widget_new, :gtk_widget_new, [:ulong, :string], Widget
  
  # (Not documented)
  # 
  # @method widget_destroy(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_destroy, :gtk_widget_destroy, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_destroyed(widget, widget_pointer)
  # @param [Widget] widget 
  # @param [FFI::Pointer(**GtkWidget)] widget_pointer 
  # @return [nil] 
  # @scope class
  attach_function :widget_destroyed, :gtk_widget_destroyed, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_unparent(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_unparent, :gtk_widget_unparent, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_show(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_show, :gtk_widget_show, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_hide(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_hide, :gtk_widget_hide, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_show_now(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_show_now, :gtk_widget_show_now, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_show_all(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_show_all, :gtk_widget_show_all, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_no_show_all(widget, no_show_all)
  # @param [Widget] widget 
  # @param [Integer] no_show_all 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_no_show_all, :gtk_widget_set_no_show_all, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_no_show_all(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_no_show_all, :gtk_widget_get_no_show_all, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_map(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_map, :gtk_widget_map, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_unmap(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_unmap, :gtk_widget_unmap, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_realize(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_realize, :gtk_widget_realize, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_unrealize(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_unrealize, :gtk_widget_unrealize, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_draw(widget, cr)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @return [nil] 
  # @scope class
  attach_function :widget_draw, :gtk_widget_draw, [Widget, :pointer], :void
  
  # Queuing draws
  # 
  # @method widget_queue_draw(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_draw, :gtk_widget_queue_draw, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_queue_draw_area(widget, x, y, width, height)
  # @param [Widget] widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_draw_area, :gtk_widget_queue_draw_area, [Widget, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method widget_queue_draw_region(widget, region)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_draw_region, :gtk_widget_queue_draw_region, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_queue_resize(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_resize, :gtk_widget_queue_resize, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_queue_resize_no_redraw(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_resize_no_redraw, :gtk_widget_queue_resize_no_redraw, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_size_request(widget, requisition)
  # @param [Widget] widget 
  # @param [Requisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :widget_size_request, :gtk_widget_size_request, [Widget, Requisition], :void
  
  # (Not documented)
  # 
  # @method widget_size_allocate(widget, allocation)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :widget_size_allocate, :gtk_widget_size_allocate, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_request_mode(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_size_request_mode_] 
  # @scope class
  attach_function :widget_get_request_mode, :gtk_widget_get_request_mode, [Widget], :gtk_size_request_mode
  
  # (Not documented)
  # 
  # @method widget_get_preferred_width(widget, minimum_width, natural_width)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_preferred_width, :gtk_widget_get_preferred_width, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_preferred_height_for_width(widget, width, minimum_height, natural_height)
  # @param [Widget] widget 
  # @param [Integer] width 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_preferred_height_for_width, :gtk_widget_get_preferred_height_for_width, [Widget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_preferred_height(widget, minimum_height, natural_height)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_preferred_height, :gtk_widget_get_preferred_height, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_preferred_width_for_height(widget, height, minimum_width, natural_width)
  # @param [Widget] widget 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_preferred_width_for_height, :gtk_widget_get_preferred_width_for_height, [Widget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_preferred_size(widget, minimum_size, natural_size)
  # @param [Widget] widget 
  # @param [Requisition] minimum_size 
  # @param [Requisition] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_preferred_size, :gtk_widget_get_preferred_size, [Widget, Requisition, Requisition], :void
  
  # (Not documented)
  # 
  # @method widget_get_child_requisition(widget, requisition)
  # @param [Widget] widget 
  # @param [Requisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_child_requisition, :gtk_widget_get_child_requisition, [Widget, Requisition], :void
  
  # (Not documented)
  # 
  # @method widget_add_accelerator(widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags)
  # @param [Widget] widget 
  # @param [String] accel_signal 
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [unknown] accel_flags 
  # @return [nil] 
  # @scope class
  attach_function :widget_add_accelerator, :gtk_widget_add_accelerator, [Widget, :string, :pointer, :uint, :char, :char], :void
  
  # (Not documented)
  # 
  # @method widget_remove_accelerator(widget, accel_group, accel_key, accel_mods)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [Integer] 
  # @scope class
  attach_function :widget_remove_accelerator, :gtk_widget_remove_accelerator, [Widget, :pointer, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method widget_set_accel_path(widget, accel_path, accel_group)
  # @param [Widget] widget 
  # @param [String] accel_path 
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_accel_path, :gtk_widget_set_accel_path, [Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_list_accel_closures(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :widget_list_accel_closures, :gtk_widget_list_accel_closures, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_can_activate_accel(widget, signal_id)
  # @param [Widget] widget 
  # @param [Integer] signal_id 
  # @return [Integer] 
  # @scope class
  attach_function :widget_can_activate_accel, :gtk_widget_can_activate_accel, [Widget, :uint], :int
  
  # (Not documented)
  # 
  # @method widget_mnemonic_activate(widget, group_cycling)
  # @param [Widget] widget 
  # @param [Integer] group_cycling 
  # @return [Integer] 
  # @scope class
  attach_function :widget_mnemonic_activate, :gtk_widget_mnemonic_activate, [Widget, :int], :int
  
  # (Not documented)
  # 
  # @method widget_event(widget, event)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :widget_event, :gtk_widget_event, [Widget, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_send_expose(widget, event)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :widget_send_expose, :gtk_widget_send_expose, [Widget, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_send_focus_change(widget, event)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :widget_send_focus_change, :gtk_widget_send_focus_change, [Widget, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_activate(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_activate, :gtk_widget_activate, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_reparent(widget, new_parent)
  # @param [Widget] widget 
  # @param [Widget] new_parent 
  # @return [nil] 
  # @scope class
  attach_function :widget_reparent, :gtk_widget_reparent, [Widget, Widget], :void
  
  # (Not documented)
  # 
  # @method widget_intersect(widget, area, intersection)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] area 
  # @param [FFI::Pointer(*GdkRectangle)] intersection 
  # @return [Integer] 
  # @scope class
  attach_function :widget_intersect, :gtk_widget_intersect, [Widget, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_region_intersect(widget, region)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [FFI::Pointer(*CairoRegionT)] 
  # @scope class
  attach_function :widget_region_intersect, :gtk_widget_region_intersect, [Widget, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method widget_freeze_child_notify(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_freeze_child_notify, :gtk_widget_freeze_child_notify, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_child_notify(widget, child_property)
  # @param [Widget] widget 
  # @param [String] child_property 
  # @return [nil] 
  # @scope class
  attach_function :widget_child_notify, :gtk_widget_child_notify, [Widget, :string], :void
  
  # (Not documented)
  # 
  # @method widget_thaw_child_notify(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_thaw_child_notify, :gtk_widget_thaw_child_notify, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_can_focus(widget, can_focus)
  # @param [Widget] widget 
  # @param [Integer] can_focus 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_can_focus, :gtk_widget_set_can_focus, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_can_focus(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_can_focus, :gtk_widget_get_can_focus, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_has_focus(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_focus, :gtk_widget_has_focus, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_is_focus(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_focus, :gtk_widget_is_focus, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_has_visible_focus(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_visible_focus, :gtk_widget_has_visible_focus, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_grab_focus(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_grab_focus, :gtk_widget_grab_focus, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_can_default(widget, can_default)
  # @param [Widget] widget 
  # @param [Integer] can_default 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_can_default, :gtk_widget_set_can_default, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_can_default(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_can_default, :gtk_widget_get_can_default, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_has_default(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_default, :gtk_widget_has_default, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_grab_default(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_grab_default, :gtk_widget_grab_default, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_receives_default(widget, receives_default)
  # @param [Widget] widget 
  # @param [Integer] receives_default 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_receives_default, :gtk_widget_set_receives_default, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_receives_default(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_receives_default, :gtk_widget_get_receives_default, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_has_grab(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_grab, :gtk_widget_has_grab, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_device_is_shadowed(widget, device)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [Integer] 
  # @scope class
  attach_function :widget_device_is_shadowed, :gtk_widget_device_is_shadowed, [Widget, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_set_name(widget, name)
  # @param [Widget] widget 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_name, :gtk_widget_set_name, [Widget, :string], :void
  
  # (Not documented)
  # 
  # @method widget_get_name(widget)
  # @param [Widget] widget 
  # @return [String] 
  # @scope class
  attach_function :widget_get_name, :gtk_widget_get_name, [Widget], :string
  
  # (Not documented)
  # 
  # @method widget_set_state(widget, state)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_state, :gtk_widget_set_state, [Widget, :gtk_state_type], :void
  
  # (Not documented)
  # 
  # @method widget_get_state(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_state_type_] 
  # @scope class
  attach_function :widget_get_state, :gtk_widget_get_state, [Widget], :gtk_state_type
  
  # (Not documented)
  # 
  # @method widget_set_state_flags(widget, flags, clear)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @param [Integer] clear 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_state_flags, :gtk_widget_set_state_flags, [Widget, :gtk_state_flags, :int], :void
  
  # (Not documented)
  # 
  # @method widget_unset_state_flags(widget, flags)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @return [nil] 
  # @scope class
  attach_function :widget_unset_state_flags, :gtk_widget_unset_state_flags, [Widget, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method widget_get_state_flags(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_state_flags_] 
  # @scope class
  attach_function :widget_get_state_flags, :gtk_widget_get_state_flags, [Widget], :gtk_state_flags
  
  # (Not documented)
  # 
  # @method widget_set_sensitive(widget, sensitive)
  # @param [Widget] widget 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_sensitive, :gtk_widget_set_sensitive, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_sensitive(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_sensitive, :gtk_widget_get_sensitive, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_is_sensitive(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_sensitive, :gtk_widget_is_sensitive, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_visible(widget, visible)
  # @param [Widget] widget 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_visible, :gtk_widget_set_visible, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_visible(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_visible, :gtk_widget_get_visible, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_has_window(widget, has_window)
  # @param [Widget] widget 
  # @param [Integer] has_window 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_has_window, :gtk_widget_set_has_window, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_has_window(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_has_window, :gtk_widget_get_has_window, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_is_toplevel(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_toplevel, :gtk_widget_is_toplevel, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_is_drawable(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_drawable, :gtk_widget_is_drawable, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_realized(widget, realized)
  # @param [Widget] widget 
  # @param [Integer] realized 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_realized, :gtk_widget_set_realized, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_realized(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_realized, :gtk_widget_get_realized, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_mapped(widget, mapped)
  # @param [Widget] widget 
  # @param [Integer] mapped 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_mapped, :gtk_widget_set_mapped, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_mapped(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_mapped, :gtk_widget_get_mapped, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_app_paintable(widget, app_paintable)
  # @param [Widget] widget 
  # @param [Integer] app_paintable 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_app_paintable, :gtk_widget_set_app_paintable, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_app_paintable(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_app_paintable, :gtk_widget_get_app_paintable, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_double_buffered(widget, double_buffered)
  # @param [Widget] widget 
  # @param [Integer] double_buffered 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_double_buffered, :gtk_widget_set_double_buffered, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_double_buffered(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_double_buffered, :gtk_widget_get_double_buffered, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_redraw_on_allocate(widget, redraw_on_allocate)
  # @param [Widget] widget 
  # @param [Integer] redraw_on_allocate 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_redraw_on_allocate, :gtk_widget_set_redraw_on_allocate, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_set_parent(widget, parent)
  # @param [Widget] widget 
  # @param [Widget] parent 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_parent, :gtk_widget_set_parent, [Widget, Widget], :void
  
  # (Not documented)
  # 
  # @method widget_get_parent(widget)
  # @param [Widget] widget 
  # @return [Widget] 
  # @scope class
  attach_function :widget_get_parent, :gtk_widget_get_parent, [Widget], Widget
  
  # (Not documented)
  # 
  # @method widget_set_parent_window(widget, parent_window)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkWindow)] parent_window 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_parent_window, :gtk_widget_set_parent_window, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_parent_window(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :widget_get_parent_window, :gtk_widget_get_parent_window, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_set_child_visible(widget, is_visible)
  # @param [Widget] widget 
  # @param [Integer] is_visible 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_child_visible, :gtk_widget_set_child_visible, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_child_visible(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_child_visible, :gtk_widget_get_child_visible, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_window(widget, window)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_window, :gtk_widget_set_window, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_window(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :widget_get_window, :gtk_widget_get_window, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_allocated_width(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_allocated_width, :gtk_widget_get_allocated_width, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_get_allocated_height(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_allocated_height, :gtk_widget_get_allocated_height, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_get_allocation(widget, allocation)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_allocation, :gtk_widget_get_allocation, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_set_allocation(widget, allocation)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_allocation, :gtk_widget_set_allocation, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_requisition(widget, requisition)
  # @param [Widget] widget 
  # @param [Requisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_requisition, :gtk_widget_get_requisition, [Widget, Requisition], :void
  
  # (Not documented)
  # 
  # @method widget_child_focus(widget, direction)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_direction_type_] direction 
  # @return [Integer] 
  # @scope class
  attach_function :widget_child_focus, :gtk_widget_child_focus, [Widget, :gtk_direction_type], :int
  
  # (Not documented)
  # 
  # @method widget_keynav_failed(widget, direction)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_direction_type_] direction 
  # @return [Integer] 
  # @scope class
  attach_function :widget_keynav_failed, :gtk_widget_keynav_failed, [Widget, :gtk_direction_type], :int
  
  # (Not documented)
  # 
  # @method widget_error_bell(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_error_bell, :gtk_widget_error_bell, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_size_request(widget, width, height)
  # @param [Widget] widget 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_size_request, :gtk_widget_set_size_request, [Widget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_size_request(widget, width, height)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_size_request, :gtk_widget_get_size_request, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_set_events(widget, events)
  # @param [Widget] widget 
  # @param [Integer] events 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_events, :gtk_widget_set_events, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_add_events(widget, events)
  # @param [Widget] widget 
  # @param [Integer] events 
  # @return [nil] 
  # @scope class
  attach_function :widget_add_events, :gtk_widget_add_events, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_set_device_events(widget, device, events)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [unknown] events 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_device_events, :gtk_widget_set_device_events, [Widget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method widget_add_device_events(widget, device, events)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [unknown] events 
  # @return [nil] 
  # @scope class
  attach_function :widget_add_device_events, :gtk_widget_add_device_events, [Widget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method widget_set_device_enabled(widget, device, enabled)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [Integer] enabled 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_device_enabled, :gtk_widget_set_device_enabled, [Widget, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_device_enabled(widget, device)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_device_enabled, :gtk_widget_get_device_enabled, [Widget, :pointer], :int
  
  # (Not documented)
  # 
  # @method widget_get_toplevel(widget)
  # @param [Widget] widget 
  # @return [Widget] 
  # @scope class
  attach_function :widget_get_toplevel, :gtk_widget_get_toplevel, [Widget], Widget
  
  # (Not documented)
  # 
  # @method widget_get_ancestor(widget, widget_type)
  # @param [Widget] widget 
  # @param [Integer] widget_type 
  # @return [Widget] 
  # @scope class
  attach_function :widget_get_ancestor, :gtk_widget_get_ancestor, [Widget, :ulong], Widget
  
  # (Not documented)
  # 
  # @method widget_get_visual(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkVisual)] 
  # @scope class
  attach_function :widget_get_visual, :gtk_widget_get_visual, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_set_visual(widget, visual)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkVisual)] visual 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_visual, :gtk_widget_set_visual, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_screen(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :widget_get_screen, :gtk_widget_get_screen, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_has_screen(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_screen, :gtk_widget_has_screen, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_get_display(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkDisplay)] 
  # @scope class
  attach_function :widget_get_display, :gtk_widget_get_display, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_root_window(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :widget_get_root_window, :gtk_widget_get_root_window, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_settings(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkSettings)] 
  # @scope class
  attach_function :widget_get_settings, :gtk_widget_get_settings, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_clipboard(widget, selection)
  # @param [Widget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @return [Clipboard] 
  # @scope class
  attach_function :widget_get_clipboard, :gtk_widget_get_clipboard, [Widget, :pointer], Clipboard
  
  # Expand flags and related support
  # 
  # @method widget_get_hexpand(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_hexpand, :gtk_widget_get_hexpand, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_hexpand(widget, expand)
  # @param [Widget] widget 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_hexpand, :gtk_widget_set_hexpand, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_hexpand_set(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_hexpand_set, :gtk_widget_get_hexpand_set, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_hexpand_set(widget, set)
  # @param [Widget] widget 
  # @param [Integer] set 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_hexpand_set, :gtk_widget_set_hexpand_set, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_vexpand(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_vexpand, :gtk_widget_get_vexpand, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_vexpand(widget, expand)
  # @param [Widget] widget 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_vexpand, :gtk_widget_set_vexpand, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_vexpand_set(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_vexpand_set, :gtk_widget_get_vexpand_set, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_vexpand_set(widget, set)
  # @param [Widget] widget 
  # @param [Integer] set 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_vexpand_set, :gtk_widget_set_vexpand_set, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_queue_compute_expand(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_queue_compute_expand, :gtk_widget_queue_compute_expand, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_compute_expand(widget, orientation)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [Integer] 
  # @scope class
  attach_function :widget_compute_expand, :gtk_widget_compute_expand, [Widget, :gtk_orientation], :int
  
  # Multidevice support
  # 
  # @method widget_get_support_multidevice(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_support_multidevice, :gtk_widget_get_support_multidevice, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_support_multidevice(widget, support_multidevice)
  # @param [Widget] widget 
  # @param [Integer] support_multidevice 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_support_multidevice, :gtk_widget_set_support_multidevice, [Widget, :int], :void
  
  # Accessibility support
  # 
  # @method widget_class_set_accessible_type(widget_class, type)
  # @param [WidgetClass] widget_class 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :widget_class_set_accessible_type, :gtk_widget_class_set_accessible_type, [WidgetClass, :ulong], :void
  
  # (Not documented)
  # 
  # @method widget_class_set_accessible_role(widget_class, role)
  # @param [WidgetClass] widget_class 
  # @param [unknown] role 
  # @return [nil] 
  # @scope class
  attach_function :widget_class_set_accessible_role, :gtk_widget_class_set_accessible_role, [WidgetClass, :char], :void
  
  # (Not documented)
  # 
  # @method widget_get_accessible(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*AtkObject)] 
  # @scope class
  attach_function :widget_get_accessible, :gtk_widget_get_accessible, [Widget], :pointer
  
  # Margin and alignment
  # 
  # @method widget_get_halign(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_align_] 
  # @scope class
  attach_function :widget_get_halign, :gtk_widget_get_halign, [Widget], :gtk_align
  
  # (Not documented)
  # 
  # @method widget_set_halign(widget, align)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_align_] align 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_halign, :gtk_widget_set_halign, [Widget, :gtk_align], :void
  
  # (Not documented)
  # 
  # @method widget_get_valign(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_align_] 
  # @scope class
  attach_function :widget_get_valign, :gtk_widget_get_valign, [Widget], :gtk_align
  
  # (Not documented)
  # 
  # @method widget_set_valign(widget, align)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_align_] align 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_valign, :gtk_widget_set_valign, [Widget, :gtk_align], :void
  
  # (Not documented)
  # 
  # @method widget_get_margin_left(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_margin_left, :gtk_widget_get_margin_left, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_margin_left(widget, margin)
  # @param [Widget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_margin_left, :gtk_widget_set_margin_left, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_margin_right(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_margin_right, :gtk_widget_get_margin_right, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_margin_right(widget, margin)
  # @param [Widget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_margin_right, :gtk_widget_set_margin_right, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_margin_top(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_margin_top, :gtk_widget_get_margin_top, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_margin_top(widget, margin)
  # @param [Widget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_margin_top, :gtk_widget_set_margin_top, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_margin_bottom(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_margin_bottom, :gtk_widget_get_margin_bottom, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_margin_bottom(widget, margin)
  # @param [Widget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_margin_bottom, :gtk_widget_set_margin_bottom, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_events(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_events, :gtk_widget_get_events, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_get_device_events(widget, device)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [unknown] 
  # @scope class
  attach_function :widget_get_device_events, :gtk_widget_get_device_events, [Widget, :pointer], :char
  
  # (Not documented)
  # 
  # @method widget_get_pointer(widget, x, y)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @return [nil] 
  # @scope class
  attach_function :widget_get_pointer, :gtk_widget_get_pointer, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_is_ancestor(widget, ancestor)
  # @param [Widget] widget 
  # @param [Widget] ancestor 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_ancestor, :gtk_widget_is_ancestor, [Widget, Widget], :int
  
  # (Not documented)
  # 
  # @method widget_translate_coordinates(src_widget, dest_widget, src_x, src_y, dest_x, dest_y)
  # @param [Widget] src_widget 
  # @param [Widget] dest_widget 
  # @param [Integer] src_x 
  # @param [Integer] src_y 
  # @param [FFI::Pointer(*Gint)] dest_x 
  # @param [FFI::Pointer(*Gint)] dest_y 
  # @return [Integer] 
  # @scope class
  attach_function :widget_translate_coordinates, :gtk_widget_translate_coordinates, [Widget, Widget, :int, :int, :pointer, :pointer], :int
  
  # Hide widget and return TRUE.
  # 
  # @method widget_hide_on_delete(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_hide_on_delete, :gtk_widget_hide_on_delete, [Widget], :int
  
  # Functions to override widget styling
  # 
  # @method widget_override_color(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_override_color, :gtk_widget_override_color, [Widget, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_override_background_color(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_override_background_color, :gtk_widget_override_background_color, [Widget, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_override_font(widget, font_desc)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
  # @return [nil] 
  # @scope class
  attach_function :widget_override_font, :gtk_widget_override_font, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_override_symbolic_color(widget, name, color)
  # @param [Widget] widget 
  # @param [String] name 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_override_symbolic_color, :gtk_widget_override_symbolic_color, [Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_override_cursor(widget, cursor, secondary_cursor)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkRGBA)] cursor 
  # @param [FFI::Pointer(*GdkRGBA)] secondary_cursor 
  # @return [nil] 
  # @scope class
  attach_function :widget_override_cursor, :gtk_widget_override_cursor, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_reset_style(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_reset_style, :gtk_widget_reset_style, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_style_attach(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_style_attach, :gtk_widget_style_attach, [Widget], :void
  
  # Widget styles.
  # 
  # @method widget_has_rc_style(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_has_rc_style, :gtk_widget_has_rc_style, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_set_style(widget, style)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkStyle)] style 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_style, :gtk_widget_set_style, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_ensure_style(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_ensure_style, :gtk_widget_ensure_style, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_get_style(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkStyle)] 
  # @scope class
  attach_function :widget_get_style, :gtk_widget_get_style, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_modify_style(widget, style)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkRcStyle)] style 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_style, :gtk_widget_modify_style, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_modifier_style(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkRcStyle)] 
  # @scope class
  attach_function :widget_get_modifier_style, :gtk_widget_get_modifier_style, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_modify_fg(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_fg, :gtk_widget_modify_fg, [Widget, :gtk_state_type, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_modify_bg(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_bg, :gtk_widget_modify_bg, [Widget, :gtk_state_type, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_modify_text(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_text, :gtk_widget_modify_text, [Widget, :gtk_state_type, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_modify_base(widget, state, color)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_base, :gtk_widget_modify_base, [Widget, :gtk_state_type, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_modify_cursor(widget, primary, secondary)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkColor)] primary 
  # @param [FFI::Pointer(*GdkColor)] secondary 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_cursor, :gtk_widget_modify_cursor, [Widget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_modify_font(widget, font_desc)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
  # @return [nil] 
  # @scope class
  attach_function :widget_modify_font, :gtk_widget_modify_font, [Widget, :pointer], :void
  
  # Descend recursively and set rc-style on all widgets without user styles
  # 
  # @method widget_reset_rc_styles(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_reset_rc_styles, :gtk_widget_reset_rc_styles, [Widget], :void
  
  # Set certain default values to be used at widget creation time 
  # 
  # @method widget_get_default_style()
  # @return [FFI::Pointer(*GtkStyle)] 
  # @scope class
  attach_function :widget_get_default_style, :gtk_widget_get_default_style, [], :pointer
  
  # Compute a widget's path in the form "GtkWindow.MyLabel", and
  # return newly alocated strings.
  # 
  # @method widget_path(widget, path_length, path, path_reversed)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Guint)] path_length 
  # @param [FFI::Pointer(**Gchar)] path 
  # @param [FFI::Pointer(**Gchar)] path_reversed 
  # @return [nil] 
  # @scope class
  attach_function :widget_path, :gtk_widget_path, [Widget, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_class_path(widget, path_length, path, path_reversed)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*Guint)] path_length 
  # @param [FFI::Pointer(**Gchar)] path 
  # @param [FFI::Pointer(**Gchar)] path_reversed 
  # @return [nil] 
  # @scope class
  attach_function :widget_class_path, :gtk_widget_class_path, [Widget, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_render_icon(widget, stock_id, size, detail)
  # @param [Widget] widget 
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @param [String] detail 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :widget_render_icon, :gtk_widget_render_icon, [Widget, :string, :gtk_icon_size, :string], :pointer
  
  # GTK_DISABLE_DEPRECATED
  # 
  # @method widget_create_pango_context(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*PangoContext)] 
  # @scope class
  attach_function :widget_create_pango_context, :gtk_widget_create_pango_context, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_pango_context(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*PangoContext)] 
  # @scope class
  attach_function :widget_get_pango_context, :gtk_widget_get_pango_context, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_create_pango_layout(widget, text)
  # @param [Widget] widget 
  # @param [String] text 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :widget_create_pango_layout, :gtk_widget_create_pango_layout, [Widget, :string], :pointer
  
  # (Not documented)
  # 
  # @method widget_render_icon_pixbuf(widget, stock_id, size)
  # @param [Widget] widget 
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :widget_render_icon_pixbuf, :gtk_widget_render_icon_pixbuf, [Widget, :string, :gtk_icon_size], :pointer
  
  # handle composite names for GTK_COMPOSITE_CHILD widgets,
  # the returned name is newly allocated.
  # 
  # @method widget_set_composite_name(widget, name)
  # @param [Widget] widget 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_composite_name, :gtk_widget_set_composite_name, [Widget, :string], :void
  
  # (Not documented)
  # 
  # @method widget_get_composite_name(widget)
  # @param [Widget] widget 
  # @return [String] 
  # @scope class
  attach_function :widget_get_composite_name, :gtk_widget_get_composite_name, [Widget], :string
  
  # Push/pop pairs, to change default values upon a widget's creation.
  # This will override the values that got set by the
  # gtk_widget_set_default_* () functions.
  # 
  # @method widget_push_composite_child()
  # @return [nil] 
  # @scope class
  attach_function :widget_push_composite_child, :gtk_widget_push_composite_child, [], :void
  
  # (Not documented)
  # 
  # @method widget_pop_composite_child()
  # @return [nil] 
  # @scope class
  attach_function :widget_pop_composite_child, :gtk_widget_pop_composite_child, [], :void
  
  # widget style properties
  # 
  # @method widget_class_install_style_property(klass, pspec)
  # @param [WidgetClass] klass 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :widget_class_install_style_property, :gtk_widget_class_install_style_property, [WidgetClass, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_class_install_style_property_parser(klass, pspec, parser)
  # @param [WidgetClass] klass 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(GtkRcPropertyParser)] parser 
  # @return [nil] 
  # @scope class
  attach_function :widget_class_install_style_property_parser, :gtk_widget_class_install_style_property_parser, [WidgetClass, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_class_find_style_property(klass, property_name)
  # @param [WidgetClass] klass 
  # @param [String] property_name 
  # @return [FFI::Pointer(*GParamSpec)] 
  # @scope class
  attach_function :widget_class_find_style_property, :gtk_widget_class_find_style_property, [WidgetClass, :string], :pointer
  
  # (Not documented)
  # 
  # @method widget_class_list_style_properties(klass, n_properties)
  # @param [WidgetClass] klass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :widget_class_list_style_properties, :gtk_widget_class_list_style_properties, [WidgetClass, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method widget_style_get_property(widget, property_name, value)
  # @param [Widget] widget 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :widget_style_get_property, :gtk_widget_style_get_property, [Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_style_get_valist(widget, first_property_name, var_args)
  # @param [Widget] widget 
  # @param [String] first_property_name 
  # @param [FFI::Pointer(*VaListTag)] var_args 
  # @return [nil] 
  # @scope class
  attach_function :widget_style_get_valist, :gtk_widget_style_get_valist, [Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_style_get(widget, first_property_name)
  # @param [Widget] widget 
  # @param [String] first_property_name 
  # @return [nil] 
  # @scope class
  attach_function :widget_style_get, :gtk_widget_style_get, [Widget, :string], :void
  
  # Functions for setting directionality for widgets
  # 
  # @method widget_set_direction(widget, dir)
  # @param [Widget] widget 
  # @param [Symbol from _enum_gtk_text_direction_] dir 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_direction, :gtk_widget_set_direction, [Widget, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method widget_get_direction(widget)
  # @param [Widget] widget 
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :widget_get_direction, :gtk_widget_get_direction, [Widget], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method widget_set_default_direction(dir)
  # @param [Symbol from _enum_gtk_text_direction_] dir 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_default_direction, :gtk_widget_set_default_direction, [:gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method widget_get_default_direction()
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :widget_get_default_direction, :gtk_widget_get_default_direction, [], :gtk_text_direction
  
  # Compositing manager functionality
  # 
  # @method widget_is_composited(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_is_composited, :gtk_widget_is_composited, [Widget], :int
  
  # Counterpart to gdk_window_shape_combine_region.
  # 
  # @method widget_shape_combine_region(widget, region)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :widget_shape_combine_region, :gtk_widget_shape_combine_region, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_input_shape_combine_region(widget, region)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :widget_input_shape_combine_region, :gtk_widget_input_shape_combine_region, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_list_mnemonic_labels(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :widget_list_mnemonic_labels, :gtk_widget_list_mnemonic_labels, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_add_mnemonic_label(widget, label)
  # @param [Widget] widget 
  # @param [Widget] label 
  # @return [nil] 
  # @scope class
  attach_function :widget_add_mnemonic_label, :gtk_widget_add_mnemonic_label, [Widget, Widget], :void
  
  # (Not documented)
  # 
  # @method widget_remove_mnemonic_label(widget, label)
  # @param [Widget] widget 
  # @param [Widget] label 
  # @return [nil] 
  # @scope class
  attach_function :widget_remove_mnemonic_label, :gtk_widget_remove_mnemonic_label, [Widget, Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_tooltip_window(widget, custom_window)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GtkWindow)] custom_window 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_tooltip_window, :gtk_widget_set_tooltip_window, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method widget_get_tooltip_window(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkWindow)] 
  # @scope class
  attach_function :widget_get_tooltip_window, :gtk_widget_get_tooltip_window, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_trigger_tooltip_query(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :widget_trigger_tooltip_query, :gtk_widget_trigger_tooltip_query, [Widget], :void
  
  # (Not documented)
  # 
  # @method widget_set_tooltip_text(widget, text)
  # @param [Widget] widget 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_tooltip_text, :gtk_widget_set_tooltip_text, [Widget, :string], :void
  
  # (Not documented)
  # 
  # @method widget_get_tooltip_text(widget)
  # @param [Widget] widget 
  # @return [String] 
  # @scope class
  attach_function :widget_get_tooltip_text, :gtk_widget_get_tooltip_text, [Widget], :string
  
  # (Not documented)
  # 
  # @method widget_set_tooltip_markup(widget, markup)
  # @param [Widget] widget 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_tooltip_markup, :gtk_widget_set_tooltip_markup, [Widget, :string], :void
  
  # (Not documented)
  # 
  # @method widget_get_tooltip_markup(widget)
  # @param [Widget] widget 
  # @return [String] 
  # @scope class
  attach_function :widget_get_tooltip_markup, :gtk_widget_get_tooltip_markup, [Widget], :string
  
  # (Not documented)
  # 
  # @method widget_set_has_tooltip(widget, has_tooltip)
  # @param [Widget] widget 
  # @param [Integer] has_tooltip 
  # @return [nil] 
  # @scope class
  attach_function :widget_set_has_tooltip, :gtk_widget_set_has_tooltip, [Widget, :int], :void
  
  # (Not documented)
  # 
  # @method widget_get_has_tooltip(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_get_has_tooltip, :gtk_widget_get_has_tooltip, [Widget], :int
  
  # (Not documented)
  # 
  # @method cairo_should_draw_window(cr, window)
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_should_draw_window, :gtk_cairo_should_draw_window, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method cairo_transform_to_window(cr, widget, window)
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :cairo_transform_to_window, :gtk_cairo_transform_to_window, [:pointer, Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method requisition_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :requisition_get_type, :gtk_requisition_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method requisition_new()
  # @return [Requisition] 
  # @scope class
  attach_function :requisition_new, :gtk_requisition_new, [], Requisition
  
  # (Not documented)
  # 
  # @method requisition_copy(requisition)
  # @param [Requisition] requisition 
  # @return [Requisition] 
  # @scope class
  attach_function :requisition_copy, :gtk_requisition_copy, [Requisition], Requisition
  
  # (Not documented)
  # 
  # @method requisition_free(requisition)
  # @param [Requisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :requisition_free, :gtk_requisition_free, [Requisition], :void
  
  # (Not documented)
  # 
  # @method widget_in_destruction(widget)
  # @param [Widget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :widget_in_destruction, :gtk_widget_in_destruction, [Widget], :int
  
  # (Not documented)
  # 
  # @method widget_get_style_context(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkStyleContext)] 
  # @scope class
  attach_function :widget_get_style_context, :gtk_widget_get_style_context, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method widget_get_path(widget)
  # @param [Widget] widget 
  # @return [FFI::Pointer(*GtkWidgetPath)] 
  # @scope class
  attach_function :widget_get_path, :gtk_widget_get_path, [Widget], :pointer
  
  # (Not documented)
  # 
  # @method ubuntu_gtk_widget_set_has_grab(widget, has_grab)
  # @param [Widget] widget 
  # @param [Integer] has_grab 
  # @return [nil] 
  # @scope class
  attach_function :ubuntu_gtk_widget_set_has_grab, :ubuntu_gtk_widget_set_has_grab, [Widget, :int], :void
  
  # (Not documented)
  class ContainerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (Widget) 
  # :priv ::
  #   (ContainerPrivate) < private >
  module ContainerWrappers
    def set_border_width(border_width)
      GTK.container_set_border_width(self, border_width)
    end
    
    def get_border_width()
      GTK.container_get_border_width(self)
    end
    
    def add(widget)
      GTK.container_add(self, widget)
    end
    
    def remove(widget)
      GTK.container_remove(self, widget)
    end
    
    def set_resize_mode(resize_mode)
      GTK.container_set_resize_mode(self, resize_mode)
    end
    
    def get_resize_mode()
      GTK.container_get_resize_mode(self)
    end
    
    def check_resize()
      GTK.container_check_resize(self)
    end
    
    def foreach(callback, callback_data)
      GTK.container_foreach(self, callback, callback_data)
    end
    
    def get_children()
      GTK.container_get_children(self)
    end
    
    def propagate_draw(child, cr)
      GTK.container_propagate_draw(self, child, cr)
    end
    
    def set_focus_chain(focusable_widgets)
      GTK.container_set_focus_chain(self, focusable_widgets)
    end
    
    def get_focus_chain(focusable_widgets)
      GTK.container_get_focus_chain(self, focusable_widgets)
    end
    
    def unset_focus_chain()
      GTK.container_unset_focus_chain(self)
    end
    
    def set_reallocate_redraws(needs_redraws)
      GTK.container_set_reallocate_redraws(self, needs_redraws)
    end
    
    def set_focus_child(child)
      GTK.container_set_focus_child(self, child)
    end
    
    def get_focus_child()
      Widget.new GTK.container_get_focus_child(self)
    end
    
    def set_focus_vadjustment(adjustment)
      GTK.container_set_focus_vadjustment(self, adjustment)
    end
    
    def get_focus_vadjustment()
      GTK.container_get_focus_vadjustment(self)
    end
    
    def set_focus_hadjustment(adjustment)
      GTK.container_set_focus_hadjustment(self, adjustment)
    end
    
    def get_focus_hadjustment()
      GTK.container_get_focus_hadjustment(self)
    end
    
    def resize_children()
      GTK.container_resize_children(self)
    end
    
    def child_type()
      GTK.container_child_type(self)
    end
    
    def add_with_properties(widget, first_prop_name)
      GTK.container_add_with_properties(self, widget, first_prop_name)
    end
    
    def child_set(child, first_prop_name)
      GTK.container_child_set(self, child, first_prop_name)
    end
    
    def child_get(child, first_prop_name)
      GTK.container_child_get(self, child, first_prop_name)
    end
    
    def child_set_valist(child, first_property_name, var_args)
      GTK.container_child_set_valist(self, child, first_property_name, var_args)
    end
    
    def child_get_valist(child, first_property_name, var_args)
      GTK.container_child_get_valist(self, child, first_property_name, var_args)
    end
    
    def child_set_property(child, property_name, value)
      GTK.container_child_set_property(self, child, property_name, value)
    end
    
    def child_get_property(child, property_name, value)
      GTK.container_child_get_property(self, child, property_name, value)
    end
    
    def child_notify(child, child_property)
      GTK.container_child_notify(self, child, child_property)
    end
    
    def forall(callback, callback_data)
      GTK.container_forall(self, callback, callback_data)
    end
    
    def get_path_for_child(child)
      GTK.container_get_path_for_child(self, child)
    end
  end
  
  class Container < FFI::Struct
    include ContainerWrappers
    layout :widget, Widget.by_value,
           :priv, ContainerPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (WidgetClass) 
  # :add ::
  #   (FFI::Pointer(*)) 
  # :remove ::
  #   (FFI::Pointer(*)) 
  # :check_resize ::
  #   (FFI::Pointer(*)) 
  # :forall ::
  #   (FFI::Pointer(*)) 
  # :set_focus_child ::
  #   (FFI::Pointer(*)) 
  # :child_type ::
  #   (FFI::Pointer(*)) 
  # :composite_name ::
  #   (FFI::Pointer(*)) 
  # :set_child_property ::
  #   (FFI::Pointer(*)) 
  # :get_child_property ::
  #   (FFI::Pointer(*)) 
  # :get_path_for_child ::
  #   (FFI::Pointer(*)) 
  # :handle_border_width ::
  #   (Integer) < private >
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  module ContainerClassWrappers
    def install_child_property(property_id, pspec)
      GTK.container_class_install_child_property(self, property_id, pspec)
    end
    
    def handle_border_width()
      GTK.container_class_handle_border_width(self)
    end
  end
  
  class ContainerClass < FFI::Struct
    include ContainerClassWrappers
    layout :parent_class, WidgetClass.by_value,
           :add, :pointer,
           :remove, :pointer,
           :check_resize, :pointer,
           :forall, :pointer,
           :set_focus_child, :pointer,
           :child_type, :pointer,
           :composite_name, :pointer,
           :set_child_property, :pointer,
           :get_child_property, :pointer,
           :get_path_for_child, :pointer,
           :handle_border_width, :uint,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # Application-level methods
  # 
  # @method container_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :container_get_type, :gtk_container_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method container_set_border_width(container, border_width)
  # @param [Container] container 
  # @param [Integer] border_width 
  # @return [nil] 
  # @scope class
  attach_function :container_set_border_width, :gtk_container_set_border_width, [Container, :uint], :void
  
  # (Not documented)
  # 
  # @method container_get_border_width(container)
  # @param [Container] container 
  # @return [Integer] 
  # @scope class
  attach_function :container_get_border_width, :gtk_container_get_border_width, [Container], :uint
  
  # (Not documented)
  # 
  # @method container_add(container, widget)
  # @param [Container] container 
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :container_add, :gtk_container_add, [Container, Widget], :void
  
  # (Not documented)
  # 
  # @method container_remove(container, widget)
  # @param [Container] container 
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :container_remove, :gtk_container_remove, [Container, Widget], :void
  
  # (Not documented)
  # 
  # @method container_set_resize_mode(container, resize_mode)
  # @param [Container] container 
  # @param [Symbol from _enum_gtk_resize_mode_] resize_mode 
  # @return [nil] 
  # @scope class
  attach_function :container_set_resize_mode, :gtk_container_set_resize_mode, [Container, :gtk_resize_mode], :void
  
  # (Not documented)
  # 
  # @method container_get_resize_mode(container)
  # @param [Container] container 
  # @return [Symbol from _enum_gtk_resize_mode_] 
  # @scope class
  attach_function :container_get_resize_mode, :gtk_container_get_resize_mode, [Container], :gtk_resize_mode
  
  # (Not documented)
  # 
  # @method container_check_resize(container)
  # @param [Container] container 
  # @return [nil] 
  # @scope class
  attach_function :container_check_resize, :gtk_container_check_resize, [Container], :void
  
  # (Not documented)
  # 
  # @method container_foreach(container, callback, callback_data)
  # @param [Container] container 
  # @param [Proc(_callback_gtk_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :container_foreach, :gtk_container_foreach, [Container, :gtk_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_get_children(container)
  # @param [Container] container 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :container_get_children, :gtk_container_get_children, [Container], :pointer
  
  # (Not documented)
  # 
  # @method container_propagate_draw(container, child, cr)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @return [nil] 
  # @scope class
  attach_function :container_propagate_draw, :gtk_container_propagate_draw, [Container, Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_set_focus_chain(container, focusable_widgets)
  # @param [Container] container 
  # @param [FFI::Pointer(*GList)] focusable_widgets 
  # @return [nil] 
  # @scope class
  attach_function :container_set_focus_chain, :gtk_container_set_focus_chain, [Container, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_get_focus_chain(container, focusable_widgets)
  # @param [Container] container 
  # @param [FFI::Pointer(**GList)] focusable_widgets 
  # @return [Integer] 
  # @scope class
  attach_function :container_get_focus_chain, :gtk_container_get_focus_chain, [Container, :pointer], :int
  
  # (Not documented)
  # 
  # @method container_unset_focus_chain(container)
  # @param [Container] container 
  # @return [nil] 
  # @scope class
  attach_function :container_unset_focus_chain, :gtk_container_unset_focus_chain, [Container], :void
  
  # Widget-level methods
  # 
  # @method container_set_reallocate_redraws(container, needs_redraws)
  # @param [Container] container 
  # @param [Integer] needs_redraws 
  # @return [nil] 
  # @scope class
  attach_function :container_set_reallocate_redraws, :gtk_container_set_reallocate_redraws, [Container, :int], :void
  
  # (Not documented)
  # 
  # @method container_set_focus_child(container, child)
  # @param [Container] container 
  # @param [Widget] child 
  # @return [nil] 
  # @scope class
  attach_function :container_set_focus_child, :gtk_container_set_focus_child, [Container, Widget], :void
  
  # (Not documented)
  # 
  # @method container_get_focus_child(container)
  # @param [Container] container 
  # @return [Widget] 
  # @scope class
  attach_function :container_get_focus_child, :gtk_container_get_focus_child, [Container], Widget
  
  # (Not documented)
  # 
  # @method container_set_focus_vadjustment(container, adjustment)
  # @param [Container] container 
  # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :container_set_focus_vadjustment, :gtk_container_set_focus_vadjustment, [Container, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_get_focus_vadjustment(container)
  # @param [Container] container 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :container_get_focus_vadjustment, :gtk_container_get_focus_vadjustment, [Container], :pointer
  
  # (Not documented)
  # 
  # @method container_set_focus_hadjustment(container, adjustment)
  # @param [Container] container 
  # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :container_set_focus_hadjustment, :gtk_container_set_focus_hadjustment, [Container, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_get_focus_hadjustment(container)
  # @param [Container] container 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :container_get_focus_hadjustment, :gtk_container_get_focus_hadjustment, [Container], :pointer
  
  # (Not documented)
  # 
  # @method container_resize_children(container)
  # @param [Container] container 
  # @return [nil] 
  # @scope class
  attach_function :container_resize_children, :gtk_container_resize_children, [Container], :void
  
  # (Not documented)
  # 
  # @method container_child_type(container)
  # @param [Container] container 
  # @return [Integer] 
  # @scope class
  attach_function :container_child_type, :gtk_container_child_type, [Container], :ulong
  
  # (Not documented)
  # 
  # @method container_class_install_child_property(cclass, property_id, pspec)
  # @param [ContainerClass] cclass 
  # @param [Integer] property_id 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :container_class_install_child_property, :gtk_container_class_install_child_property, [ContainerClass, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_class_find_child_property(cclass, property_name)
  # @param [FFI::Pointer(*GObjectClass)] cclass 
  # @param [String] property_name 
  # @return [FFI::Pointer(*GParamSpec)] 
  # @scope class
  attach_function :container_class_find_child_property, :gtk_container_class_find_child_property, [:pointer, :string], :pointer
  
  # (Not documented)
  # 
  # @method container_class_list_child_properties(cclass, n_properties)
  # @param [FFI::Pointer(*GObjectClass)] cclass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :container_class_list_child_properties, :gtk_container_class_list_child_properties, [:pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method container_add_with_properties(container, widget, first_prop_name)
  # @param [Container] container 
  # @param [Widget] widget 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :container_add_with_properties, :gtk_container_add_with_properties, [Container, Widget, :string], :void
  
  # (Not documented)
  # 
  # @method container_child_set(container, child, first_prop_name)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :container_child_set, :gtk_container_child_set, [Container, Widget, :string], :void
  
  # (Not documented)
  # 
  # @method container_child_get(container, child, first_prop_name)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :container_child_get, :gtk_container_child_get, [Container, Widget, :string], :void
  
  # (Not documented)
  # 
  # @method container_child_set_valist(container, child, first_property_name, var_args)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] first_property_name 
  # @param [FFI::Pointer(*VaListTag)] var_args 
  # @return [nil] 
  # @scope class
  attach_function :container_child_set_valist, :gtk_container_child_set_valist, [Container, Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_child_get_valist(container, child, first_property_name, var_args)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] first_property_name 
  # @param [FFI::Pointer(*VaListTag)] var_args 
  # @return [nil] 
  # @scope class
  attach_function :container_child_get_valist, :gtk_container_child_get_valist, [Container, Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_child_set_property(container, child, property_name, value)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :container_child_set_property, :gtk_container_child_set_property, [Container, Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_child_get_property(container, child, property_name, value)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :container_child_get_property, :gtk_container_child_get_property, [Container, Widget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_child_notify(container, child, child_property)
  # @param [Container] container 
  # @param [Widget] child 
  # @param [String] child_property 
  # @return [nil] 
  # @scope class
  attach_function :container_child_notify, :gtk_container_child_notify, [Container, Widget, :string], :void
  
  # GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID:
  # @object: the #GObject on which set_child_property() or get_child_property()
  #  was called
  # @property_id: the numeric id of the property
  # @pspec: the #GParamSpec of the property
  # 
  # This macro should be used to emit a standard warning about unexpected
  # properties in set_child_property() and get_child_property() implementations.
  # 
  # @method container_forall(container, callback, callback_data)
  # @param [Container] container 
  # @param [Proc(_callback_gtk_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :container_forall, :gtk_container_forall, [Container, :gtk_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method container_class_handle_border_width(klass)
  # @param [ContainerClass] klass 
  # @return [nil] 
  # @scope class
  attach_function :container_class_handle_border_width, :gtk_container_class_handle_border_width, [ContainerClass], :void
  
  # (Not documented)
  # 
  # @method container_get_path_for_child(container, child)
  # @param [Container] container 
  # @param [Widget] child 
  # @return [FFI::Pointer(*GtkWidgetPath)] 
  # @scope class
  attach_function :container_get_path_for_child, :gtk_container_get_path_for_child, [Container, Widget], :pointer
  
  # (Not documented)
  class WindowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class WindowGeometryInfo < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class WindowGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (unknown) 
  # :priv ::
  #   (WindowPrivate) 
  module WindowWrappers
    def set_title(title)
      GTK.window_set_title(self, title)
    end
    
    def get_title()
      GTK.window_get_title(self)
    end
    
    def set_wmclass(wmclass_name, wmclass_class)
      GTK.window_set_wmclass(self, wmclass_name, wmclass_class)
    end
    
    def set_role(role)
      GTK.window_set_role(self, role)
    end
    
    def set_startup_id(startup_id)
      GTK.window_set_startup_id(self, startup_id)
    end
    
    def get_role()
      GTK.window_get_role(self)
    end
    
    def add_accel_group(accel_group)
      GTK.window_add_accel_group(self, accel_group)
    end
    
    def remove_accel_group(accel_group)
      GTK.window_remove_accel_group(self, accel_group)
    end
    
    def set_position(position)
      GTK.window_set_position(self, position)
    end
    
    def activate_focus()
      GTK.window_activate_focus(self)
    end
    
    def set_focus(focus)
      GTK.window_set_focus(self, focus)
    end
    
    def get_focus()
      Widget.new GTK.window_get_focus(self)
    end
    
    def set_default(default_widget)
      GTK.window_set_default(self, default_widget)
    end
    
    def get_default_widget()
      Widget.new GTK.window_get_default_widget(self)
    end
    
    def activate_default()
      GTK.window_activate_default(self)
    end
    
    def set_transient_for(parent)
      GTK.window_set_transient_for(self, parent)
    end
    
    def get_transient_for()
      Window.new GTK.window_get_transient_for(self)
    end
    
    def set_opacity(opacity)
      GTK.window_set_opacity(self, opacity)
    end
    
    def get_opacity()
      GTK.window_get_opacity(self)
    end
    
    def set_type_hint(hint)
      GTK.window_set_type_hint(self, hint)
    end
    
    def get_type_hint()
      GTK.window_get_type_hint(self)
    end
    
    def set_skip_taskbar_hint(setting)
      GTK.window_set_skip_taskbar_hint(self, setting)
    end
    
    def get_skip_taskbar_hint()
      GTK.window_get_skip_taskbar_hint(self)
    end
    
    def set_skip_pager_hint(setting)
      GTK.window_set_skip_pager_hint(self, setting)
    end
    
    def get_skip_pager_hint()
      GTK.window_get_skip_pager_hint(self)
    end
    
    def set_urgency_hint(setting)
      GTK.window_set_urgency_hint(self, setting)
    end
    
    def get_urgency_hint()
      GTK.window_get_urgency_hint(self)
    end
    
    def set_accept_focus(setting)
      GTK.window_set_accept_focus(self, setting)
    end
    
    def get_accept_focus()
      GTK.window_get_accept_focus(self)
    end
    
    def set_focus_on_map(setting)
      GTK.window_set_focus_on_map(self, setting)
    end
    
    def get_focus_on_map()
      GTK.window_get_focus_on_map(self)
    end
    
    def set_destroy_with_parent(setting)
      GTK.window_set_destroy_with_parent(self, setting)
    end
    
    def get_destroy_with_parent()
      GTK.window_get_destroy_with_parent(self)
    end
    
    def set_mnemonics_visible(setting)
      GTK.window_set_mnemonics_visible(self, setting)
    end
    
    def get_mnemonics_visible()
      GTK.window_get_mnemonics_visible(self)
    end
    
    def set_focus_visible(setting)
      GTK.window_set_focus_visible(self, setting)
    end
    
    def get_focus_visible()
      GTK.window_get_focus_visible(self)
    end
    
    def set_resizable(resizable)
      GTK.window_set_resizable(self, resizable)
    end
    
    def get_resizable()
      GTK.window_get_resizable(self)
    end
    
    def set_gravity(gravity)
      GTK.window_set_gravity(self, gravity)
    end
    
    def get_gravity()
      GTK.window_get_gravity(self)
    end
    
    def set_geometry_hints(geometry_widget, geometry, geom_mask)
      GTK.window_set_geometry_hints(self, geometry_widget, geometry, geom_mask)
    end
    
    def set_screen(screen)
      GTK.window_set_screen(self, screen)
    end
    
    def get_screen()
      GTK.window_get_screen(self)
    end
    
    def is_active()
      GTK.window_is_active(self)
    end
    
    def has_toplevel_focus()
      GTK.window_has_toplevel_focus(self)
    end
    
    def set_decorated(setting)
      GTK.window_set_decorated(self, setting)
    end
    
    def get_decorated()
      GTK.window_get_decorated(self)
    end
    
    def set_deletable(setting)
      GTK.window_set_deletable(self, setting)
    end
    
    def get_deletable()
      GTK.window_get_deletable(self)
    end
    
    def set_icon_list(list)
      GTK.window_set_icon_list(self, list)
    end
    
    def get_icon_list()
      GTK.window_get_icon_list(self)
    end
    
    def set_icon(icon)
      GTK.window_set_icon(self, icon)
    end
    
    def set_icon_name(name)
      GTK.window_set_icon_name(self, name)
    end
    
    def set_icon_from_file(filename, err)
      GTK.window_set_icon_from_file(self, filename, err)
    end
    
    def get_icon()
      GTK.window_get_icon(self)
    end
    
    def get_icon_name()
      GTK.window_get_icon_name(self)
    end
    
    def set_modal(modal)
      GTK.window_set_modal(self, modal)
    end
    
    def get_modal()
      GTK.window_get_modal(self)
    end
    
    def set_has_user_ref_count(setting)
      GTK.window_set_has_user_ref_count(self, setting)
    end
    
    def add_mnemonic(keyval, target)
      GTK.window_add_mnemonic(self, keyval, target)
    end
    
    def remove_mnemonic(keyval, target)
      GTK.window_remove_mnemonic(self, keyval, target)
    end
    
    def mnemonic_activate(keyval, modifier)
      GTK.window_mnemonic_activate(self, keyval, modifier)
    end
    
    def set_mnemonic_modifier(modifier)
      GTK.window_set_mnemonic_modifier(self, modifier)
    end
    
    def get_mnemonic_modifier()
      GTK.window_get_mnemonic_modifier(self)
    end
    
    def activate_key(event)
      GTK.window_activate_key(self, event)
    end
    
    def propagate_key_event(event)
      GTK.window_propagate_key_event(self, event)
    end
    
    def present()
      GTK.window_present(self)
    end
    
    def present_with_time(timestamp)
      GTK.window_present_with_time(self, timestamp)
    end
    
    def iconify()
      GTK.window_iconify(self)
    end
    
    def deiconify()
      GTK.window_deiconify(self)
    end
    
    def stick()
      GTK.window_stick(self)
    end
    
    def unstick()
      GTK.window_unstick(self)
    end
    
    def maximize()
      GTK.window_maximize(self)
    end
    
    def unmaximize()
      GTK.window_unmaximize(self)
    end
    
    def fullscreen()
      GTK.window_fullscreen(self)
    end
    
    def unfullscreen()
      GTK.window_unfullscreen(self)
    end
    
    def set_keep_above(setting)
      GTK.window_set_keep_above(self, setting)
    end
    
    def set_keep_below(setting)
      GTK.window_set_keep_below(self, setting)
    end
    
    def begin_resize_drag(edge, button, root_x, root_y, timestamp)
      GTK.window_begin_resize_drag(self, edge, button, root_x, root_y, timestamp)
    end
    
    def begin_move_drag(button, root_x, root_y, timestamp)
      GTK.window_begin_move_drag(self, button, root_x, root_y, timestamp)
    end
    
    def set_default_size(width, height)
      GTK.window_set_default_size(self, width, height)
    end
    
    def get_default_size(width, height)
      GTK.window_get_default_size(self, width, height)
    end
    
    def resize(width, height)
      GTK.window_resize(self, width, height)
    end
    
    def get_size(width, height)
      GTK.window_get_size(self, width, height)
    end
    
    def move(x, y)
      GTK.window_move(self, x, y)
    end
    
    def get_position(root_x, root_y)
      GTK.window_get_position(self, root_x, root_y)
    end
    
    def parse_geometry(geometry)
      GTK.window_parse_geometry(self, geometry)
    end
    
    def set_default_geometry(width, height)
      GTK.window_set_default_geometry(self, width, height)
    end
    
    def resize_to_geometry(width, height)
      GTK.window_resize_to_geometry(self, width, height)
    end
    
    def get_group()
      WindowGroup.new GTK.window_get_group(self)
    end
    
    def has_group()
      GTK.window_has_group(self)
    end
    
    def reshow_with_initial_size()
      GTK.window_reshow_with_initial_size(self)
    end
    
    def get_window_type()
      GTK.window_get_window_type(self)
    end
    
    def get_application()
      GTK.window_get_application(self)
    end
    
    def set_application(application)
      GTK.window_set_application(self, application)
    end
    
    def set_has_resize_grip(value)
      GTK.window_set_has_resize_grip(self, value)
    end
    
    def get_has_resize_grip()
      GTK.window_get_has_resize_grip(self)
    end
    
    def resize_grip_is_visible()
      GTK.window_resize_grip_is_visible(self)
    end
    
    def get_resize_grip_area(rect)
      GTK.window_get_resize_grip_area(self, rect)
    end
  end
  
  class Window < FFI::Struct
    include WindowWrappers
    layout :bin, :char,
           :priv, WindowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :set_focus ::
  #   (FFI::Pointer(*)) 
  # :activate_focus ::
  #   (FFI::Pointer(*)) G_SIGNAL_ACTION signals for keybindings
  # :activate_default ::
  #   (FFI::Pointer(*)) 
  # :keys_changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WindowClass < FFI::Struct
    layout :parent_class, :char,
           :set_focus, :pointer,
           :activate_focus, :pointer,
           :activate_default, :pointer,
           :keys_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # Padding for future expansion
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WindowGroupPrivate) 
  module WindowGroupWrappers
    def add_window(window)
      GTK.window_group_add_window(self, window)
    end
    
    def remove_window(window)
      GTK.window_group_remove_window(self, window)
    end
    
    def list_windows()
      GTK.window_group_list_windows(self)
    end
    
    def get_current_grab()
      Widget.new GTK.window_group_get_current_grab(self)
    end
    
    def get_current_device_grab(device)
      Widget.new GTK.window_group_get_current_device_grab(self, device)
    end
  end
  
  class WindowGroup < FFI::Struct
    include WindowGroupWrappers
    layout :parent_instance, :char,
           :priv, WindowGroupPrivate
  end
  
  # Padding for future expansion
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WindowGroupClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # Padding for future expansion
  # 
  # @method window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :window_get_type, :gtk_window_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method window_new(type)
  # @param [Symbol from _enum_gtk_window_type_] type 
  # @return [Widget] 
  # @scope class
  attach_function :window_new, :gtk_window_new, [:gtk_window_type], Widget
  
  # (Not documented)
  # 
  # @method window_set_title(window, title)
  # @param [Window] window 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :window_set_title, :gtk_window_set_title, [Window, :string], :void
  
  # (Not documented)
  # 
  # @method window_get_title(window)
  # @param [Window] window 
  # @return [String] 
  # @scope class
  attach_function :window_get_title, :gtk_window_get_title, [Window], :string
  
  # (Not documented)
  # 
  # @method window_set_wmclass(window, wmclass_name, wmclass_class)
  # @param [Window] window 
  # @param [String] wmclass_name 
  # @param [String] wmclass_class 
  # @return [nil] 
  # @scope class
  attach_function :window_set_wmclass, :gtk_window_set_wmclass, [Window, :string, :string], :void
  
  # (Not documented)
  # 
  # @method window_set_role(window, role)
  # @param [Window] window 
  # @param [String] role 
  # @return [nil] 
  # @scope class
  attach_function :window_set_role, :gtk_window_set_role, [Window, :string], :void
  
  # (Not documented)
  # 
  # @method window_set_startup_id(window, startup_id)
  # @param [Window] window 
  # @param [String] startup_id 
  # @return [nil] 
  # @scope class
  attach_function :window_set_startup_id, :gtk_window_set_startup_id, [Window, :string], :void
  
  # (Not documented)
  # 
  # @method window_get_role(window)
  # @param [Window] window 
  # @return [String] 
  # @scope class
  attach_function :window_get_role, :gtk_window_get_role, [Window], :string
  
  # (Not documented)
  # 
  # @method window_add_accel_group(window, accel_group)
  # @param [Window] window 
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :window_add_accel_group, :gtk_window_add_accel_group, [Window, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_remove_accel_group(window, accel_group)
  # @param [Window] window 
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :window_remove_accel_group, :gtk_window_remove_accel_group, [Window, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_set_position(window, position)
  # @param [Window] window 
  # @param [Symbol from _enum_gtk_window_position_] position 
  # @return [nil] 
  # @scope class
  attach_function :window_set_position, :gtk_window_set_position, [Window, :gtk_window_position], :void
  
  # (Not documented)
  # 
  # @method window_activate_focus(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_activate_focus, :gtk_window_activate_focus, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_focus(window, focus)
  # @param [Window] window 
  # @param [Widget] focus 
  # @return [nil] 
  # @scope class
  attach_function :window_set_focus, :gtk_window_set_focus, [Window, Widget], :void
  
  # (Not documented)
  # 
  # @method window_get_focus(window)
  # @param [Window] window 
  # @return [Widget] 
  # @scope class
  attach_function :window_get_focus, :gtk_window_get_focus, [Window], Widget
  
  # (Not documented)
  # 
  # @method window_set_default(window, default_widget)
  # @param [Window] window 
  # @param [Widget] default_widget 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default, :gtk_window_set_default, [Window, Widget], :void
  
  # (Not documented)
  # 
  # @method window_get_default_widget(window)
  # @param [Window] window 
  # @return [Widget] 
  # @scope class
  attach_function :window_get_default_widget, :gtk_window_get_default_widget, [Window], Widget
  
  # (Not documented)
  # 
  # @method window_activate_default(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_activate_default, :gtk_window_activate_default, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_transient_for(window, parent)
  # @param [Window] window 
  # @param [Window] parent 
  # @return [nil] 
  # @scope class
  attach_function :window_set_transient_for, :gtk_window_set_transient_for, [Window, Window], :void
  
  # (Not documented)
  # 
  # @method window_get_transient_for(window)
  # @param [Window] window 
  # @return [Window] 
  # @scope class
  attach_function :window_get_transient_for, :gtk_window_get_transient_for, [Window], Window
  
  # (Not documented)
  # 
  # @method window_set_opacity(window, opacity)
  # @param [Window] window 
  # @param [Float] opacity 
  # @return [nil] 
  # @scope class
  attach_function :window_set_opacity, :gtk_window_set_opacity, [Window, :double], :void
  
  # (Not documented)
  # 
  # @method window_get_opacity(window)
  # @param [Window] window 
  # @return [Float] 
  # @scope class
  attach_function :window_get_opacity, :gtk_window_get_opacity, [Window], :double
  
  # (Not documented)
  # 
  # @method window_set_type_hint(window, hint)
  # @param [Window] window 
  # @param [unknown] hint 
  # @return [nil] 
  # @scope class
  attach_function :window_set_type_hint, :gtk_window_set_type_hint, [Window, :char], :void
  
  # (Not documented)
  # 
  # @method window_get_type_hint(window)
  # @param [Window] window 
  # @return [unknown] 
  # @scope class
  attach_function :window_get_type_hint, :gtk_window_get_type_hint, [Window], :char
  
  # (Not documented)
  # 
  # @method window_set_skip_taskbar_hint(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_skip_taskbar_hint, :gtk_window_set_skip_taskbar_hint, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_skip_taskbar_hint(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_skip_taskbar_hint, :gtk_window_get_skip_taskbar_hint, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_skip_pager_hint(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_skip_pager_hint, :gtk_window_set_skip_pager_hint, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_skip_pager_hint(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_skip_pager_hint, :gtk_window_get_skip_pager_hint, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_urgency_hint(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_urgency_hint, :gtk_window_set_urgency_hint, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_urgency_hint(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_urgency_hint, :gtk_window_get_urgency_hint, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_accept_focus(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_accept_focus, :gtk_window_set_accept_focus, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_accept_focus(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_accept_focus, :gtk_window_get_accept_focus, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_focus_on_map(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_focus_on_map, :gtk_window_set_focus_on_map, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_focus_on_map(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_focus_on_map, :gtk_window_get_focus_on_map, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_destroy_with_parent(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_destroy_with_parent, :gtk_window_set_destroy_with_parent, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_destroy_with_parent(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_destroy_with_parent, :gtk_window_get_destroy_with_parent, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_mnemonics_visible(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_mnemonics_visible, :gtk_window_set_mnemonics_visible, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_mnemonics_visible(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_mnemonics_visible, :gtk_window_get_mnemonics_visible, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_focus_visible(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_focus_visible, :gtk_window_set_focus_visible, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_focus_visible(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_focus_visible, :gtk_window_get_focus_visible, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_resizable(window, resizable)
  # @param [Window] window 
  # @param [Integer] resizable 
  # @return [nil] 
  # @scope class
  attach_function :window_set_resizable, :gtk_window_set_resizable, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_resizable(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_resizable, :gtk_window_get_resizable, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_gravity(window, gravity)
  # @param [Window] window 
  # @param [unknown] gravity 
  # @return [nil] 
  # @scope class
  attach_function :window_set_gravity, :gtk_window_set_gravity, [Window, :char], :void
  
  # (Not documented)
  # 
  # @method window_get_gravity(window)
  # @param [Window] window 
  # @return [unknown] 
  # @scope class
  attach_function :window_get_gravity, :gtk_window_get_gravity, [Window], :char
  
  # (Not documented)
  # 
  # @method window_set_geometry_hints(window, geometry_widget, geometry, geom_mask)
  # @param [Window] window 
  # @param [Widget] geometry_widget 
  # @param [FFI::Pointer(*GdkGeometry)] geometry 
  # @param [unknown] geom_mask 
  # @return [nil] 
  # @scope class
  attach_function :window_set_geometry_hints, :gtk_window_set_geometry_hints, [Window, Widget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method window_set_screen(window, screen)
  # @param [Window] window 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :window_set_screen, :gtk_window_set_screen, [Window, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_get_screen(window)
  # @param [Window] window 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :window_get_screen, :gtk_window_get_screen, [Window], :pointer
  
  # (Not documented)
  # 
  # @method window_is_active(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_is_active, :gtk_window_is_active, [Window], :int
  
  # (Not documented)
  # 
  # @method window_has_toplevel_focus(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_has_toplevel_focus, :gtk_window_has_toplevel_focus, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_decorated(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_decorated, :gtk_window_set_decorated, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_decorated(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_decorated, :gtk_window_get_decorated, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_deletable(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_deletable, :gtk_window_set_deletable, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_deletable(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_deletable, :gtk_window_get_deletable, [Window], :int
  
  # (Not documented)
  # 
  # @method window_set_icon_list(window, list)
  # @param [Window] window 
  # @param [FFI::Pointer(*GList)] list 
  # @return [nil] 
  # @scope class
  attach_function :window_set_icon_list, :gtk_window_set_icon_list, [Window, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_get_icon_list(window)
  # @param [Window] window 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :window_get_icon_list, :gtk_window_get_icon_list, [Window], :pointer
  
  # (Not documented)
  # 
  # @method window_set_icon(window, icon)
  # @param [Window] window 
  # @param [FFI::Pointer(*GdkPixbuf)] icon 
  # @return [nil] 
  # @scope class
  attach_function :window_set_icon, :gtk_window_set_icon, [Window, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_set_icon_name(window, name)
  # @param [Window] window 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :window_set_icon_name, :gtk_window_set_icon_name, [Window, :string], :void
  
  # (Not documented)
  # 
  # @method window_set_icon_from_file(window, filename, err)
  # @param [Window] window 
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] err 
  # @return [Integer] 
  # @scope class
  attach_function :window_set_icon_from_file, :gtk_window_set_icon_from_file, [Window, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method window_get_icon(window)
  # @param [Window] window 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :window_get_icon, :gtk_window_get_icon, [Window], :pointer
  
  # (Not documented)
  # 
  # @method window_get_icon_name(window)
  # @param [Window] window 
  # @return [String] 
  # @scope class
  attach_function :window_get_icon_name, :gtk_window_get_icon_name, [Window], :string
  
  # (Not documented)
  # 
  # @method window_set_default_icon_list(list)
  # @param [FFI::Pointer(*GList)] list 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default_icon_list, :gtk_window_set_default_icon_list, [:pointer], :void
  
  # (Not documented)
  # 
  # @method window_get_default_icon_list()
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :window_get_default_icon_list, :gtk_window_get_default_icon_list, [], :pointer
  
  # (Not documented)
  # 
  # @method window_set_default_icon(icon)
  # @param [FFI::Pointer(*GdkPixbuf)] icon 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default_icon, :gtk_window_set_default_icon, [:pointer], :void
  
  # (Not documented)
  # 
  # @method window_set_default_icon_name(name)
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default_icon_name, :gtk_window_set_default_icon_name, [:string], :void
  
  # (Not documented)
  # 
  # @method window_get_default_icon_name()
  # @return [String] 
  # @scope class
  attach_function :window_get_default_icon_name, :gtk_window_get_default_icon_name, [], :string
  
  # (Not documented)
  # 
  # @method window_set_default_icon_from_file(filename, err)
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] err 
  # @return [Integer] 
  # @scope class
  attach_function :window_set_default_icon_from_file, :gtk_window_set_default_icon_from_file, [:string, :pointer], :int
  
  # (Not documented)
  # 
  # @method window_set_auto_startup_notification(setting)
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_auto_startup_notification, :gtk_window_set_auto_startup_notification, [:int], :void
  
  # If window is set modal, input will be grabbed when show and released when hide
  # 
  # @method window_set_modal(window, modal)
  # @param [Window] window 
  # @param [Integer] modal 
  # @return [nil] 
  # @scope class
  attach_function :window_set_modal, :gtk_window_set_modal, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_modal(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_modal, :gtk_window_get_modal, [Window], :int
  
  # (Not documented)
  # 
  # @method window_list_toplevels()
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :window_list_toplevels, :gtk_window_list_toplevels, [], :pointer
  
  # (Not documented)
  # 
  # @method window_set_has_user_ref_count(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_has_user_ref_count, :gtk_window_set_has_user_ref_count, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_add_mnemonic(window, keyval, target)
  # @param [Window] window 
  # @param [Integer] keyval 
  # @param [Widget] target 
  # @return [nil] 
  # @scope class
  attach_function :window_add_mnemonic, :gtk_window_add_mnemonic, [Window, :uint, Widget], :void
  
  # (Not documented)
  # 
  # @method window_remove_mnemonic(window, keyval, target)
  # @param [Window] window 
  # @param [Integer] keyval 
  # @param [Widget] target 
  # @return [nil] 
  # @scope class
  attach_function :window_remove_mnemonic, :gtk_window_remove_mnemonic, [Window, :uint, Widget], :void
  
  # (Not documented)
  # 
  # @method window_mnemonic_activate(window, keyval, modifier)
  # @param [Window] window 
  # @param [Integer] keyval 
  # @param [unknown] modifier 
  # @return [Integer] 
  # @scope class
  attach_function :window_mnemonic_activate, :gtk_window_mnemonic_activate, [Window, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method window_set_mnemonic_modifier(window, modifier)
  # @param [Window] window 
  # @param [unknown] modifier 
  # @return [nil] 
  # @scope class
  attach_function :window_set_mnemonic_modifier, :gtk_window_set_mnemonic_modifier, [Window, :char], :void
  
  # (Not documented)
  # 
  # @method window_get_mnemonic_modifier(window)
  # @param [Window] window 
  # @return [unknown] 
  # @scope class
  attach_function :window_get_mnemonic_modifier, :gtk_window_get_mnemonic_modifier, [Window], :char
  
  # (Not documented)
  # 
  # @method window_activate_key(window, event)
  # @param [Window] window 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :window_activate_key, :gtk_window_activate_key, [Window, :pointer], :int
  
  # (Not documented)
  # 
  # @method window_propagate_key_event(window, event)
  # @param [Window] window 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :window_propagate_key_event, :gtk_window_propagate_key_event, [Window, :pointer], :int
  
  # (Not documented)
  # 
  # @method window_present(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_present, :gtk_window_present, [Window], :void
  
  # (Not documented)
  # 
  # @method window_present_with_time(window, timestamp)
  # @param [Window] window 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :window_present_with_time, :gtk_window_present_with_time, [Window, :uint], :void
  
  # (Not documented)
  # 
  # @method window_iconify(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_iconify, :gtk_window_iconify, [Window], :void
  
  # (Not documented)
  # 
  # @method window_deiconify(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_deiconify, :gtk_window_deiconify, [Window], :void
  
  # (Not documented)
  # 
  # @method window_stick(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_stick, :gtk_window_stick, [Window], :void
  
  # (Not documented)
  # 
  # @method window_unstick(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_unstick, :gtk_window_unstick, [Window], :void
  
  # (Not documented)
  # 
  # @method window_maximize(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_maximize, :gtk_window_maximize, [Window], :void
  
  # (Not documented)
  # 
  # @method window_unmaximize(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_unmaximize, :gtk_window_unmaximize, [Window], :void
  
  # (Not documented)
  # 
  # @method window_fullscreen(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_fullscreen, :gtk_window_fullscreen, [Window], :void
  
  # (Not documented)
  # 
  # @method window_unfullscreen(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_unfullscreen, :gtk_window_unfullscreen, [Window], :void
  
  # (Not documented)
  # 
  # @method window_set_keep_above(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_keep_above, :gtk_window_set_keep_above, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_set_keep_below(window, setting)
  # @param [Window] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :window_set_keep_below, :gtk_window_set_keep_below, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_begin_resize_drag(window, edge, button, root_x, root_y, timestamp)
  # @param [Window] window 
  # @param [unknown] edge 
  # @param [Integer] button 
  # @param [Integer] root_x 
  # @param [Integer] root_y 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :window_begin_resize_drag, :gtk_window_begin_resize_drag, [Window, :char, :int, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method window_begin_move_drag(window, button, root_x, root_y, timestamp)
  # @param [Window] window 
  # @param [Integer] button 
  # @param [Integer] root_x 
  # @param [Integer] root_y 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :window_begin_move_drag, :gtk_window_begin_move_drag, [Window, :int, :int, :int, :uint], :void
  
  # Set initial default size of the window (does not constrain user
  # resize operations)
  # 
  # @method window_set_default_size(window, width, height)
  # @param [Window] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default_size, :gtk_window_set_default_size, [Window, :int, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_default_size(window, width, height)
  # @param [Window] window 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :window_get_default_size, :gtk_window_get_default_size, [Window, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_resize(window, width, height)
  # @param [Window] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :window_resize, :gtk_window_resize, [Window, :int, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_size(window, width, height)
  # @param [Window] window 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :window_get_size, :gtk_window_get_size, [Window, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_move(window, x, y)
  # @param [Window] window 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :window_move, :gtk_window_move, [Window, :int, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_position(window, root_x, root_y)
  # @param [Window] window 
  # @param [FFI::Pointer(*Gint)] root_x 
  # @param [FFI::Pointer(*Gint)] root_y 
  # @return [nil] 
  # @scope class
  attach_function :window_get_position, :gtk_window_get_position, [Window, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method window_parse_geometry(window, geometry)
  # @param [Window] window 
  # @param [String] geometry 
  # @return [Integer] 
  # @scope class
  attach_function :window_parse_geometry, :gtk_window_parse_geometry, [Window, :string], :int
  
  # (Not documented)
  # 
  # @method window_set_default_geometry(window, width, height)
  # @param [Window] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :window_set_default_geometry, :gtk_window_set_default_geometry, [Window, :int, :int], :void
  
  # (Not documented)
  # 
  # @method window_resize_to_geometry(window, width, height)
  # @param [Window] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :window_resize_to_geometry, :gtk_window_resize_to_geometry, [Window, :int, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_group(window)
  # @param [Window] window 
  # @return [WindowGroup] 
  # @scope class
  attach_function :window_get_group, :gtk_window_get_group, [Window], WindowGroup
  
  # (Not documented)
  # 
  # @method window_has_group(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_has_group, :gtk_window_has_group, [Window], :int
  
  # Ignore this unless you are writing a GUI builder
  # 
  # @method window_reshow_with_initial_size(window)
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_reshow_with_initial_size, :gtk_window_reshow_with_initial_size, [Window], :void
  
  # (Not documented)
  # 
  # @method window_get_window_type(window)
  # @param [Window] window 
  # @return [Symbol from _enum_gtk_window_type_] 
  # @scope class
  attach_function :window_get_window_type, :gtk_window_get_window_type, [Window], :gtk_window_type
  
  # Window groups
  # 
  # @method window_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :window_group_get_type, :gtk_window_group_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method window_group_new()
  # @return [WindowGroup] 
  # @scope class
  attach_function :window_group_new, :gtk_window_group_new, [], WindowGroup
  
  # (Not documented)
  # 
  # @method window_group_add_window(window_group, window)
  # @param [WindowGroup] window_group 
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_group_add_window, :gtk_window_group_add_window, [WindowGroup, Window], :void
  
  # (Not documented)
  # 
  # @method window_group_remove_window(window_group, window)
  # @param [WindowGroup] window_group 
  # @param [Window] window 
  # @return [nil] 
  # @scope class
  attach_function :window_group_remove_window, :gtk_window_group_remove_window, [WindowGroup, Window], :void
  
  # (Not documented)
  # 
  # @method window_group_list_windows(window_group)
  # @param [WindowGroup] window_group 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :window_group_list_windows, :gtk_window_group_list_windows, [WindowGroup], :pointer
  
  # (Not documented)
  # 
  # @method window_group_get_current_grab(window_group)
  # @param [WindowGroup] window_group 
  # @return [Widget] 
  # @scope class
  attach_function :window_group_get_current_grab, :gtk_window_group_get_current_grab, [WindowGroup], Widget
  
  # (Not documented)
  # 
  # @method window_group_get_current_device_grab(window_group, device)
  # @param [WindowGroup] window_group 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [Widget] 
  # @scope class
  attach_function :window_group_get_current_device_grab, :gtk_window_group_get_current_device_grab, [WindowGroup, :pointer], Widget
  
  # (Not documented)
  # 
  # @method window_get_application(window)
  # @param [Window] window 
  # @return [FFI::Pointer(*GtkApplication)] 
  # @scope class
  attach_function :window_get_application, :gtk_window_get_application, [Window], :pointer
  
  # (Not documented)
  # 
  # @method window_set_application(window, application)
  # @param [Window] window 
  # @param [FFI::Pointer(*GtkApplication)] application 
  # @return [nil] 
  # @scope class
  attach_function :window_set_application, :gtk_window_set_application, [Window, :pointer], :void
  
  # Window grips
  # 
  # @method window_set_has_resize_grip(window, value)
  # @param [Window] window 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :window_set_has_resize_grip, :gtk_window_set_has_resize_grip, [Window, :int], :void
  
  # (Not documented)
  # 
  # @method window_get_has_resize_grip(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_has_resize_grip, :gtk_window_get_has_resize_grip, [Window], :int
  
  # (Not documented)
  # 
  # @method window_resize_grip_is_visible(window)
  # @param [Window] window 
  # @return [Integer] 
  # @scope class
  attach_function :window_resize_grip_is_visible, :gtk_window_resize_grip_is_visible, [Window], :int
  
  # (Not documented)
  # 
  # @method window_get_resize_grip_area(window, rect)
  # @param [Window] window 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [Integer] 
  # @scope class
  attach_function :window_get_resize_grip_area, :gtk_window_get_resize_grip_area, [Window, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_key_snoop_func_(grab_widget, event, func_data)
  # @param [Widget] grab_widget 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_key_snoop_func, [Widget, :pointer, :pointer], :int
  
  # GTK+ version
  # 
  # @method get_major_version()
  # @return [Integer] 
  # @scope class
  attach_function :get_major_version, :gtk_get_major_version, [], :uint
  
  # (Not documented)
  # 
  # @method get_minor_version()
  # @return [Integer] 
  # @scope class
  attach_function :get_minor_version, :gtk_get_minor_version, [], :uint
  
  # (Not documented)
  # 
  # @method get_micro_version()
  # @return [Integer] 
  # @scope class
  attach_function :get_micro_version, :gtk_get_micro_version, [], :uint
  
  # (Not documented)
  # 
  # @method get_binary_age()
  # @return [Integer] 
  # @scope class
  attach_function :get_binary_age, :gtk_get_binary_age, [], :uint
  
  # (Not documented)
  # 
  # @method get_interface_age()
  # @return [Integer] 
  # @scope class
  attach_function :get_interface_age, :gtk_get_interface_age, [], :uint
  
  # (Not documented)
  # 
  # @method check_version(required_major, required_minor, required_micro)
  # @param [Integer] required_major 
  # @param [Integer] required_minor 
  # @param [Integer] required_micro 
  # @return [String] 
  # @scope class
  attach_function :check_version, :gtk_check_version, [:uint, :uint, :uint], :string
  
  # Initialization, exit, mainloop and miscellaneous routines
  # 
  # @method parse_args(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [Integer] 
  # @scope class
  attach_function :parse_args, :gtk_parse_args, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method init(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [nil] 
  # @scope class
  attach_function :init, :gtk_init, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method init_check(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [Integer] 
  # @scope class
  attach_function :init_check, :gtk_init_check, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method init_with_args(argc, argv, parameter_string, entries, translation_domain, error)
  # @param [FFI::Pointer(*Gint)] argc 
  # @param [FFI::Pointer(***Gchar)] argv 
  # @param [String] parameter_string 
  # @param [FFI::Pointer(*GOptionEntry)] entries 
  # @param [String] translation_domain 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :init_with_args, :gtk_init_with_args, [:pointer, :pointer, :string, :pointer, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method get_option_group(open_default_display)
  # @param [Integer] open_default_display 
  # @return [FFI::Pointer(*GOptionGroup)] 
  # @scope class
  attach_function :get_option_group, :gtk_get_option_group, [:int], :pointer
  
  # Variants that are used to check for correct struct packing
  # when building GTK+-using code.
  # 
  # @method disable_setlocale()
  # @return [nil] 
  # @scope class
  attach_function :disable_setlocale, :gtk_disable_setlocale, [], :void
  
  # (Not documented)
  # 
  # @method get_default_language()
  # @return [FFI::Pointer(*PangoLanguage)] 
  # @scope class
  attach_function :get_default_language, :gtk_get_default_language, [], :pointer
  
  # (Not documented)
  # 
  # @method events_pending()
  # @return [Integer] 
  # @scope class
  attach_function :events_pending, :gtk_events_pending, [], :int
  
  # (Not documented)
  # 
  # @method main_do_event(event)
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :main_do_event, :gtk_main_do_event, [:pointer], :void
  
  # (Not documented)
  # 
  # @method main()
  # @return [nil] 
  # @scope class
  attach_function :main, :gtk_main, [], :void
  
  # (Not documented)
  # 
  # @method main_level()
  # @return [Integer] 
  # @scope class
  attach_function :main_level, :gtk_main_level, [], :uint
  
  # (Not documented)
  # 
  # @method main_quit()
  # @return [nil] 
  # @scope class
  attach_function :main_quit, :gtk_main_quit, [], :void
  
  # (Not documented)
  # 
  # @method main_iteration()
  # @return [Integer] 
  # @scope class
  attach_function :main_iteration, :gtk_main_iteration, [], :int
  
  # (Not documented)
  # 
  # @method main_iteration_do(blocking)
  # @param [Integer] blocking 
  # @return [Integer] 
  # @scope class
  attach_function :main_iteration_do, :gtk_main_iteration_do, [:int], :int
  
  # (Not documented)
  # 
  # @method _true()
  # @return [Integer] 
  # @scope class
  attach_function :_true, :gtk_true, [], :int
  
  # (Not documented)
  # 
  # @method _false()
  # @return [Integer] 
  # @scope class
  attach_function :_false, :gtk_false, [], :int
  
  # (Not documented)
  # 
  # @method grab_add(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :grab_add, :gtk_grab_add, [Widget], :void
  
  # (Not documented)
  # 
  # @method grab_get_current()
  # @return [Widget] 
  # @scope class
  attach_function :grab_get_current, :gtk_grab_get_current, [], Widget
  
  # (Not documented)
  # 
  # @method grab_remove(widget)
  # @param [Widget] widget 
  # @return [nil] 
  # @scope class
  attach_function :grab_remove, :gtk_grab_remove, [Widget], :void
  
  # (Not documented)
  # 
  # @method device_grab_add(widget, device, block_others)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [Integer] block_others 
  # @return [nil] 
  # @scope class
  attach_function :device_grab_add, :gtk_device_grab_add, [Widget, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method device_grab_remove(widget, device)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [nil] 
  # @scope class
  attach_function :device_grab_remove, :gtk_device_grab_remove, [Widget, :pointer], :void
  
  # (Not documented)
  # 
  # @method key_snooper_install(snooper, func_data)
  # @param [Proc(_callback_gtk_key_snoop_func_)] snooper 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @return [Integer] 
  # @scope class
  attach_function :key_snooper_install, :gtk_key_snooper_install, [:gtk_key_snoop_func, :pointer], :uint
  
  # (Not documented)
  # 
  # @method key_snooper_remove(snooper_handler_id)
  # @param [Integer] snooper_handler_id 
  # @return [nil] 
  # @scope class
  attach_function :key_snooper_remove, :gtk_key_snooper_remove, [:uint], :void
  
  # (Not documented)
  # 
  # @method get_current_event()
  # @return [FFI::Pointer(*GdkEvent)] 
  # @scope class
  attach_function :get_current_event, :gtk_get_current_event, [], :pointer
  
  # (Not documented)
  # 
  # @method get_current_event_time()
  # @return [Integer] 
  # @scope class
  attach_function :get_current_event_time, :gtk_get_current_event_time, [], :uint
  
  # (Not documented)
  # 
  # @method get_current_event_state(state)
  # @param [FFI::Pointer(*GdkModifierType)] state 
  # @return [Integer] 
  # @scope class
  attach_function :get_current_event_state, :gtk_get_current_event_state, [:pointer], :int
  
  # (Not documented)
  # 
  # @method get_current_event_device()
  # @return [FFI::Pointer(*GdkDevice)] 
  # @scope class
  attach_function :get_current_event_device, :gtk_get_current_event_device, [], :pointer
  
  # (Not documented)
  # 
  # @method get_event_widget(event)
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Widget] 
  # @scope class
  attach_function :get_event_widget, :gtk_get_event_widget, [:pointer], Widget
  
  # (Not documented)
  # 
  # @method propagate_event(widget, event)
  # @param [Widget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :propagate_event, :gtk_propagate_event, [Widget, :pointer], :void
  
  # (Not documented)
  class ScrolledWindowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (unknown) 
  # :priv ::
  #   (ScrolledWindowPrivate) 
  module ScrolledWindowWrappers
    def set_hadjustment(hadjustment)
      GTK.scrolled_window_set_hadjustment(self, hadjustment)
    end
    
    def set_vadjustment(vadjustment)
      GTK.scrolled_window_set_vadjustment(self, vadjustment)
    end
    
    def get_hadjustment()
      GTK.scrolled_window_get_hadjustment(self)
    end
    
    def get_vadjustment()
      GTK.scrolled_window_get_vadjustment(self)
    end
    
    def get_hscrollbar()
      Widget.new GTK.scrolled_window_get_hscrollbar(self)
    end
    
    def get_vscrollbar()
      Widget.new GTK.scrolled_window_get_vscrollbar(self)
    end
    
    def set_policy(hscrollbar_policy, vscrollbar_policy)
      GTK.scrolled_window_set_policy(self, hscrollbar_policy, vscrollbar_policy)
    end
    
    def get_policy(hscrollbar_policy, vscrollbar_policy)
      GTK.scrolled_window_get_policy(self, hscrollbar_policy, vscrollbar_policy)
    end
    
    def set_placement(window_placement)
      GTK.scrolled_window_set_placement(self, window_placement)
    end
    
    def unset_placement()
      GTK.scrolled_window_unset_placement(self)
    end
    
    def get_placement()
      GTK.scrolled_window_get_placement(self)
    end
    
    def set_shadow_type(type)
      GTK.scrolled_window_set_shadow_type(self, type)
    end
    
    def get_shadow_type()
      GTK.scrolled_window_get_shadow_type(self)
    end
    
    def add_with_viewport(child)
      GTK.scrolled_window_add_with_viewport(self, child)
    end
    
    def get_min_content_width()
      GTK.scrolled_window_get_min_content_width(self)
    end
    
    def set_min_content_width(width)
      GTK.scrolled_window_set_min_content_width(self, width)
    end
    
    def get_min_content_height()
      GTK.scrolled_window_get_min_content_height(self)
    end
    
    def set_min_content_height(height)
      GTK.scrolled_window_set_min_content_height(self, height)
    end
  end
  
  class ScrolledWindow < FFI::Struct
    include ScrolledWindowWrappers
    layout :container, :char,
           :priv, ScrolledWindowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :scrollbar_spacing ::
  #   (Integer) 
  # :scroll_child ::
  #   (FFI::Pointer(*)) Unfortunately, GtkScrollType is deficient in that there is
  #   no horizontal/vertical variants for GTK_SCROLL_START/END,
  #   so we have to add an additional boolean flag.
  # :move_focus_out ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class ScrolledWindowClass < FFI::Struct
    layout :parent_class, :char,
           :scrollbar_spacing, :int,
           :scroll_child, :pointer,
           :move_focus_out, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # Padding for future expansion
  # 
  # @method scrolled_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :scrolled_window_get_type, :gtk_scrolled_window_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method scrolled_window_new(hadjustment, vadjustment)
  # @param [FFI::Pointer(*GtkAdjustment)] hadjustment 
  # @param [FFI::Pointer(*GtkAdjustment)] vadjustment 
  # @return [Widget] 
  # @scope class
  attach_function :scrolled_window_new, :gtk_scrolled_window_new, [:pointer, :pointer], Widget
  
  # (Not documented)
  # 
  # @method scrolled_window_set_hadjustment(scrolled_window, hadjustment)
  # @param [ScrolledWindow] scrolled_window 
  # @param [FFI::Pointer(*GtkAdjustment)] hadjustment 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_hadjustment, :gtk_scrolled_window_set_hadjustment, [ScrolledWindow, :pointer], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_set_vadjustment(scrolled_window, vadjustment)
  # @param [ScrolledWindow] scrolled_window 
  # @param [FFI::Pointer(*GtkAdjustment)] vadjustment 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_vadjustment, :gtk_scrolled_window_set_vadjustment, [ScrolledWindow, :pointer], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_hadjustment(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :scrolled_window_get_hadjustment, :gtk_scrolled_window_get_hadjustment, [ScrolledWindow], :pointer
  
  # (Not documented)
  # 
  # @method scrolled_window_get_vadjustment(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :scrolled_window_get_vadjustment, :gtk_scrolled_window_get_vadjustment, [ScrolledWindow], :pointer
  
  # (Not documented)
  # 
  # @method scrolled_window_get_hscrollbar(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Widget] 
  # @scope class
  attach_function :scrolled_window_get_hscrollbar, :gtk_scrolled_window_get_hscrollbar, [ScrolledWindow], Widget
  
  # (Not documented)
  # 
  # @method scrolled_window_get_vscrollbar(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Widget] 
  # @scope class
  attach_function :scrolled_window_get_vscrollbar, :gtk_scrolled_window_get_vscrollbar, [ScrolledWindow], Widget
  
  # (Not documented)
  # 
  # @method scrolled_window_set_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_policy_type_] hscrollbar_policy 
  # @param [Symbol from _enum_gtk_policy_type_] vscrollbar_policy 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_policy, :gtk_scrolled_window_set_policy, [ScrolledWindow, :gtk_policy_type, :gtk_policy_type], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy)
  # @param [ScrolledWindow] scrolled_window 
  # @param [FFI::Pointer(*GtkPolicyType)] hscrollbar_policy 
  # @param [FFI::Pointer(*GtkPolicyType)] vscrollbar_policy 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_get_policy, :gtk_scrolled_window_get_policy, [ScrolledWindow, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_set_placement(scrolled_window, window_placement)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_corner_type_] window_placement 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_placement, :gtk_scrolled_window_set_placement, [ScrolledWindow, :gtk_corner_type], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_unset_placement(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_unset_placement, :gtk_scrolled_window_unset_placement, [ScrolledWindow], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_placement(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Symbol from _enum_gtk_corner_type_] 
  # @scope class
  attach_function :scrolled_window_get_placement, :gtk_scrolled_window_get_placement, [ScrolledWindow], :gtk_corner_type
  
  # (Not documented)
  # 
  # @method scrolled_window_set_shadow_type(scrolled_window, type)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_shadow_type_] type 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_shadow_type, :gtk_scrolled_window_set_shadow_type, [ScrolledWindow, :gtk_shadow_type], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_shadow_type(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Symbol from _enum_gtk_shadow_type_] 
  # @scope class
  attach_function :scrolled_window_get_shadow_type, :gtk_scrolled_window_get_shadow_type, [ScrolledWindow], :gtk_shadow_type
  
  # (Not documented)
  # 
  # @method scrolled_window_add_with_viewport(scrolled_window, child)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Widget] child 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_add_with_viewport, :gtk_scrolled_window_add_with_viewport, [ScrolledWindow, Widget], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_min_content_width(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :scrolled_window_get_min_content_width, :gtk_scrolled_window_get_min_content_width, [ScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method scrolled_window_set_min_content_width(scrolled_window, width)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_min_content_width, :gtk_scrolled_window_set_min_content_width, [ScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method scrolled_window_get_min_content_height(scrolled_window)
  # @param [ScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :scrolled_window_get_min_content_height, :gtk_scrolled_window_get_min_content_height, [ScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method scrolled_window_set_min_content_height(scrolled_window, height)
  # @param [ScrolledWindow] scrolled_window 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :scrolled_window_set_min_content_height, :gtk_scrolled_window_set_min_content_height, [ScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method ubuntu_gtk_scrolled_window_init()
  # @return [nil] 
  # @scope class
  attach_function :ubuntu_gtk_scrolled_window_init, :ubuntu_gtk_scrolled_window_init, [], :void
  
end
