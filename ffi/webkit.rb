# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module WebKit
  extend FFI::Library
  ffi_lib 'webkitgtk-3.0'
  
  # (Not documented)
  module SpellCheckerWrappers
    def check_spelling_of_string(string, misspelling_location, misspelling_length)
      WebKit.spell_checker_check_spelling_of_string(self, string, misspelling_location, misspelling_length)
    end
    
    def get_guesses_for_word(word, context)
      WebKit.spell_checker_get_guesses_for_word(self, word, context)
    end
    
    def update_spell_checking_languages(languages)
      WebKit.spell_checker_update_spell_checking_languages(self, languages)
    end
    
    def get_autocorrect_suggestions_for_misspelled_word(word)
      WebKit.spell_checker_get_autocorrect_suggestions_for_misspelled_word(self, word)
    end
    
    def learn_word(word)
      WebKit.spell_checker_learn_word(self, word)
    end
    
    def ignore_word(word)
      WebKit.spell_checker_ignore_word(self, word)
    end
  end
  
  class SpellChecker < FFI::Struct
    include SpellCheckerWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method major_version()
  # @return [Integer] 
  # @scope class
  attach_function :major_version, :webkit_major_version, [], :uint
  
  # (Not documented)
  # 
  # @method minor_version()
  # @return [Integer] 
  # @scope class
  attach_function :minor_version, :webkit_minor_version, [], :uint
  
  # (Not documented)
  # 
  # @method micro_version()
  # @return [Integer] 
  # @scope class
  attach_function :micro_version, :webkit_micro_version, [], :uint
  
  # (Not documented)
  # 
  # @method application_cache_get_maximum_size()
  # @return [Integer] 
  # @scope class
  attach_function :application_cache_get_maximum_size, :webkit_application_cache_get_maximum_size, [], :ulong_long
  
  # (Not documented)
  # 
  # @method application_cache_set_maximum_size(size)
  # @param [Integer] size 
  # @return [nil] 
  # @scope class
  attach_function :application_cache_set_maximum_size, :webkit_application_cache_set_maximum_size, [:ulong_long], :void
  
  # (Not documented)
  # 
  # @method application_cache_get_database_directory_path()
  # @return [String] 
  # @scope class
  attach_function :application_cache_get_database_directory_path, :webkit_application_cache_get_database_directory_path, [], :string
  
  # (Not documented)
  class DOMCustom < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class DOMCustomClass < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  module DOMEventTargetWrappers
    def dispatch_event(event, error)
      WebKit.dom_event_target_dispatch_event(self, event, error)
    end
    
    def add_event_listener(event_name, handler, bubble, user_data)
      WebKit.dom_event_target_add_event_listener(self, event_name, handler, bubble, user_data)
    end
    
    def remove_event_listener(event_name, handler, bubble)
      WebKit.dom_event_target_remove_event_listener(self, event_name, handler, bubble)
    end
  end
  
  class DOMEventTarget < FFI::Struct
    include DOMEventTargetWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  class DOMEventTargetClass < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class DOMObjectPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :core_object ::
  #   (FFI::Pointer(Gpointer)) 
  class DOMObject < FFI::Struct
    layout :parent_instance, :char,
           :core_object, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  class DOMObjectClass < FFI::Struct
    layout :parent_class, :char
  end
  
  # (Not documented)
  # 
  # @method dom_object_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_object_get_type, :webkit_dom_object_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNodeWrappers
    def insert_before(new_child, ref_child, error)
      DOMNode.new WebKit.dom_node_insert_before(self, new_child, ref_child, error)
    end
    
    def replace_child(new_child, old_child, error)
      DOMNode.new WebKit.dom_node_replace_child(self, new_child, old_child, error)
    end
    
    def remove_child(old_child, error)
      DOMNode.new WebKit.dom_node_remove_child(self, old_child, error)
    end
    
    def append_child(new_child, error)
      DOMNode.new WebKit.dom_node_append_child(self, new_child, error)
    end
    
    def has_child_nodes()
      WebKit.dom_node_has_child_nodes(self)
    end
    
    def clone_node(deep)
      DOMNode.new WebKit.dom_node_clone_node(self, deep)
    end
    
    def normalize()
      WebKit.dom_node_normalize(self)
    end
    
    def is_supported(feature, version)
      WebKit.dom_node_is_supported(self, feature, version)
    end
    
    def has_attributes()
      WebKit.dom_node_has_attributes(self)
    end
    
    def is_same_node(other)
      WebKit.dom_node_is_same_node(self, other)
    end
    
    def is_equal_node(other)
      WebKit.dom_node_is_equal_node(self, other)
    end
    
    def lookup_prefix(namespace_uri)
      WebKit.dom_node_lookup_prefix(self, namespace_uri)
    end
    
    def is_default_namespace(namespace_uri)
      WebKit.dom_node_is_default_namespace(self, namespace_uri)
    end
    
    def lookup_namespace_uri(prefix)
      WebKit.dom_node_lookup_namespace_uri(self, prefix)
    end
    
    def compare_document_position(other)
      WebKit.dom_node_compare_document_position(self, other)
    end
    
    def contains(other)
      WebKit.dom_node_contains(self, other)
    end
    
    def dispatch_event(event, error)
      WebKit.dom_node_dispatch_event(self, event, error)
    end
    
    def get_node_name()
      WebKit.dom_node_get_node_name(self)
    end
    
    def get_node_value()
      WebKit.dom_node_get_node_value(self)
    end
    
    def set_node_value(value, error)
      WebKit.dom_node_set_node_value(self, value, error)
    end
    
    def get_node_type()
      WebKit.dom_node_get_node_type(self)
    end
    
    def get_parent_node()
      DOMNode.new WebKit.dom_node_get_parent_node(self)
    end
    
    def get_child_nodes()
      DOMNodeList.new WebKit.dom_node_get_child_nodes(self)
    end
    
    def get_first_child()
      DOMNode.new WebKit.dom_node_get_first_child(self)
    end
    
    def get_last_child()
      DOMNode.new WebKit.dom_node_get_last_child(self)
    end
    
    def get_previous_sibling()
      DOMNode.new WebKit.dom_node_get_previous_sibling(self)
    end
    
    def get_next_sibling()
      DOMNode.new WebKit.dom_node_get_next_sibling(self)
    end
    
    def get_attributes()
      DOMNamedNodeMap.new WebKit.dom_node_get_attributes(self)
    end
    
    def get_owner_document()
      DOMDocument.new WebKit.dom_node_get_owner_document(self)
    end
    
    def get_namespace_uri()
      WebKit.dom_node_get_namespace_uri(self)
    end
    
    def get_prefix()
      WebKit.dom_node_get_prefix(self)
    end
    
    def set_prefix(value, error)
      WebKit.dom_node_set_prefix(self, value, error)
    end
    
    def get_local_name()
      WebKit.dom_node_get_local_name(self)
    end
    
    def get_base_uri()
      WebKit.dom_node_get_base_uri(self)
    end
    
    def get_text_content()
      WebKit.dom_node_get_text_content(self)
    end
    
    def set_text_content(value, error)
      WebKit.dom_node_set_text_content(self, value, error)
    end
    
    def get_parent_element()
      DOMElement.new WebKit.dom_node_get_parent_element(self)
    end
  end
  
  class DOMNode < FFI::Struct
    include DOMNodeWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNodeClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_node_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_get_type, :webkit_dom_node_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_node_insert_before(self, new_child, ref_child, error)
  # @param [DOMNode] self 
  # @param [DOMNode] new_child 
  # @param [DOMNode] ref_child 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_insert_before, :webkit_dom_node_insert_before, [DOMNode, DOMNode, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_replace_child(self, new_child, old_child, error)
  # @param [DOMNode] self 
  # @param [DOMNode] new_child 
  # @param [DOMNode] old_child 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_replace_child, :webkit_dom_node_replace_child, [DOMNode, DOMNode, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_remove_child(self, old_child, error)
  # @param [DOMNode] self 
  # @param [DOMNode] old_child 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_remove_child, :webkit_dom_node_remove_child, [DOMNode, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_append_child(self, new_child, error)
  # @param [DOMNode] self 
  # @param [DOMNode] new_child 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_append_child, :webkit_dom_node_append_child, [DOMNode, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_has_child_nodes(self)
  # @param [DOMNode] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_has_child_nodes, :webkit_dom_node_has_child_nodes, [DOMNode], :int
  
  # (Not documented)
  # 
  # @method dom_node_clone_node(self, deep)
  # @param [DOMNode] self 
  # @param [Integer] deep 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_clone_node, :webkit_dom_node_clone_node, [DOMNode, :int], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_normalize(self)
  # @param [DOMNode] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_node_normalize, :webkit_dom_node_normalize, [DOMNode], :void
  
  # (Not documented)
  # 
  # @method dom_node_is_supported(self, feature, version)
  # @param [DOMNode] self 
  # @param [String] feature 
  # @param [String] version 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_is_supported, :webkit_dom_node_is_supported, [DOMNode, :string, :string], :int
  
  # (Not documented)
  # 
  # @method dom_node_has_attributes(self)
  # @param [DOMNode] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_has_attributes, :webkit_dom_node_has_attributes, [DOMNode], :int
  
  # (Not documented)
  # 
  # @method dom_node_is_same_node(self, other)
  # @param [DOMNode] self 
  # @param [DOMNode] other 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_is_same_node, :webkit_dom_node_is_same_node, [DOMNode, DOMNode], :int
  
  # (Not documented)
  # 
  # @method dom_node_is_equal_node(self, other)
  # @param [DOMNode] self 
  # @param [DOMNode] other 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_is_equal_node, :webkit_dom_node_is_equal_node, [DOMNode, DOMNode], :int
  
  # (Not documented)
  # 
  # @method dom_node_lookup_prefix(self, namespace_uri)
  # @param [DOMNode] self 
  # @param [String] namespace_uri 
  # @return [String] 
  # @scope class
  attach_function :dom_node_lookup_prefix, :webkit_dom_node_lookup_prefix, [DOMNode, :string], :string
  
  # (Not documented)
  # 
  # @method dom_node_is_default_namespace(self, namespace_uri)
  # @param [DOMNode] self 
  # @param [String] namespace_uri 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_is_default_namespace, :webkit_dom_node_is_default_namespace, [DOMNode, :string], :int
  
  # (Not documented)
  # 
  # @method dom_node_lookup_namespace_uri(self, prefix)
  # @param [DOMNode] self 
  # @param [String] prefix 
  # @return [String] 
  # @scope class
  attach_function :dom_node_lookup_namespace_uri, :webkit_dom_node_lookup_namespace_uri, [DOMNode, :string], :string
  
  # (Not documented)
  # 
  # @method dom_node_compare_document_position(self, other)
  # @param [DOMNode] self 
  # @param [DOMNode] other 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_compare_document_position, :webkit_dom_node_compare_document_position, [DOMNode, DOMNode], :ushort
  
  # (Not documented)
  # 
  # @method dom_node_contains(self, other)
  # @param [DOMNode] self 
  # @param [DOMNode] other 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_contains, :webkit_dom_node_contains, [DOMNode, DOMNode], :int
  
  # (Not documented)
  # 
  # @method dom_node_dispatch_event(self, event, error)
  # @param [DOMNode] self 
  # @param [FFI::Pointer(*WebKitDOMEvent)] event 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_dispatch_event, :webkit_dom_node_dispatch_event, [DOMNode, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_node_get_node_name(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_node_name, :webkit_dom_node_get_node_name, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_get_node_value(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_node_value, :webkit_dom_node_get_node_value, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_set_node_value(self, value, error)
  # @param [DOMNode] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_node_set_node_value, :webkit_dom_node_set_node_value, [DOMNode, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_node_get_node_type(self)
  # @param [DOMNode] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_get_node_type, :webkit_dom_node_get_node_type, [DOMNode], :ushort
  
  # (Not documented)
  # 
  # @method dom_node_get_parent_node(self)
  # @param [DOMNode] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_get_parent_node, :webkit_dom_node_get_parent_node, [DOMNode], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_get_child_nodes(self)
  # @param [DOMNode] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_node_get_child_nodes, :webkit_dom_node_get_child_nodes, [DOMNode], :pointer
  
  # (Not documented)
  # 
  # @method dom_node_get_first_child(self)
  # @param [DOMNode] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_get_first_child, :webkit_dom_node_get_first_child, [DOMNode], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_get_last_child(self)
  # @param [DOMNode] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_get_last_child, :webkit_dom_node_get_last_child, [DOMNode], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_get_previous_sibling(self)
  # @param [DOMNode] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_get_previous_sibling, :webkit_dom_node_get_previous_sibling, [DOMNode], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_get_next_sibling(self)
  # @param [DOMNode] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_get_next_sibling, :webkit_dom_node_get_next_sibling, [DOMNode], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_get_attributes(self)
  # @param [DOMNode] self 
  # @return [FFI::Pointer(*WebKitDOMNamedNodeMap)] 
  # @scope class
  attach_function :dom_node_get_attributes, :webkit_dom_node_get_attributes, [DOMNode], :pointer
  
  # (Not documented)
  # 
  # @method dom_node_get_owner_document(self)
  # @param [DOMNode] self 
  # @return [FFI::Pointer(*WebKitDOMDocument)] 
  # @scope class
  attach_function :dom_node_get_owner_document, :webkit_dom_node_get_owner_document, [DOMNode], :pointer
  
  # (Not documented)
  # 
  # @method dom_node_get_namespace_uri(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_namespace_uri, :webkit_dom_node_get_namespace_uri, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_get_prefix(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_prefix, :webkit_dom_node_get_prefix, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_set_prefix(self, value, error)
  # @param [DOMNode] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_node_set_prefix, :webkit_dom_node_set_prefix, [DOMNode, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_node_get_local_name(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_local_name, :webkit_dom_node_get_local_name, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_get_base_uri(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_base_uri, :webkit_dom_node_get_base_uri, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_get_text_content(self)
  # @param [DOMNode] self 
  # @return [String] 
  # @scope class
  attach_function :dom_node_get_text_content, :webkit_dom_node_get_text_content, [DOMNode], :string
  
  # (Not documented)
  # 
  # @method dom_node_set_text_content(self, value, error)
  # @param [DOMNode] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_node_set_text_content, :webkit_dom_node_set_text_content, [DOMNode, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_node_get_parent_element(self)
  # @param [DOMNode] self 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_node_get_parent_element, :webkit_dom_node_get_parent_element, [DOMNode], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMAttrWrappers
    def get_name()
      WebKit.dom_attr_get_name(self)
    end
    
    def get_specified()
      WebKit.dom_attr_get_specified(self)
    end
    
    def get_value()
      WebKit.dom_attr_get_value(self)
    end
    
    def set_value(value, error)
      WebKit.dom_attr_set_value(self, value, error)
    end
    
    def get_owner_element()
      DOMElement.new WebKit.dom_attr_get_owner_element(self)
    end
    
    def get_is_id()
      WebKit.dom_attr_get_is_id(self)
    end
  end
  
  class DOMAttr < FFI::Struct
    include DOMAttrWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMAttrClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_attr_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_attr_get_type, :webkit_dom_attr_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_attr_get_name(self)
  # @param [DOMAttr] self 
  # @return [String] 
  # @scope class
  attach_function :dom_attr_get_name, :webkit_dom_attr_get_name, [DOMAttr], :string
  
  # (Not documented)
  # 
  # @method dom_attr_get_specified(self)
  # @param [DOMAttr] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_attr_get_specified, :webkit_dom_attr_get_specified, [DOMAttr], :int
  
  # (Not documented)
  # 
  # @method dom_attr_get_value(self)
  # @param [DOMAttr] self 
  # @return [String] 
  # @scope class
  attach_function :dom_attr_get_value, :webkit_dom_attr_get_value, [DOMAttr], :string
  
  # (Not documented)
  # 
  # @method dom_attr_set_value(self, value, error)
  # @param [DOMAttr] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_attr_set_value, :webkit_dom_attr_set_value, [DOMAttr, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_attr_get_owner_element(self)
  # @param [DOMAttr] self 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_attr_get_owner_element, :webkit_dom_attr_get_owner_element, [DOMAttr], :pointer
  
  # (Not documented)
  # 
  # @method dom_attr_get_is_id(self)
  # @param [DOMAttr] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_attr_get_is_id, :webkit_dom_attr_get_is_id, [DOMAttr], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMBarInfoWrappers
    def get_visible()
      WebKit.dom_bar_info_get_visible(self)
    end
  end
  
  class DOMBarInfo < FFI::Struct
    include DOMBarInfoWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMBarInfoClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_bar_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_bar_info_get_type, :webkit_dom_bar_info_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_bar_info_get_visible(self)
  # @param [DOMBarInfo] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_bar_info_get_visible, :webkit_dom_bar_info_get_visible, [DOMBarInfo], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMBlobWrappers
    def webkit_slice(start, _end, content_type)
      DOMBlob.new WebKit.dom_blob_webkit_slice(self, start, _end, content_type)
    end
    
    def get_size()
      WebKit.dom_blob_get_size(self)
    end
    
    def slice(start, _end, content_type)
      DOMBlob.new WebKit.dom_blob_slice(self, start, _end, content_type)
    end
  end
  
  class DOMBlob < FFI::Struct
    include DOMBlobWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMBlobClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_blob_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_blob_get_type, :webkit_dom_blob_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_blob_webkit_slice(self, start, end, content_type)
  # @param [DOMBlob] self 
  # @param [Integer] start 
  # @param [Integer] end 
  # @param [String] content_type 
  # @return [DOMBlob] 
  # @scope class
  attach_function :dom_blob_webkit_slice, :webkit_dom_blob_webkit_slice, [DOMBlob, :long, :long, :string], DOMBlob
  
  # (Not documented)
  # 
  # @method dom_blob_get_size(self)
  # @param [DOMBlob] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_blob_get_size, :webkit_dom_blob_get_size, [DOMBlob], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMCharacterDataWrappers
    def substring_data(offset, length, error)
      WebKit.dom_character_data_substring_data(self, offset, length, error)
    end
    
    def append_data(data, error)
      WebKit.dom_character_data_append_data(self, data, error)
    end
    
    def insert_data(offset, data, error)
      WebKit.dom_character_data_insert_data(self, offset, data, error)
    end
    
    def delete_data(offset, length, error)
      WebKit.dom_character_data_delete_data(self, offset, length, error)
    end
    
    def replace_data(offset, length, data, error)
      WebKit.dom_character_data_replace_data(self, offset, length, data, error)
    end
    
    def get_data()
      WebKit.dom_character_data_get_data(self)
    end
    
    def set_data(value, error)
      WebKit.dom_character_data_set_data(self, value, error)
    end
    
    def get_length()
      WebKit.dom_character_data_get_length(self)
    end
  end
  
  class DOMCharacterData < FFI::Struct
    include DOMCharacterDataWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMCharacterDataClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_character_data_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_character_data_get_type, :webkit_dom_character_data_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_character_data_substring_data(self, offset, length, error)
  # @param [DOMCharacterData] self 
  # @param [Integer] offset 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_character_data_substring_data, :webkit_dom_character_data_substring_data, [DOMCharacterData, :ulong, :ulong, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_character_data_append_data(self, data, error)
  # @param [DOMCharacterData] self 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_character_data_append_data, :webkit_dom_character_data_append_data, [DOMCharacterData, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_character_data_insert_data(self, offset, data, error)
  # @param [DOMCharacterData] self 
  # @param [Integer] offset 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_character_data_insert_data, :webkit_dom_character_data_insert_data, [DOMCharacterData, :ulong, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_character_data_delete_data(self, offset, length, error)
  # @param [DOMCharacterData] self 
  # @param [Integer] offset 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_character_data_delete_data, :webkit_dom_character_data_delete_data, [DOMCharacterData, :ulong, :ulong, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_character_data_replace_data(self, offset, length, data, error)
  # @param [DOMCharacterData] self 
  # @param [Integer] offset 
  # @param [Integer] length 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_character_data_replace_data, :webkit_dom_character_data_replace_data, [DOMCharacterData, :ulong, :ulong, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_character_data_get_data(self)
  # @param [DOMCharacterData] self 
  # @return [String] 
  # @scope class
  attach_function :dom_character_data_get_data, :webkit_dom_character_data_get_data, [DOMCharacterData], :string
  
  # (Not documented)
  # 
  # @method dom_character_data_set_data(self, value, error)
  # @param [DOMCharacterData] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_character_data_set_data, :webkit_dom_character_data_set_data, [DOMCharacterData, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_character_data_get_length(self)
  # @param [DOMCharacterData] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_character_data_get_length, :webkit_dom_character_data_get_length, [DOMCharacterData], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMCharacterData) 
  module DOMTextWrappers
    def split_text(offset, error)
      DOMText.new WebKit.dom_text_split_text(self, offset, error)
    end
    
    def replace_whole_text(content, error)
      DOMText.new WebKit.dom_text_replace_whole_text(self, content, error)
    end
    
    def get_whole_text()
      WebKit.dom_text_get_whole_text(self)
    end
  end
  
  class DOMText < FFI::Struct
    include DOMTextWrappers
    layout :parent_instance, DOMCharacterData.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMCharacterDataClass) 
  class DOMTextClass < FFI::Struct
    layout :parent_class, DOMCharacterDataClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_text_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_text_get_type, :webkit_dom_text_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_text_split_text(self, offset, error)
  # @param [DOMText] self 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMText] 
  # @scope class
  attach_function :dom_text_split_text, :webkit_dom_text_split_text, [DOMText, :ulong, :pointer], DOMText
  
  # (Not documented)
  # 
  # @method dom_text_replace_whole_text(self, content, error)
  # @param [DOMText] self 
  # @param [String] content 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMText] 
  # @scope class
  attach_function :dom_text_replace_whole_text, :webkit_dom_text_replace_whole_text, [DOMText, :string, :pointer], DOMText
  
  # (Not documented)
  # 
  # @method dom_text_get_whole_text(self)
  # @param [DOMText] self 
  # @return [String] 
  # @scope class
  attach_function :dom_text_get_whole_text, :webkit_dom_text_get_whole_text, [DOMText], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMText) 
  class DOMCDATASection < FFI::Struct
    layout :parent_instance, DOMText.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMTextClass) 
  class DOMCDATASectionClass < FFI::Struct
    layout :parent_class, DOMTextClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_cdata_section_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_cdata_section_get_type, :webkit_dom_cdata_section_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMCSSRule < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMCSSRuleClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_css_rule_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_rule_get_type, :webkit_dom_css_rule_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_rule_get_css_text(self)
  # @param [DOMCSSRule] self 
  # @return [String] 
  # @scope class
  attach_function :dom_css_rule_get_css_text, :webkit_dom_css_rule_get_css_text, [DOMCSSRule], :string
  
  # (Not documented)
  # 
  # @method dom_css_rule_set_css_text(self, value, error)
  # @param [DOMCSSRule] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_rule_set_css_text, :webkit_dom_css_rule_set_css_text, [DOMCSSRule, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_rule_get_parent_style_sheet(self)
  # @param [DOMCSSRule] self 
  # @return [FFI::Pointer(*WebKitDOMCSSStyleSheet)] 
  # @scope class
  attach_function :dom_css_rule_get_parent_style_sheet, :webkit_dom_css_rule_get_parent_style_sheet, [DOMCSSRule], :pointer
  
  # (Not documented)
  # 
  # @method dom_css_rule_get_parent_rule(self)
  # @param [DOMCSSRule] self 
  # @return [DOMCSSRule] 
  # @scope class
  attach_function :dom_css_rule_get_parent_rule, :webkit_dom_css_rule_get_parent_rule, [DOMCSSRule], DOMCSSRule
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMCSSRuleList < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMCSSRuleListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_css_rule_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_rule_list_get_type, :webkit_dom_css_rule_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_rule_list_item(self, index)
  # @param [DOMCSSRuleList] self 
  # @param [Integer] index 
  # @return [DOMCSSRule] 
  # @scope class
  attach_function :dom_css_rule_list_item, :webkit_dom_css_rule_list_item, [DOMCSSRuleList, :ulong], DOMCSSRule
  
  # (Not documented)
  # 
  # @method dom_css_rule_list_get_length(self)
  # @param [DOMCSSRuleList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_rule_list_get_length, :webkit_dom_css_rule_list_get_length, [DOMCSSRuleList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMCSSStyleDeclaration < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMCSSStyleDeclarationClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_declaration_get_type, :webkit_dom_css_style_declaration_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_property_value(self, property_name)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_get_property_value, :webkit_dom_css_style_declaration_get_property_value, [DOMCSSStyleDeclaration, :string], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_property_css_value(self, property_name)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @return [FFI::Pointer(*WebKitDOMCSSValue)] 
  # @scope class
  attach_function :dom_css_style_declaration_get_property_css_value, :webkit_dom_css_style_declaration_get_property_css_value, [DOMCSSStyleDeclaration, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_remove_property(self, property_name, error)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_remove_property, :webkit_dom_css_style_declaration_remove_property, [DOMCSSStyleDeclaration, :string, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_property_priority(self, property_name)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_get_property_priority, :webkit_dom_css_style_declaration_get_property_priority, [DOMCSSStyleDeclaration, :string], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_set_property(self, property_name, value, priority, error)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @param [String] value 
  # @param [String] priority 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_style_declaration_set_property, :webkit_dom_css_style_declaration_set_property, [DOMCSSStyleDeclaration, :string, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_item(self, index)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_item, :webkit_dom_css_style_declaration_item, [DOMCSSStyleDeclaration, :ulong], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_property_shorthand(self, property_name)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_get_property_shorthand, :webkit_dom_css_style_declaration_get_property_shorthand, [DOMCSSStyleDeclaration, :string], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_is_property_implicit(self, property_name)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] property_name 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_declaration_is_property_implicit, :webkit_dom_css_style_declaration_is_property_implicit, [DOMCSSStyleDeclaration, :string], :int
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_css_text(self)
  # @param [DOMCSSStyleDeclaration] self 
  # @return [String] 
  # @scope class
  attach_function :dom_css_style_declaration_get_css_text, :webkit_dom_css_style_declaration_get_css_text, [DOMCSSStyleDeclaration], :string
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_set_css_text(self, value, error)
  # @param [DOMCSSStyleDeclaration] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_style_declaration_set_css_text, :webkit_dom_css_style_declaration_set_css_text, [DOMCSSStyleDeclaration, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_length(self)
  # @param [DOMCSSStyleDeclaration] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_declaration_get_length, :webkit_dom_css_style_declaration_get_length, [DOMCSSStyleDeclaration], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_style_declaration_get_parent_rule(self)
  # @param [DOMCSSStyleDeclaration] self 
  # @return [DOMCSSRule] 
  # @scope class
  attach_function :dom_css_style_declaration_get_parent_rule, :webkit_dom_css_style_declaration_get_parent_rule, [DOMCSSStyleDeclaration], DOMCSSRule
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMStyleSheetWrappers
    def get_disabled()
      WebKit.dom_style_sheet_get_disabled(self)
    end
    
    def set_disabled(value)
      WebKit.dom_style_sheet_set_disabled(self, value)
    end
    
    def get_owner_node()
      DOMNode.new WebKit.dom_style_sheet_get_owner_node(self)
    end
    
    def get_parent_style_sheet()
      DOMStyleSheet.new WebKit.dom_style_sheet_get_parent_style_sheet(self)
    end
    
    def get_href()
      WebKit.dom_style_sheet_get_href(self)
    end
    
    def get_title()
      WebKit.dom_style_sheet_get_title(self)
    end
    
    def get_media()
      DOMMediaList.new WebKit.dom_style_sheet_get_media(self)
    end
  end
  
  class DOMStyleSheet < FFI::Struct
    include DOMStyleSheetWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMStyleSheetClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_sheet_get_type, :webkit_dom_style_sheet_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_disabled(self)
  # @param [DOMStyleSheet] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_sheet_get_disabled, :webkit_dom_style_sheet_get_disabled, [DOMStyleSheet], :int
  
  # (Not documented)
  # 
  # @method dom_style_sheet_set_disabled(self, value)
  # @param [DOMStyleSheet] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_style_sheet_set_disabled, :webkit_dom_style_sheet_set_disabled, [DOMStyleSheet, :int], :void
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_owner_node(self)
  # @param [DOMStyleSheet] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_style_sheet_get_owner_node, :webkit_dom_style_sheet_get_owner_node, [DOMStyleSheet], DOMNode
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_parent_style_sheet(self)
  # @param [DOMStyleSheet] self 
  # @return [DOMStyleSheet] 
  # @scope class
  attach_function :dom_style_sheet_get_parent_style_sheet, :webkit_dom_style_sheet_get_parent_style_sheet, [DOMStyleSheet], DOMStyleSheet
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_href(self)
  # @param [DOMStyleSheet] self 
  # @return [String] 
  # @scope class
  attach_function :dom_style_sheet_get_href, :webkit_dom_style_sheet_get_href, [DOMStyleSheet], :string
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_title(self)
  # @param [DOMStyleSheet] self 
  # @return [String] 
  # @scope class
  attach_function :dom_style_sheet_get_title, :webkit_dom_style_sheet_get_title, [DOMStyleSheet], :string
  
  # (Not documented)
  # 
  # @method dom_style_sheet_get_media(self)
  # @param [DOMStyleSheet] self 
  # @return [FFI::Pointer(*WebKitDOMMediaList)] 
  # @scope class
  attach_function :dom_style_sheet_get_media, :webkit_dom_style_sheet_get_media, [DOMStyleSheet], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMStyleSheet) 
  class DOMCSSStyleSheet < FFI::Struct
    layout :parent_instance, DOMStyleSheet.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMStyleSheetClass) 
  class DOMCSSStyleSheetClass < FFI::Struct
    layout :parent_class, DOMStyleSheetClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_sheet_get_type, :webkit_dom_css_style_sheet_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_insert_rule(self, rule, index, error)
  # @param [DOMCSSStyleSheet] self 
  # @param [String] rule 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_sheet_insert_rule, :webkit_dom_css_style_sheet_insert_rule, [DOMCSSStyleSheet, :string, :ulong, :pointer], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_delete_rule(self, index, error)
  # @param [DOMCSSStyleSheet] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_style_sheet_delete_rule, :webkit_dom_css_style_sheet_delete_rule, [DOMCSSStyleSheet, :ulong, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_add_rule(self, selector, style, index, error)
  # @param [DOMCSSStyleSheet] self 
  # @param [String] selector 
  # @param [String] style 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_style_sheet_add_rule, :webkit_dom_css_style_sheet_add_rule, [DOMCSSStyleSheet, :string, :string, :ulong, :pointer], :long
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_remove_rule(self, index, error)
  # @param [DOMCSSStyleSheet] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_style_sheet_remove_rule, :webkit_dom_css_style_sheet_remove_rule, [DOMCSSStyleSheet, :ulong, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_get_owner_rule(self)
  # @param [DOMCSSStyleSheet] self 
  # @return [DOMCSSRule] 
  # @scope class
  attach_function :dom_css_style_sheet_get_owner_rule, :webkit_dom_css_style_sheet_get_owner_rule, [DOMCSSStyleSheet], DOMCSSRule
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_get_css_rules(self)
  # @param [DOMCSSStyleSheet] self 
  # @return [DOMCSSRuleList] 
  # @scope class
  attach_function :dom_css_style_sheet_get_css_rules, :webkit_dom_css_style_sheet_get_css_rules, [DOMCSSStyleSheet], DOMCSSRuleList
  
  # (Not documented)
  # 
  # @method dom_css_style_sheet_get_rules(self)
  # @param [DOMCSSStyleSheet] self 
  # @return [DOMCSSRuleList] 
  # @scope class
  attach_function :dom_css_style_sheet_get_rules, :webkit_dom_css_style_sheet_get_rules, [DOMCSSStyleSheet], DOMCSSRuleList
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMCSSValue < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMCSSValueClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_css_value_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_value_get_type, :webkit_dom_css_value_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_css_value_get_css_text(self)
  # @param [DOMCSSValue] self 
  # @return [String] 
  # @scope class
  attach_function :dom_css_value_get_css_text, :webkit_dom_css_value_get_css_text, [DOMCSSValue], :string
  
  # (Not documented)
  # 
  # @method dom_css_value_set_css_text(self, value, error)
  # @param [DOMCSSValue] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_css_value_set_css_text, :webkit_dom_css_value_set_css_text, [DOMCSSValue, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_css_value_get_css_value_type(self)
  # @param [DOMCSSValue] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_css_value_get_css_value_type, :webkit_dom_css_value_get_css_value_type, [DOMCSSValue], :ushort
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMCharacterData) 
  class DOMComment < FFI::Struct
    layout :parent_instance, DOMCharacterData.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMCharacterDataClass) 
  class DOMCommentClass < FFI::Struct
    layout :parent_class, DOMCharacterDataClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_comment_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_comment_get_type, :webkit_dom_comment_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMConsoleWrappers
    def time(title)
      WebKit.dom_console_time(self, title)
    end
    
    def group_end()
      WebKit.dom_console_group_end(self)
    end
    
    def get_memory()
      DOMMemoryInfo.new WebKit.dom_console_get_memory(self)
    end
  end
  
  class DOMConsole < FFI::Struct
    include DOMConsoleWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMConsoleClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_console_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_console_get_type, :webkit_dom_console_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_console_time(self, title)
  # @param [DOMConsole] self 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :dom_console_time, :webkit_dom_console_time, [DOMConsole, :string], :void
  
  # (Not documented)
  # 
  # @method dom_console_group_end(self)
  # @param [DOMConsole] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_console_group_end, :webkit_dom_console_group_end, [DOMConsole], :void
  
  # (Not documented)
  # 
  # @method dom_console_get_memory(self)
  # @param [DOMConsole] self 
  # @return [FFI::Pointer(*WebKitDOMMemoryInfo)] 
  # @scope class
  attach_function :dom_console_get_memory, :webkit_dom_console_get_memory, [DOMConsole], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_is_edited(web_kit_domhtml_text_area_element)
  # @param [FFI::Pointer(*WebKitDOMHTMLTextAreaElement)] web_kit_domhtml_text_area_element 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_is_edited, :webkit_dom_html_text_area_element_is_edited, [:pointer], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_is_edited(web_kit_domhtml_input_element)
  # @param [FFI::Pointer(*WebKitDOMHTMLInputElement)] web_kit_domhtml_input_element 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_is_edited, :webkit_dom_html_input_element_is_edited, [:pointer], :int
  
  # (Not documented)
  # 
  # @method dom_blob_slice(self, start, end, content_type)
  # @param [DOMBlob] self 
  # @param [Integer] start 
  # @param [Integer] end 
  # @param [String] content_type 
  # @return [DOMBlob] 
  # @scope class
  attach_function :dom_blob_slice, :webkit_dom_blob_slice, [DOMBlob, :long, :long, :string], DOMBlob
  
  # (Not documented)
  # 
  # @method dom_html_form_element_dispatch_form_change(self)
  # @param [FFI::Pointer(*WebKitDOMHTMLFormElement)] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_dispatch_form_change, :webkit_dom_html_form_element_dispatch_form_change, [:pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_dispatch_form_input(self)
  # @param [FFI::Pointer(*WebKitDOMHTMLFormElement)] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_dispatch_form_input, :webkit_dom_html_form_element_dispatch_form_input, [:pointer], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMApplicationCache < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMApplicationCacheClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_application_cache_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_application_cache_get_type, :webkit_dom_dom_application_cache_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_application_cache_update(self, error)
  # @param [DOMDOMApplicationCache] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_application_cache_update, :webkit_dom_dom_application_cache_update, [DOMDOMApplicationCache, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_application_cache_swap_cache(self, error)
  # @param [DOMDOMApplicationCache] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_application_cache_swap_cache, :webkit_dom_dom_application_cache_swap_cache, [DOMDOMApplicationCache, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_application_cache_dispatch_event(self, evt, error)
  # @param [DOMDOMApplicationCache] self 
  # @param [FFI::Pointer(*WebKitDOMEvent)] evt 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_application_cache_dispatch_event, :webkit_dom_dom_application_cache_dispatch_event, [DOMDOMApplicationCache, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_dom_application_cache_get_status(self)
  # @param [DOMDOMApplicationCache] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_application_cache_get_status, :webkit_dom_dom_application_cache_get_status, [DOMDOMApplicationCache], :ushort
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMImplementation < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMImplementationClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_implementation_get_type, :webkit_dom_dom_implementation_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_has_feature(self, feature, version)
  # @param [DOMDOMImplementation] self 
  # @param [String] feature 
  # @param [String] version 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_implementation_has_feature, :webkit_dom_dom_implementation_has_feature, [DOMDOMImplementation, :string, :string], :int
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_create_document_type(self, qualified_name, public_id, system_id, error)
  # @param [DOMDOMImplementation] self 
  # @param [String] qualified_name 
  # @param [String] public_id 
  # @param [String] system_id 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMDocumentType)] 
  # @scope class
  attach_function :dom_dom_implementation_create_document_type, :webkit_dom_dom_implementation_create_document_type, [DOMDOMImplementation, :string, :string, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_create_document(self, namespace_uri, qualified_name, doctype, error)
  # @param [DOMDOMImplementation] self 
  # @param [String] namespace_uri 
  # @param [String] qualified_name 
  # @param [FFI::Pointer(*WebKitDOMDocumentType)] doctype 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMDocument)] 
  # @scope class
  attach_function :dom_dom_implementation_create_document, :webkit_dom_dom_implementation_create_document, [DOMDOMImplementation, :string, :string, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_create_css_style_sheet(self, title, media, error)
  # @param [DOMDOMImplementation] self 
  # @param [String] title 
  # @param [String] media 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMCSSStyleSheet] 
  # @scope class
  attach_function :dom_dom_implementation_create_css_style_sheet, :webkit_dom_dom_implementation_create_css_style_sheet, [DOMDOMImplementation, :string, :string, :pointer], DOMCSSStyleSheet
  
  # (Not documented)
  # 
  # @method dom_dom_implementation_create_html_document(self, title)
  # @param [DOMDOMImplementation] self 
  # @param [String] title 
  # @return [FFI::Pointer(*WebKitDOMHTMLDocument)] 
  # @scope class
  attach_function :dom_dom_implementation_create_html_document, :webkit_dom_dom_implementation_create_html_document, [DOMDOMImplementation, :string], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMMimeType < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMMimeTypeClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_mime_type_get_type, :webkit_dom_dom_mime_type_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_get_suffixes(self)
  # @param [DOMDOMMimeType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_mime_type_get_suffixes, :webkit_dom_dom_mime_type_get_suffixes, [DOMDOMMimeType], :string
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_get_description(self)
  # @param [DOMDOMMimeType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_mime_type_get_description, :webkit_dom_dom_mime_type_get_description, [DOMDOMMimeType], :string
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_get_enabled_plugin(self)
  # @param [DOMDOMMimeType] self 
  # @return [FFI::Pointer(*WebKitDOMDOMPlugin)] 
  # @scope class
  attach_function :dom_dom_mime_type_get_enabled_plugin, :webkit_dom_dom_mime_type_get_enabled_plugin, [DOMDOMMimeType], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMMimeTypeArray < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMMimeTypeArrayClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_mime_type_array_get_type, :webkit_dom_dom_mime_type_array_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_array_item(self, index)
  # @param [DOMDOMMimeTypeArray] self 
  # @param [Integer] index 
  # @return [DOMDOMMimeType] 
  # @scope class
  attach_function :dom_dom_mime_type_array_item, :webkit_dom_dom_mime_type_array_item, [DOMDOMMimeTypeArray, :ulong], DOMDOMMimeType
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_array_named_item(self, name)
  # @param [DOMDOMMimeTypeArray] self 
  # @param [String] name 
  # @return [DOMDOMMimeType] 
  # @scope class
  attach_function :dom_dom_mime_type_array_named_item, :webkit_dom_dom_mime_type_array_named_item, [DOMDOMMimeTypeArray, :string], DOMDOMMimeType
  
  # (Not documented)
  # 
  # @method dom_dom_mime_type_array_get_length(self)
  # @param [DOMDOMMimeTypeArray] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_mime_type_array_get_length, :webkit_dom_dom_mime_type_array_get_length, [DOMDOMMimeTypeArray], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMPlugin < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMPluginClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_plugin_get_type, :webkit_dom_dom_plugin_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_item(self, index)
  # @param [DOMDOMPlugin] self 
  # @param [Integer] index 
  # @return [DOMDOMMimeType] 
  # @scope class
  attach_function :dom_dom_plugin_item, :webkit_dom_dom_plugin_item, [DOMDOMPlugin, :ulong], DOMDOMMimeType
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_named_item(self, name)
  # @param [DOMDOMPlugin] self 
  # @param [String] name 
  # @return [DOMDOMMimeType] 
  # @scope class
  attach_function :dom_dom_plugin_named_item, :webkit_dom_dom_plugin_named_item, [DOMDOMPlugin, :string], DOMDOMMimeType
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_get_name(self)
  # @param [DOMDOMPlugin] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_plugin_get_name, :webkit_dom_dom_plugin_get_name, [DOMDOMPlugin], :string
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_get_filename(self)
  # @param [DOMDOMPlugin] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_plugin_get_filename, :webkit_dom_dom_plugin_get_filename, [DOMDOMPlugin], :string
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_get_description(self)
  # @param [DOMDOMPlugin] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_plugin_get_description, :webkit_dom_dom_plugin_get_description, [DOMDOMPlugin], :string
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_get_length(self)
  # @param [DOMDOMPlugin] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_plugin_get_length, :webkit_dom_dom_plugin_get_length, [DOMDOMPlugin], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMPluginArray < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMPluginArrayClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_plugin_array_get_type, :webkit_dom_dom_plugin_array_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_array_item(self, index)
  # @param [DOMDOMPluginArray] self 
  # @param [Integer] index 
  # @return [DOMDOMPlugin] 
  # @scope class
  attach_function :dom_dom_plugin_array_item, :webkit_dom_dom_plugin_array_item, [DOMDOMPluginArray, :ulong], DOMDOMPlugin
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_array_named_item(self, name)
  # @param [DOMDOMPluginArray] self 
  # @param [String] name 
  # @return [DOMDOMPlugin] 
  # @scope class
  attach_function :dom_dom_plugin_array_named_item, :webkit_dom_dom_plugin_array_named_item, [DOMDOMPluginArray, :string], DOMDOMPlugin
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_array_refresh(self, reload)
  # @param [DOMDOMPluginArray] self 
  # @param [Integer] reload 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_plugin_array_refresh, :webkit_dom_dom_plugin_array_refresh, [DOMDOMPluginArray, :int], :void
  
  # (Not documented)
  # 
  # @method dom_dom_plugin_array_get_length(self)
  # @param [DOMDOMPluginArray] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_plugin_array_get_length, :webkit_dom_dom_plugin_array_get_length, [DOMDOMPluginArray], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMSelection < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMSelectionClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_type, :webkit_dom_dom_selection_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_selection_collapse(self, node, index, error)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] node 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_collapse, :webkit_dom_dom_selection_collapse, [DOMDOMSelection, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_collapse_to_end(self, error)
  # @param [DOMDOMSelection] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_collapse_to_end, :webkit_dom_dom_selection_collapse_to_end, [DOMDOMSelection, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_collapse_to_start(self, error)
  # @param [DOMDOMSelection] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_collapse_to_start, :webkit_dom_dom_selection_collapse_to_start, [DOMDOMSelection, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_delete_from_document(self)
  # @param [DOMDOMSelection] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_delete_from_document, :webkit_dom_dom_selection_delete_from_document, [DOMDOMSelection], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_contains_node(self, node, allow_partial)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] node 
  # @param [Integer] allow_partial 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_contains_node, :webkit_dom_dom_selection_contains_node, [DOMDOMSelection, DOMNode, :int], :int
  
  # (Not documented)
  # 
  # @method dom_dom_selection_select_all_children(self, node, error)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_select_all_children, :webkit_dom_dom_selection_select_all_children, [DOMDOMSelection, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_extend(self, node, offset, error)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_extend, :webkit_dom_dom_selection_extend, [DOMDOMSelection, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_range_at(self, index, error)
  # @param [DOMDOMSelection] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMRange)] 
  # @scope class
  attach_function :dom_dom_selection_get_range_at, :webkit_dom_dom_selection_get_range_at, [DOMDOMSelection, :long, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_selection_remove_all_ranges(self)
  # @param [DOMDOMSelection] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_remove_all_ranges, :webkit_dom_dom_selection_remove_all_ranges, [DOMDOMSelection], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_add_range(self, range)
  # @param [DOMDOMSelection] self 
  # @param [FFI::Pointer(*WebKitDOMRange)] range 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_add_range, :webkit_dom_dom_selection_add_range, [DOMDOMSelection, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_modify(self, alter, direction, granularity)
  # @param [DOMDOMSelection] self 
  # @param [String] alter 
  # @param [String] direction 
  # @param [String] granularity 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_modify, :webkit_dom_dom_selection_modify, [DOMDOMSelection, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_set_base_and_extent(self, base_node, base_offset, extent_node, extent_offset, error)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] base_node 
  # @param [Integer] base_offset 
  # @param [DOMNode] extent_node 
  # @param [Integer] extent_offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_set_base_and_extent, :webkit_dom_dom_selection_set_base_and_extent, [DOMDOMSelection, DOMNode, :long, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_set_position(self, node, offset, error)
  # @param [DOMDOMSelection] self 
  # @param [DOMNode] node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_set_position, :webkit_dom_dom_selection_set_position, [DOMDOMSelection, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_empty(self)
  # @param [DOMDOMSelection] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_selection_empty, :webkit_dom_dom_selection_empty, [DOMDOMSelection], :void
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_anchor_node(self)
  # @param [DOMDOMSelection] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_dom_selection_get_anchor_node, :webkit_dom_dom_selection_get_anchor_node, [DOMDOMSelection], DOMNode
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_anchor_offset(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_anchor_offset, :webkit_dom_dom_selection_get_anchor_offset, [DOMDOMSelection], :long
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_focus_node(self)
  # @param [DOMDOMSelection] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_dom_selection_get_focus_node, :webkit_dom_dom_selection_get_focus_node, [DOMDOMSelection], DOMNode
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_focus_offset(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_focus_offset, :webkit_dom_dom_selection_get_focus_offset, [DOMDOMSelection], :long
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_is_collapsed(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_is_collapsed, :webkit_dom_dom_selection_get_is_collapsed, [DOMDOMSelection], :int
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_range_count(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_range_count, :webkit_dom_dom_selection_get_range_count, [DOMDOMSelection], :long
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_base_node(self)
  # @param [DOMDOMSelection] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_dom_selection_get_base_node, :webkit_dom_dom_selection_get_base_node, [DOMDOMSelection], DOMNode
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_base_offset(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_base_offset, :webkit_dom_dom_selection_get_base_offset, [DOMDOMSelection], :long
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_extent_node(self)
  # @param [DOMDOMSelection] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_dom_selection_get_extent_node, :webkit_dom_dom_selection_get_extent_node, [DOMDOMSelection], DOMNode
  
  # (Not documented)
  # 
  # @method dom_dom_selection_get_extent_offset(self)
  # @param [DOMDOMSelection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_selection_get_extent_offset, :webkit_dom_dom_selection_get_extent_offset, [DOMDOMSelection], :long
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMTokenList < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMTokenListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_token_list_get_type, :webkit_dom_dom_token_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_item(self, index)
  # @param [DOMDOMTokenList] self 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_token_list_item, :webkit_dom_dom_token_list_item, [DOMDOMTokenList, :ulong], :string
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_contains(self, token, error)
  # @param [DOMDOMTokenList] self 
  # @param [String] token 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_token_list_contains, :webkit_dom_dom_token_list_contains, [DOMDOMTokenList, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_add(self, token, error)
  # @param [DOMDOMTokenList] self 
  # @param [String] token 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_token_list_add, :webkit_dom_dom_token_list_add, [DOMDOMTokenList, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_remove(self, token, error)
  # @param [DOMDOMTokenList] self 
  # @param [String] token 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_token_list_remove, :webkit_dom_dom_token_list_remove, [DOMDOMTokenList, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_toggle(self, token, error)
  # @param [DOMDOMTokenList] self 
  # @param [String] token 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_token_list_toggle, :webkit_dom_dom_token_list_toggle, [DOMDOMTokenList, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_dom_token_list_get_length(self)
  # @param [DOMDOMTokenList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_token_list_get_length, :webkit_dom_dom_token_list_get_length, [DOMDOMTokenList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMDOMTokenList) 
  class DOMDOMSettableTokenList < FFI::Struct
    layout :parent_instance, DOMDOMTokenList.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMDOMTokenListClass) 
  class DOMDOMSettableTokenListClass < FFI::Struct
    layout :parent_class, DOMDOMTokenListClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_settable_token_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_settable_token_list_get_type, :webkit_dom_dom_settable_token_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_settable_token_list_get_value(self)
  # @param [DOMDOMSettableTokenList] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_settable_token_list_get_value, :webkit_dom_dom_settable_token_list_get_value, [DOMDOMSettableTokenList], :string
  
  # (Not documented)
  # 
  # @method dom_dom_settable_token_list_set_value(self, value)
  # @param [DOMDOMSettableTokenList] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_settable_token_list_set_value, :webkit_dom_dom_settable_token_list_set_value, [DOMDOMSettableTokenList, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMStringList < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMStringListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_string_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_string_list_get_type, :webkit_dom_dom_string_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_string_list_item(self, index)
  # @param [DOMDOMStringList] self 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_string_list_item, :webkit_dom_dom_string_list_item, [DOMDOMStringList, :ulong], :string
  
  # (Not documented)
  # 
  # @method dom_dom_string_list_contains(self, string)
  # @param [DOMDOMStringList] self 
  # @param [String] string 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_string_list_contains, :webkit_dom_dom_string_list_contains, [DOMDOMStringList, :string], :int
  
  # (Not documented)
  # 
  # @method dom_dom_string_list_get_length(self)
  # @param [DOMDOMStringList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_string_list_get_length, :webkit_dom_dom_string_list_get_length, [DOMDOMStringList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMStringMap < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMStringMapClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_string_map_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_string_map_get_type, :webkit_dom_dom_string_map_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMDOMWindow < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDOMWindowClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_type, :webkit_dom_dom_window_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_selection(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMSelection] 
  # @scope class
  attach_function :dom_dom_window_get_selection, :webkit_dom_dom_window_get_selection, [DOMDOMWindow], DOMDOMSelection
  
  # (Not documented)
  # 
  # @method dom_dom_window_focus(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_focus, :webkit_dom_dom_window_focus, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_blur(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_blur, :webkit_dom_dom_window_blur, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_close(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_close, :webkit_dom_dom_window_close, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_print(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_print, :webkit_dom_dom_window_print, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_stop(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_stop, :webkit_dom_dom_window_stop, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_alert(self, message)
  # @param [DOMDOMWindow] self 
  # @param [String] message 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_alert, :webkit_dom_dom_window_alert, [DOMDOMWindow, :string], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_confirm(self, message)
  # @param [DOMDOMWindow] self 
  # @param [String] message 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_confirm, :webkit_dom_dom_window_confirm, [DOMDOMWindow, :string], :int
  
  # (Not documented)
  # 
  # @method dom_dom_window_prompt(self, message, default_value)
  # @param [DOMDOMWindow] self 
  # @param [String] message 
  # @param [String] default_value 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_prompt, :webkit_dom_dom_window_prompt, [DOMDOMWindow, :string, :string], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_find(self, string, case_sensitive, backwards, wrap, whole_word, search_in_frames, show_dialog)
  # @param [DOMDOMWindow] self 
  # @param [String] string 
  # @param [Integer] case_sensitive 
  # @param [Integer] backwards 
  # @param [Integer] wrap 
  # @param [Integer] whole_word 
  # @param [Integer] search_in_frames 
  # @param [Integer] show_dialog 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_find, :webkit_dom_dom_window_find, [DOMDOMWindow, :string, :int, :int, :int, :int, :int, :int], :int
  
  # (Not documented)
  # 
  # @method dom_dom_window_scroll_by(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_scroll_by, :webkit_dom_dom_window_scroll_by, [DOMDOMWindow, :long, :long], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_scroll_to(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_scroll_to, :webkit_dom_dom_window_scroll_to, [DOMDOMWindow, :long, :long], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_scroll(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_scroll, :webkit_dom_dom_window_scroll, [DOMDOMWindow, :long, :long], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_move_by(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_move_by, :webkit_dom_dom_window_move_by, [DOMDOMWindow, :float, :float], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_move_to(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_move_to, :webkit_dom_dom_window_move_to, [DOMDOMWindow, :float, :float], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_resize_by(self, x, y)
  # @param [DOMDOMWindow] self 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_resize_by, :webkit_dom_dom_window_resize_by, [DOMDOMWindow, :float, :float], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_resize_to(self, width, height)
  # @param [DOMDOMWindow] self 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_resize_to, :webkit_dom_dom_window_resize_to, [DOMDOMWindow, :float, :float], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_match_media(self, query)
  # @param [DOMDOMWindow] self 
  # @param [String] query 
  # @return [FFI::Pointer(*WebKitDOMMediaQueryList)] 
  # @scope class
  attach_function :dom_dom_window_match_media, :webkit_dom_dom_window_match_media, [DOMDOMWindow, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_computed_style(self, element, pseudo_element)
  # @param [DOMDOMWindow] self 
  # @param [FFI::Pointer(*WebKitDOMElement)] element 
  # @param [String] pseudo_element 
  # @return [DOMCSSStyleDeclaration] 
  # @scope class
  attach_function :dom_dom_window_get_computed_style, :webkit_dom_dom_window_get_computed_style, [DOMDOMWindow, :pointer, :string], DOMCSSStyleDeclaration
  
  # (Not documented)
  # 
  # @method dom_dom_window_webkit_convert_point_from_page_to_node(self, node, p)
  # @param [DOMDOMWindow] self 
  # @param [DOMNode] node 
  # @param [FFI::Pointer(*WebKitDOMWebKitPoint)] p 
  # @return [FFI::Pointer(*WebKitDOMWebKitPoint)] 
  # @scope class
  attach_function :dom_dom_window_webkit_convert_point_from_page_to_node, :webkit_dom_dom_window_webkit_convert_point_from_page_to_node, [DOMDOMWindow, DOMNode, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_webkit_convert_point_from_node_to_page(self, node, p)
  # @param [DOMDOMWindow] self 
  # @param [DOMNode] node 
  # @param [FFI::Pointer(*WebKitDOMWebKitPoint)] p 
  # @return [FFI::Pointer(*WebKitDOMWebKitPoint)] 
  # @scope class
  attach_function :dom_dom_window_webkit_convert_point_from_node_to_page, :webkit_dom_dom_window_webkit_convert_point_from_node_to_page, [DOMDOMWindow, DOMNode, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_clear_timeout(self, handle)
  # @param [DOMDOMWindow] self 
  # @param [Integer] handle 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_clear_timeout, :webkit_dom_dom_window_clear_timeout, [DOMDOMWindow, :long], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_clear_interval(self, handle)
  # @param [DOMDOMWindow] self 
  # @param [Integer] handle 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_clear_interval, :webkit_dom_dom_window_clear_interval, [DOMDOMWindow, :long], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_atob(self, string, error)
  # @param [DOMDOMWindow] self 
  # @param [String] string 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_atob, :webkit_dom_dom_window_atob, [DOMDOMWindow, :string, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_btoa(self, string, error)
  # @param [DOMDOMWindow] self 
  # @param [String] string 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_btoa, :webkit_dom_dom_window_btoa, [DOMDOMWindow, :string, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_dispatch_event(self, evt, error)
  # @param [DOMDOMWindow] self 
  # @param [FFI::Pointer(*WebKitDOMEvent)] evt 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_dispatch_event, :webkit_dom_dom_window_dispatch_event, [DOMDOMWindow, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_dom_window_capture_events(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_capture_events, :webkit_dom_dom_window_capture_events, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_release_events(self)
  # @param [DOMDOMWindow] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_release_events, :webkit_dom_dom_window_release_events, [DOMDOMWindow], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_screen(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMScreen)] 
  # @scope class
  attach_function :dom_dom_window_get_screen, :webkit_dom_dom_window_get_screen, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_history(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMHistory)] 
  # @scope class
  attach_function :dom_dom_window_get_history, :webkit_dom_dom_window_get_history, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_locationbar(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_locationbar, :webkit_dom_dom_window_get_locationbar, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_menubar(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_menubar, :webkit_dom_dom_window_get_menubar, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_personalbar(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_personalbar, :webkit_dom_dom_window_get_personalbar, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_scrollbars(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_scrollbars, :webkit_dom_dom_window_get_scrollbars, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_statusbar(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_statusbar, :webkit_dom_dom_window_get_statusbar, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_toolbar(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMBarInfo] 
  # @scope class
  attach_function :dom_dom_window_get_toolbar, :webkit_dom_dom_window_get_toolbar, [DOMDOMWindow], DOMBarInfo
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_navigator(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMNavigator)] 
  # @scope class
  attach_function :dom_dom_window_get_navigator, :webkit_dom_dom_window_get_navigator, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_client_information(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMNavigator)] 
  # @scope class
  attach_function :dom_dom_window_get_client_information, :webkit_dom_dom_window_get_client_information, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_frame_element(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_dom_window_get_frame_element, :webkit_dom_dom_window_get_frame_element, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_offscreen_buffering(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_offscreen_buffering, :webkit_dom_dom_window_get_offscreen_buffering, [DOMDOMWindow], :int
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_outer_height(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_outer_height, :webkit_dom_dom_window_get_outer_height, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_outer_width(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_outer_width, :webkit_dom_dom_window_get_outer_width, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_inner_height(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_inner_height, :webkit_dom_dom_window_get_inner_height, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_inner_width(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_inner_width, :webkit_dom_dom_window_get_inner_width, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_screen_x(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_screen_x, :webkit_dom_dom_window_get_screen_x, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_screen_y(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_screen_y, :webkit_dom_dom_window_get_screen_y, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_screen_left(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_screen_left, :webkit_dom_dom_window_get_screen_left, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_screen_top(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_screen_top, :webkit_dom_dom_window_get_screen_top, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_scroll_x(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_scroll_x, :webkit_dom_dom_window_get_scroll_x, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_scroll_y(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_scroll_y, :webkit_dom_dom_window_get_scroll_y, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_page_x_offset(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_page_x_offset, :webkit_dom_dom_window_get_page_x_offset, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_page_y_offset(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_page_y_offset, :webkit_dom_dom_window_get_page_y_offset, [DOMDOMWindow], :long
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_closed(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_closed, :webkit_dom_dom_window_get_closed, [DOMDOMWindow], :int
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_length(self)
  # @param [DOMDOMWindow] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_dom_window_get_length, :webkit_dom_dom_window_get_length, [DOMDOMWindow], :ulong
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_name(self)
  # @param [DOMDOMWindow] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_get_name, :webkit_dom_dom_window_get_name, [DOMDOMWindow], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_set_name(self, value)
  # @param [DOMDOMWindow] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_set_name, :webkit_dom_dom_window_set_name, [DOMDOMWindow, :string], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_status(self)
  # @param [DOMDOMWindow] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_get_status, :webkit_dom_dom_window_get_status, [DOMDOMWindow], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_set_status(self, value)
  # @param [DOMDOMWindow] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_set_status, :webkit_dom_dom_window_set_status, [DOMDOMWindow, :string], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_default_status(self)
  # @param [DOMDOMWindow] self 
  # @return [String] 
  # @scope class
  attach_function :dom_dom_window_get_default_status, :webkit_dom_dom_window_get_default_status, [DOMDOMWindow], :string
  
  # (Not documented)
  # 
  # @method dom_dom_window_set_default_status(self, value)
  # @param [DOMDOMWindow] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_dom_window_set_default_status, :webkit_dom_dom_window_set_default_status, [DOMDOMWindow, :string], :void
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_self(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_self, :webkit_dom_dom_window_get_self, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_window(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_window, :webkit_dom_dom_window_get_window, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_frames(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_frames, :webkit_dom_dom_window_get_frames, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_opener(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_opener, :webkit_dom_dom_window_get_opener, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_parent(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_parent, :webkit_dom_dom_window_get_parent, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_top(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_dom_window_get_top, :webkit_dom_dom_window_get_top, [DOMDOMWindow], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_document(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMDocument)] 
  # @scope class
  attach_function :dom_dom_window_get_document, :webkit_dom_dom_window_get_document, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_style_media(self)
  # @param [DOMDOMWindow] self 
  # @return [FFI::Pointer(*WebKitDOMStyleMedia)] 
  # @scope class
  attach_function :dom_dom_window_get_style_media, :webkit_dom_dom_window_get_style_media, [DOMDOMWindow], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_device_pixel_ratio(self)
  # @param [DOMDOMWindow] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_dom_window_get_device_pixel_ratio, :webkit_dom_dom_window_get_device_pixel_ratio, [DOMDOMWindow], :double
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_application_cache(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMDOMApplicationCache] 
  # @scope class
  attach_function :dom_dom_window_get_application_cache, :webkit_dom_dom_window_get_application_cache, [DOMDOMWindow], DOMDOMApplicationCache
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_session_storage(self, error)
  # @param [DOMDOMWindow] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMStorage)] 
  # @scope class
  attach_function :dom_dom_window_get_session_storage, :webkit_dom_dom_window_get_session_storage, [DOMDOMWindow, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_local_storage(self, error)
  # @param [DOMDOMWindow] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMStorage)] 
  # @scope class
  attach_function :dom_dom_window_get_local_storage, :webkit_dom_dom_window_get_local_storage, [DOMDOMWindow, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_dom_window_get_console(self)
  # @param [DOMDOMWindow] self 
  # @return [DOMConsole] 
  # @scope class
  attach_function :dom_dom_window_get_console, :webkit_dom_dom_window_get_console, [DOMDOMWindow], DOMConsole
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMDatabaseWrappers
    def get_version()
      WebKit.dom_database_get_version(self)
    end
  end
  
  class DOMDatabase < FFI::Struct
    include DOMDatabaseWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMDatabaseClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_database_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_database_get_type, :webkit_dom_database_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_database_get_version(self)
  # @param [DOMDatabase] self 
  # @return [String] 
  # @scope class
  attach_function :dom_database_get_version, :webkit_dom_database_get_version, [DOMDatabase], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMDocumentWrappers
    def create_element(tag_name, error)
      DOMElement.new WebKit.dom_document_create_element(self, tag_name, error)
    end
    
    def create_document_fragment()
      DOMDocumentFragment.new WebKit.dom_document_create_document_fragment(self)
    end
    
    def create_text_node(data)
      DOMText.new WebKit.dom_document_create_text_node(self, data)
    end
    
    def create_comment(data)
      DOMComment.new WebKit.dom_document_create_comment(self, data)
    end
    
    def create_cdata_section(data, error)
      DOMCDATASection.new WebKit.dom_document_create_cdata_section(self, data, error)
    end
    
    def create_processing_instruction(target, data, error)
      DOMProcessingInstruction.new WebKit.dom_document_create_processing_instruction(self, target, data, error)
    end
    
    def create_attribute(name, error)
      DOMAttr.new WebKit.dom_document_create_attribute(self, name, error)
    end
    
    def create_entity_reference(name, error)
      DOMEntityReference.new WebKit.dom_document_create_entity_reference(self, name, error)
    end
    
    def get_elements_by_tag_name(tagname)
      DOMNodeList.new WebKit.dom_document_get_elements_by_tag_name(self, tagname)
    end
    
    def import_node(imported_node, deep, error)
      DOMNode.new WebKit.dom_document_import_node(self, imported_node, deep, error)
    end
    
    def create_element_ns(namespace_uri, qualified_name, error)
      DOMElement.new WebKit.dom_document_create_element_ns(self, namespace_uri, qualified_name, error)
    end
    
    def create_attribute_ns(namespace_uri, qualified_name, error)
      DOMAttr.new WebKit.dom_document_create_attribute_ns(self, namespace_uri, qualified_name, error)
    end
    
    def get_elements_by_tag_name_ns(namespace_uri, local_name)
      DOMNodeList.new WebKit.dom_document_get_elements_by_tag_name_ns(self, namespace_uri, local_name)
    end
    
    def get_element_by_id(element_id)
      DOMElement.new WebKit.dom_document_get_element_by_id(self, element_id)
    end
    
    def adopt_node(source, error)
      DOMNode.new WebKit.dom_document_adopt_node(self, source, error)
    end
    
    def create_event(event_type, error)
      DOMEvent.new WebKit.dom_document_create_event(self, event_type, error)
    end
    
    def create_range()
      DOMRange.new WebKit.dom_document_create_range(self)
    end
    
    def create_node_iterator(root, what_to_show, filter, expand_entity_references, error)
      DOMNodeIterator.new WebKit.dom_document_create_node_iterator(self, root, what_to_show, filter, expand_entity_references, error)
    end
    
    def create_tree_walker(root, what_to_show, filter, expand_entity_references, error)
      DOMTreeWalker.new WebKit.dom_document_create_tree_walker(self, root, what_to_show, filter, expand_entity_references, error)
    end
    
    def get_override_style(element, pseudo_element)
      DOMCSSStyleDeclaration.new WebKit.dom_document_get_override_style(self, element, pseudo_element)
    end
    
    def create_expression(expression, resolver, error)
      DOMXPathExpression.new WebKit.dom_document_create_expression(self, expression, resolver, error)
    end
    
    def create_ns_resolver(node_resolver)
      DOMXPathNSResolver.new WebKit.dom_document_create_ns_resolver(self, node_resolver)
    end
    
    def evaluate(expression, context_node, resolver, type, in_result, error)
      DOMXPathResult.new WebKit.dom_document_evaluate(self, expression, context_node, resolver, type, in_result, error)
    end
    
    def exec_command(command, user_interface, value)
      WebKit.dom_document_exec_command(self, command, user_interface, value)
    end
    
    def query_command_enabled(command)
      WebKit.dom_document_query_command_enabled(self, command)
    end
    
    def query_command_indeterm(command)
      WebKit.dom_document_query_command_indeterm(self, command)
    end
    
    def query_command_state(command)
      WebKit.dom_document_query_command_state(self, command)
    end
    
    def query_command_supported(command)
      WebKit.dom_document_query_command_supported(self, command)
    end
    
    def query_command_value(command)
      WebKit.dom_document_query_command_value(self, command)
    end
    
    def get_elements_by_name(element_name)
      DOMNodeList.new WebKit.dom_document_get_elements_by_name(self, element_name)
    end
    
    def element_from_point(x, y)
      DOMElement.new WebKit.dom_document_element_from_point(self, x, y)
    end
    
    def caret_range_from_point(x, y)
      DOMRange.new WebKit.dom_document_caret_range_from_point(self, x, y)
    end
    
    def create_css_style_declaration()
      DOMCSSStyleDeclaration.new WebKit.dom_document_create_css_style_declaration(self)
    end
    
    def get_elements_by_class_name(tagname)
      DOMNodeList.new WebKit.dom_document_get_elements_by_class_name(self, tagname)
    end
    
    def query_selector(selectors, error)
      DOMElement.new WebKit.dom_document_query_selector(self, selectors, error)
    end
    
    def query_selector_all(selectors, error)
      DOMNodeList.new WebKit.dom_document_query_selector_all(self, selectors, error)
    end
    
    def webkit_cancel_full_screen()
      WebKit.dom_document_webkit_cancel_full_screen(self)
    end
    
    def get_doctype()
      DOMDocumentType.new WebKit.dom_document_get_doctype(self)
    end
    
    def get_implementation()
      DOMDOMImplementation.new WebKit.dom_document_get_implementation(self)
    end
    
    def get_document_element()
      DOMElement.new WebKit.dom_document_get_document_element(self)
    end
    
    def get_input_encoding()
      WebKit.dom_document_get_input_encoding(self)
    end
    
    def get_xml_encoding()
      WebKit.dom_document_get_xml_encoding(self)
    end
    
    def get_xml_version()
      WebKit.dom_document_get_xml_version(self)
    end
    
    def set_xml_version(value, error)
      WebKit.dom_document_set_xml_version(self, value, error)
    end
    
    def get_xml_standalone()
      WebKit.dom_document_get_xml_standalone(self)
    end
    
    def set_xml_standalone(value, error)
      WebKit.dom_document_set_xml_standalone(self, value, error)
    end
    
    def get_document_uri()
      WebKit.dom_document_get_document_uri(self)
    end
    
    def set_document_uri(value)
      WebKit.dom_document_set_document_uri(self, value)
    end
    
    def get_default_view()
      DOMDOMWindow.new WebKit.dom_document_get_default_view(self)
    end
    
    def get_style_sheets()
      DOMStyleSheetList.new WebKit.dom_document_get_style_sheets(self)
    end
    
    def get_title()
      WebKit.dom_document_get_title(self)
    end
    
    def set_title(value)
      WebKit.dom_document_set_title(self, value)
    end
    
    def get_referrer()
      WebKit.dom_document_get_referrer(self)
    end
    
    def get_domain()
      WebKit.dom_document_get_domain(self)
    end
    
    def get_cookie(error)
      WebKit.dom_document_get_cookie(self, error)
    end
    
    def set_cookie(value, error)
      WebKit.dom_document_set_cookie(self, value, error)
    end
    
    def get_body()
      DOMHTMLElement.new WebKit.dom_document_get_body(self)
    end
    
    def set_body(value, error)
      WebKit.dom_document_set_body(self, value, error)
    end
    
    def get_head()
      DOMHTMLHeadElement.new WebKit.dom_document_get_head(self)
    end
    
    def get_images()
      DOMHTMLCollection.new WebKit.dom_document_get_images(self)
    end
    
    def get_applets()
      DOMHTMLCollection.new WebKit.dom_document_get_applets(self)
    end
    
    def get_links()
      DOMHTMLCollection.new WebKit.dom_document_get_links(self)
    end
    
    def get_forms()
      DOMHTMLCollection.new WebKit.dom_document_get_forms(self)
    end
    
    def get_anchors()
      DOMHTMLCollection.new WebKit.dom_document_get_anchors(self)
    end
    
    def get_last_modified()
      WebKit.dom_document_get_last_modified(self)
    end
    
    def get_charset()
      WebKit.dom_document_get_charset(self)
    end
    
    def set_charset(value)
      WebKit.dom_document_set_charset(self, value)
    end
    
    def get_default_charset()
      WebKit.dom_document_get_default_charset(self)
    end
    
    def get_ready_state()
      WebKit.dom_document_get_ready_state(self)
    end
    
    def get_character_set()
      WebKit.dom_document_get_character_set(self)
    end
    
    def get_preferred_stylesheet_set()
      WebKit.dom_document_get_preferred_stylesheet_set(self)
    end
    
    def get_selected_stylesheet_set()
      WebKit.dom_document_get_selected_stylesheet_set(self)
    end
    
    def set_selected_stylesheet_set(value)
      WebKit.dom_document_set_selected_stylesheet_set(self, value)
    end
    
    def get_compat_mode()
      WebKit.dom_document_get_compat_mode(self)
    end
    
    def get_webkit_is_full_screen()
      WebKit.dom_document_get_webkit_is_full_screen(self)
    end
    
    def get_webkit_full_screen_keyboard_input_allowed()
      WebKit.dom_document_get_webkit_full_screen_keyboard_input_allowed(self)
    end
    
    def get_webkit_current_full_screen_element()
      DOMElement.new WebKit.dom_document_get_webkit_current_full_screen_element(self)
    end
    
    def get_webkit_visibility_state()
      WebKit.dom_document_get_webkit_visibility_state(self)
    end
    
    def get_webkit_hidden()
      WebKit.dom_document_get_webkit_hidden(self)
    end
  end
  
  class DOMDocument < FFI::Struct
    include DOMDocumentWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMDocumentClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_document_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_get_type, :webkit_dom_document_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_document_create_element(self, tag_name, error)
  # @param [DOMDocument] self 
  # @param [String] tag_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_create_element, :webkit_dom_document_create_element, [DOMDocument, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_document_fragment(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMDocumentFragment)] 
  # @scope class
  attach_function :dom_document_create_document_fragment, :webkit_dom_document_create_document_fragment, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_text_node(self, data)
  # @param [DOMDocument] self 
  # @param [String] data 
  # @return [DOMText] 
  # @scope class
  attach_function :dom_document_create_text_node, :webkit_dom_document_create_text_node, [DOMDocument, :string], DOMText
  
  # (Not documented)
  # 
  # @method dom_document_create_comment(self, data)
  # @param [DOMDocument] self 
  # @param [String] data 
  # @return [DOMComment] 
  # @scope class
  attach_function :dom_document_create_comment, :webkit_dom_document_create_comment, [DOMDocument, :string], DOMComment
  
  # (Not documented)
  # 
  # @method dom_document_create_cdata_section(self, data, error)
  # @param [DOMDocument] self 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMCDATASection] 
  # @scope class
  attach_function :dom_document_create_cdata_section, :webkit_dom_document_create_cdata_section, [DOMDocument, :string, :pointer], DOMCDATASection
  
  # (Not documented)
  # 
  # @method dom_document_create_processing_instruction(self, target, data, error)
  # @param [DOMDocument] self 
  # @param [String] target 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMProcessingInstruction)] 
  # @scope class
  attach_function :dom_document_create_processing_instruction, :webkit_dom_document_create_processing_instruction, [DOMDocument, :string, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_attribute(self, name, error)
  # @param [DOMDocument] self 
  # @param [String] name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_document_create_attribute, :webkit_dom_document_create_attribute, [DOMDocument, :string, :pointer], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_document_create_entity_reference(self, name, error)
  # @param [DOMDocument] self 
  # @param [String] name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMEntityReference)] 
  # @scope class
  attach_function :dom_document_create_entity_reference, :webkit_dom_document_create_entity_reference, [DOMDocument, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_elements_by_tag_name(self, tagname)
  # @param [DOMDocument] self 
  # @param [String] tagname 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_get_elements_by_tag_name, :webkit_dom_document_get_elements_by_tag_name, [DOMDocument, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_import_node(self, imported_node, deep, error)
  # @param [DOMDocument] self 
  # @param [DOMNode] imported_node 
  # @param [Integer] deep 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_document_import_node, :webkit_dom_document_import_node, [DOMDocument, DOMNode, :int, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_document_create_element_ns(self, namespace_uri, qualified_name, error)
  # @param [DOMDocument] self 
  # @param [String] namespace_uri 
  # @param [String] qualified_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_create_element_ns, :webkit_dom_document_create_element_ns, [DOMDocument, :string, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_attribute_ns(self, namespace_uri, qualified_name, error)
  # @param [DOMDocument] self 
  # @param [String] namespace_uri 
  # @param [String] qualified_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_document_create_attribute_ns, :webkit_dom_document_create_attribute_ns, [DOMDocument, :string, :string, :pointer], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_document_get_elements_by_tag_name_ns(self, namespace_uri, local_name)
  # @param [DOMDocument] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_get_elements_by_tag_name_ns, :webkit_dom_document_get_elements_by_tag_name_ns, [DOMDocument, :string, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_element_by_id(self, element_id)
  # @param [DOMDocument] self 
  # @param [String] element_id 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_get_element_by_id, :webkit_dom_document_get_element_by_id, [DOMDocument, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_adopt_node(self, source, error)
  # @param [DOMDocument] self 
  # @param [DOMNode] source 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_document_adopt_node, :webkit_dom_document_adopt_node, [DOMDocument, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_document_create_event(self, event_type, error)
  # @param [DOMDocument] self 
  # @param [String] event_type 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMEvent)] 
  # @scope class
  attach_function :dom_document_create_event, :webkit_dom_document_create_event, [DOMDocument, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_range(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMRange)] 
  # @scope class
  attach_function :dom_document_create_range, :webkit_dom_document_create_range, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_node_iterator(self, root, what_to_show, filter, expand_entity_references, error)
  # @param [DOMDocument] self 
  # @param [DOMNode] root 
  # @param [Integer] what_to_show 
  # @param [FFI::Pointer(*WebKitDOMNodeFilter)] filter 
  # @param [Integer] expand_entity_references 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMNodeIterator)] 
  # @scope class
  attach_function :dom_document_create_node_iterator, :webkit_dom_document_create_node_iterator, [DOMDocument, DOMNode, :ulong, :pointer, :int, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_tree_walker(self, root, what_to_show, filter, expand_entity_references, error)
  # @param [DOMDocument] self 
  # @param [DOMNode] root 
  # @param [Integer] what_to_show 
  # @param [FFI::Pointer(*WebKitDOMNodeFilter)] filter 
  # @param [Integer] expand_entity_references 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMTreeWalker)] 
  # @scope class
  attach_function :dom_document_create_tree_walker, :webkit_dom_document_create_tree_walker, [DOMDocument, DOMNode, :ulong, :pointer, :int, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_override_style(self, element, pseudo_element)
  # @param [DOMDocument] self 
  # @param [FFI::Pointer(*WebKitDOMElement)] element 
  # @param [String] pseudo_element 
  # @return [DOMCSSStyleDeclaration] 
  # @scope class
  attach_function :dom_document_get_override_style, :webkit_dom_document_get_override_style, [DOMDocument, :pointer, :string], DOMCSSStyleDeclaration
  
  # (Not documented)
  # 
  # @method dom_document_create_expression(self, expression, resolver, error)
  # @param [DOMDocument] self 
  # @param [String] expression 
  # @param [FFI::Pointer(*WebKitDOMXPathNSResolver)] resolver 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMXPathExpression)] 
  # @scope class
  attach_function :dom_document_create_expression, :webkit_dom_document_create_expression, [DOMDocument, :string, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_ns_resolver(self, node_resolver)
  # @param [DOMDocument] self 
  # @param [DOMNode] node_resolver 
  # @return [FFI::Pointer(*WebKitDOMXPathNSResolver)] 
  # @scope class
  attach_function :dom_document_create_ns_resolver, :webkit_dom_document_create_ns_resolver, [DOMDocument, DOMNode], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_evaluate(self, expression, context_node, resolver, type, in_result, error)
  # @param [DOMDocument] self 
  # @param [String] expression 
  # @param [DOMNode] context_node 
  # @param [FFI::Pointer(*WebKitDOMXPathNSResolver)] resolver 
  # @param [Integer] type 
  # @param [FFI::Pointer(*WebKitDOMXPathResult)] in_result 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMXPathResult)] 
  # @scope class
  attach_function :dom_document_evaluate, :webkit_dom_document_evaluate, [DOMDocument, :string, DOMNode, :pointer, :ushort, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_exec_command(self, command, user_interface, value)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @param [Integer] user_interface 
  # @param [String] value 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_exec_command, :webkit_dom_document_exec_command, [DOMDocument, :string, :int, :string], :int
  
  # (Not documented)
  # 
  # @method dom_document_query_command_enabled(self, command)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_query_command_enabled, :webkit_dom_document_query_command_enabled, [DOMDocument, :string], :int
  
  # (Not documented)
  # 
  # @method dom_document_query_command_indeterm(self, command)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_query_command_indeterm, :webkit_dom_document_query_command_indeterm, [DOMDocument, :string], :int
  
  # (Not documented)
  # 
  # @method dom_document_query_command_state(self, command)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_query_command_state, :webkit_dom_document_query_command_state, [DOMDocument, :string], :int
  
  # (Not documented)
  # 
  # @method dom_document_query_command_supported(self, command)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_query_command_supported, :webkit_dom_document_query_command_supported, [DOMDocument, :string], :int
  
  # (Not documented)
  # 
  # @method dom_document_query_command_value(self, command)
  # @param [DOMDocument] self 
  # @param [String] command 
  # @return [String] 
  # @scope class
  attach_function :dom_document_query_command_value, :webkit_dom_document_query_command_value, [DOMDocument, :string], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_elements_by_name(self, element_name)
  # @param [DOMDocument] self 
  # @param [String] element_name 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_get_elements_by_name, :webkit_dom_document_get_elements_by_name, [DOMDocument, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_element_from_point(self, x, y)
  # @param [DOMDocument] self 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_element_from_point, :webkit_dom_document_element_from_point, [DOMDocument, :long, :long], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_caret_range_from_point(self, x, y)
  # @param [DOMDocument] self 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [FFI::Pointer(*WebKitDOMRange)] 
  # @scope class
  attach_function :dom_document_caret_range_from_point, :webkit_dom_document_caret_range_from_point, [DOMDocument, :long, :long], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_create_css_style_declaration(self)
  # @param [DOMDocument] self 
  # @return [DOMCSSStyleDeclaration] 
  # @scope class
  attach_function :dom_document_create_css_style_declaration, :webkit_dom_document_create_css_style_declaration, [DOMDocument], DOMCSSStyleDeclaration
  
  # (Not documented)
  # 
  # @method dom_document_get_elements_by_class_name(self, tagname)
  # @param [DOMDocument] self 
  # @param [String] tagname 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_get_elements_by_class_name, :webkit_dom_document_get_elements_by_class_name, [DOMDocument, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_query_selector(self, selectors, error)
  # @param [DOMDocument] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_query_selector, :webkit_dom_document_query_selector, [DOMDocument, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_query_selector_all(self, selectors, error)
  # @param [DOMDocument] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_query_selector_all, :webkit_dom_document_query_selector_all, [DOMDocument, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_webkit_cancel_full_screen(self)
  # @param [DOMDocument] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_webkit_cancel_full_screen, :webkit_dom_document_webkit_cancel_full_screen, [DOMDocument], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_doctype(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMDocumentType)] 
  # @scope class
  attach_function :dom_document_get_doctype, :webkit_dom_document_get_doctype, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_implementation(self)
  # @param [DOMDocument] self 
  # @return [DOMDOMImplementation] 
  # @scope class
  attach_function :dom_document_get_implementation, :webkit_dom_document_get_implementation, [DOMDocument], DOMDOMImplementation
  
  # (Not documented)
  # 
  # @method dom_document_get_document_element(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_get_document_element, :webkit_dom_document_get_document_element, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_input_encoding(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_input_encoding, :webkit_dom_document_get_input_encoding, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_xml_encoding(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_xml_encoding, :webkit_dom_document_get_xml_encoding, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_xml_version(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_xml_version, :webkit_dom_document_get_xml_version, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_xml_version(self, value, error)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_xml_version, :webkit_dom_document_set_xml_version, [DOMDocument, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_xml_standalone(self)
  # @param [DOMDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_get_xml_standalone, :webkit_dom_document_get_xml_standalone, [DOMDocument], :int
  
  # (Not documented)
  # 
  # @method dom_document_set_xml_standalone(self, value, error)
  # @param [DOMDocument] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_xml_standalone, :webkit_dom_document_set_xml_standalone, [DOMDocument, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_document_uri(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_document_uri, :webkit_dom_document_get_document_uri, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_document_uri(self, value)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_document_uri, :webkit_dom_document_set_document_uri, [DOMDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_default_view(self)
  # @param [DOMDocument] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_document_get_default_view, :webkit_dom_document_get_default_view, [DOMDocument], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_document_get_style_sheets(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMStyleSheetList)] 
  # @scope class
  attach_function :dom_document_get_style_sheets, :webkit_dom_document_get_style_sheets, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_title(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_title, :webkit_dom_document_get_title, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_title(self, value)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_title, :webkit_dom_document_set_title, [DOMDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_referrer(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_referrer, :webkit_dom_document_get_referrer, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_domain(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_domain, :webkit_dom_document_get_domain, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_cookie(self, error)
  # @param [DOMDocument] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_cookie, :webkit_dom_document_get_cookie, [DOMDocument, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_cookie(self, value, error)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_cookie, :webkit_dom_document_set_cookie, [DOMDocument, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_body(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLElement)] 
  # @scope class
  attach_function :dom_document_get_body, :webkit_dom_document_get_body, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_set_body(self, value, error)
  # @param [DOMDocument] self 
  # @param [FFI::Pointer(*WebKitDOMHTMLElement)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_body, :webkit_dom_document_set_body, [DOMDocument, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_head(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLHeadElement)] 
  # @scope class
  attach_function :dom_document_get_head, :webkit_dom_document_get_head, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_images(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_document_get_images, :webkit_dom_document_get_images, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_applets(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_document_get_applets, :webkit_dom_document_get_applets, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_links(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_document_get_links, :webkit_dom_document_get_links, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_forms(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_document_get_forms, :webkit_dom_document_get_forms, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_anchors(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_document_get_anchors, :webkit_dom_document_get_anchors, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_last_modified(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_last_modified, :webkit_dom_document_get_last_modified, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_charset(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_charset, :webkit_dom_document_get_charset, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_charset(self, value)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_charset, :webkit_dom_document_set_charset, [DOMDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_default_charset(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_default_charset, :webkit_dom_document_get_default_charset, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_ready_state(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_ready_state, :webkit_dom_document_get_ready_state, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_character_set(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_character_set, :webkit_dom_document_get_character_set, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_preferred_stylesheet_set(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_preferred_stylesheet_set, :webkit_dom_document_get_preferred_stylesheet_set, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_selected_stylesheet_set(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_selected_stylesheet_set, :webkit_dom_document_get_selected_stylesheet_set, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_set_selected_stylesheet_set(self, value)
  # @param [DOMDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_document_set_selected_stylesheet_set, :webkit_dom_document_set_selected_stylesheet_set, [DOMDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_document_get_compat_mode(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_compat_mode, :webkit_dom_document_get_compat_mode, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_webkit_is_full_screen(self)
  # @param [DOMDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_get_webkit_is_full_screen, :webkit_dom_document_get_webkit_is_full_screen, [DOMDocument], :int
  
  # (Not documented)
  # 
  # @method dom_document_get_webkit_full_screen_keyboard_input_allowed(self)
  # @param [DOMDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_get_webkit_full_screen_keyboard_input_allowed, :webkit_dom_document_get_webkit_full_screen_keyboard_input_allowed, [DOMDocument], :int
  
  # (Not documented)
  # 
  # @method dom_document_get_webkit_current_full_screen_element(self)
  # @param [DOMDocument] self 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_get_webkit_current_full_screen_element, :webkit_dom_document_get_webkit_current_full_screen_element, [DOMDocument], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_get_webkit_visibility_state(self)
  # @param [DOMDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_get_webkit_visibility_state, :webkit_dom_document_get_webkit_visibility_state, [DOMDocument], :string
  
  # (Not documented)
  # 
  # @method dom_document_get_webkit_hidden(self)
  # @param [DOMDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_get_webkit_hidden, :webkit_dom_document_get_webkit_hidden, [DOMDocument], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMDocumentFragmentWrappers
    def query_selector(selectors, error)
      DOMElement.new WebKit.dom_document_fragment_query_selector(self, selectors, error)
    end
    
    def query_selector_all(selectors, error)
      DOMNodeList.new WebKit.dom_document_fragment_query_selector_all(self, selectors, error)
    end
  end
  
  class DOMDocumentFragment < FFI::Struct
    include DOMDocumentFragmentWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMDocumentFragmentClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_document_fragment_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_fragment_get_type, :webkit_dom_document_fragment_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_document_fragment_query_selector(self, selectors, error)
  # @param [DOMDocumentFragment] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMElement)] 
  # @scope class
  attach_function :dom_document_fragment_query_selector, :webkit_dom_document_fragment_query_selector, [DOMDocumentFragment, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_fragment_query_selector_all(self, selectors, error)
  # @param [DOMDocumentFragment] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_document_fragment_query_selector_all, :webkit_dom_document_fragment_query_selector_all, [DOMDocumentFragment, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMDocumentTypeWrappers
    def get_name()
      WebKit.dom_document_type_get_name(self)
    end
    
    def get_entities()
      DOMNamedNodeMap.new WebKit.dom_document_type_get_entities(self)
    end
    
    def get_notations()
      DOMNamedNodeMap.new WebKit.dom_document_type_get_notations(self)
    end
    
    def get_public_id()
      WebKit.dom_document_type_get_public_id(self)
    end
    
    def get_system_id()
      WebKit.dom_document_type_get_system_id(self)
    end
    
    def get_internal_subset()
      WebKit.dom_document_type_get_internal_subset(self)
    end
  end
  
  class DOMDocumentType < FFI::Struct
    include DOMDocumentTypeWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMDocumentTypeClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_document_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_document_type_get_type, :webkit_dom_document_type_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_document_type_get_name(self)
  # @param [DOMDocumentType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_type_get_name, :webkit_dom_document_type_get_name, [DOMDocumentType], :string
  
  # (Not documented)
  # 
  # @method dom_document_type_get_entities(self)
  # @param [DOMDocumentType] self 
  # @return [FFI::Pointer(*WebKitDOMNamedNodeMap)] 
  # @scope class
  attach_function :dom_document_type_get_entities, :webkit_dom_document_type_get_entities, [DOMDocumentType], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_type_get_notations(self)
  # @param [DOMDocumentType] self 
  # @return [FFI::Pointer(*WebKitDOMNamedNodeMap)] 
  # @scope class
  attach_function :dom_document_type_get_notations, :webkit_dom_document_type_get_notations, [DOMDocumentType], :pointer
  
  # (Not documented)
  # 
  # @method dom_document_type_get_public_id(self)
  # @param [DOMDocumentType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_type_get_public_id, :webkit_dom_document_type_get_public_id, [DOMDocumentType], :string
  
  # (Not documented)
  # 
  # @method dom_document_type_get_system_id(self)
  # @param [DOMDocumentType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_type_get_system_id, :webkit_dom_document_type_get_system_id, [DOMDocumentType], :string
  
  # (Not documented)
  # 
  # @method dom_document_type_get_internal_subset(self)
  # @param [DOMDocumentType] self 
  # @return [String] 
  # @scope class
  attach_function :dom_document_type_get_internal_subset, :webkit_dom_document_type_get_internal_subset, [DOMDocumentType], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMElementWrappers
    def get_attribute(name)
      WebKit.dom_element_get_attribute(self, name)
    end
    
    def set_attribute(name, value, error)
      WebKit.dom_element_set_attribute(self, name, value, error)
    end
    
    def remove_attribute(name, error)
      WebKit.dom_element_remove_attribute(self, name, error)
    end
    
    def get_attribute_node(name)
      DOMAttr.new WebKit.dom_element_get_attribute_node(self, name)
    end
    
    def set_attribute_node(new_attr, error)
      DOMAttr.new WebKit.dom_element_set_attribute_node(self, new_attr, error)
    end
    
    def remove_attribute_node(old_attr, error)
      DOMAttr.new WebKit.dom_element_remove_attribute_node(self, old_attr, error)
    end
    
    def get_elements_by_tag_name(name)
      DOMNodeList.new WebKit.dom_element_get_elements_by_tag_name(self, name)
    end
    
    def get_attribute_ns(namespace_uri, local_name)
      WebKit.dom_element_get_attribute_ns(self, namespace_uri, local_name)
    end
    
    def set_attribute_ns(namespace_uri, qualified_name, value, error)
      WebKit.dom_element_set_attribute_ns(self, namespace_uri, qualified_name, value, error)
    end
    
    def remove_attribute_ns(namespace_uri, local_name, error)
      WebKit.dom_element_remove_attribute_ns(self, namespace_uri, local_name, error)
    end
    
    def get_elements_by_tag_name_ns(namespace_uri, local_name)
      DOMNodeList.new WebKit.dom_element_get_elements_by_tag_name_ns(self, namespace_uri, local_name)
    end
    
    def get_attribute_node_ns(namespace_uri, local_name)
      DOMAttr.new WebKit.dom_element_get_attribute_node_ns(self, namespace_uri, local_name)
    end
    
    def set_attribute_node_ns(new_attr, error)
      DOMAttr.new WebKit.dom_element_set_attribute_node_ns(self, new_attr, error)
    end
    
    def has_attribute(name)
      WebKit.dom_element_has_attribute(self, name)
    end
    
    def has_attribute_ns(namespace_uri, local_name)
      WebKit.dom_element_has_attribute_ns(self, namespace_uri, local_name)
    end
    
    def focus()
      WebKit.dom_element_focus(self)
    end
    
    def blur()
      WebKit.dom_element_blur(self)
    end
    
    def scroll_into_view(align_with_top)
      WebKit.dom_element_scroll_into_view(self, align_with_top)
    end
    
    def scroll_into_view_if_needed(center_if_needed)
      WebKit.dom_element_scroll_into_view_if_needed(self, center_if_needed)
    end
    
    def scroll_by_lines(lines)
      WebKit.dom_element_scroll_by_lines(self, lines)
    end
    
    def scroll_by_pages(pages)
      WebKit.dom_element_scroll_by_pages(self, pages)
    end
    
    def get_elements_by_class_name(name)
      DOMNodeList.new WebKit.dom_element_get_elements_by_class_name(self, name)
    end
    
    def query_selector(selectors, error)
      DOMElement.new WebKit.dom_element_query_selector(self, selectors, error)
    end
    
    def query_selector_all(selectors, error)
      DOMNodeList.new WebKit.dom_element_query_selector_all(self, selectors, error)
    end
    
    def webkit_matches_selector(selectors, error)
      WebKit.dom_element_webkit_matches_selector(self, selectors, error)
    end
    
    def webkit_request_full_screen(flags)
      WebKit.dom_element_webkit_request_full_screen(self, flags)
    end
    
    def get_tag_name()
      WebKit.dom_element_get_tag_name(self)
    end
    
    def get_style()
      DOMCSSStyleDeclaration.new WebKit.dom_element_get_style(self)
    end
    
    def get_offset_left()
      WebKit.dom_element_get_offset_left(self)
    end
    
    def get_offset_top()
      WebKit.dom_element_get_offset_top(self)
    end
    
    def get_offset_width()
      WebKit.dom_element_get_offset_width(self)
    end
    
    def get_offset_height()
      WebKit.dom_element_get_offset_height(self)
    end
    
    def get_offset_parent()
      DOMElement.new WebKit.dom_element_get_offset_parent(self)
    end
    
    def get_client_left()
      WebKit.dom_element_get_client_left(self)
    end
    
    def get_client_top()
      WebKit.dom_element_get_client_top(self)
    end
    
    def get_client_width()
      WebKit.dom_element_get_client_width(self)
    end
    
    def get_client_height()
      WebKit.dom_element_get_client_height(self)
    end
    
    def get_scroll_left()
      WebKit.dom_element_get_scroll_left(self)
    end
    
    def set_scroll_left(value)
      WebKit.dom_element_set_scroll_left(self, value)
    end
    
    def get_scroll_top()
      WebKit.dom_element_get_scroll_top(self)
    end
    
    def set_scroll_top(value)
      WebKit.dom_element_set_scroll_top(self, value)
    end
    
    def get_scroll_width()
      WebKit.dom_element_get_scroll_width(self)
    end
    
    def get_scroll_height()
      WebKit.dom_element_get_scroll_height(self)
    end
    
    def get_first_element_child()
      DOMElement.new WebKit.dom_element_get_first_element_child(self)
    end
    
    def get_last_element_child()
      DOMElement.new WebKit.dom_element_get_last_element_child(self)
    end
    
    def get_previous_element_sibling()
      DOMElement.new WebKit.dom_element_get_previous_element_sibling(self)
    end
    
    def get_next_element_sibling()
      DOMElement.new WebKit.dom_element_get_next_element_sibling(self)
    end
    
    def get_child_element_count()
      WebKit.dom_element_get_child_element_count(self)
    end
  end
  
  class DOMElement < FFI::Struct
    include DOMElementWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMElementClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_type, :webkit_dom_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_element_get_attribute(self, name)
  # @param [DOMElement] self 
  # @param [String] name 
  # @return [String] 
  # @scope class
  attach_function :dom_element_get_attribute, :webkit_dom_element_get_attribute, [DOMElement, :string], :string
  
  # (Not documented)
  # 
  # @method dom_element_set_attribute(self, name, value, error)
  # @param [DOMElement] self 
  # @param [String] name 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_set_attribute, :webkit_dom_element_set_attribute, [DOMElement, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_element_remove_attribute(self, name, error)
  # @param [DOMElement] self 
  # @param [String] name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_remove_attribute, :webkit_dom_element_remove_attribute, [DOMElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_attribute_node(self, name)
  # @param [DOMElement] self 
  # @param [String] name 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_element_get_attribute_node, :webkit_dom_element_get_attribute_node, [DOMElement, :string], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_element_set_attribute_node(self, new_attr, error)
  # @param [DOMElement] self 
  # @param [DOMAttr] new_attr 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_element_set_attribute_node, :webkit_dom_element_set_attribute_node, [DOMElement, DOMAttr, :pointer], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_element_remove_attribute_node(self, old_attr, error)
  # @param [DOMElement] self 
  # @param [DOMAttr] old_attr 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_element_remove_attribute_node, :webkit_dom_element_remove_attribute_node, [DOMElement, DOMAttr, :pointer], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_element_get_elements_by_tag_name(self, name)
  # @param [DOMElement] self 
  # @param [String] name 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_element_get_elements_by_tag_name, :webkit_dom_element_get_elements_by_tag_name, [DOMElement, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_element_get_attribute_ns(self, namespace_uri, local_name)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [String] 
  # @scope class
  attach_function :dom_element_get_attribute_ns, :webkit_dom_element_get_attribute_ns, [DOMElement, :string, :string], :string
  
  # (Not documented)
  # 
  # @method dom_element_set_attribute_ns(self, namespace_uri, qualified_name, value, error)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] qualified_name 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_set_attribute_ns, :webkit_dom_element_set_attribute_ns, [DOMElement, :string, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_element_remove_attribute_ns(self, namespace_uri, local_name, error)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_remove_attribute_ns, :webkit_dom_element_remove_attribute_ns, [DOMElement, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_elements_by_tag_name_ns(self, namespace_uri, local_name)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_element_get_elements_by_tag_name_ns, :webkit_dom_element_get_elements_by_tag_name_ns, [DOMElement, :string, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_element_get_attribute_node_ns(self, namespace_uri, local_name)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_element_get_attribute_node_ns, :webkit_dom_element_get_attribute_node_ns, [DOMElement, :string, :string], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_element_set_attribute_node_ns(self, new_attr, error)
  # @param [DOMElement] self 
  # @param [DOMAttr] new_attr 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMAttr] 
  # @scope class
  attach_function :dom_element_set_attribute_node_ns, :webkit_dom_element_set_attribute_node_ns, [DOMElement, DOMAttr, :pointer], DOMAttr
  
  # (Not documented)
  # 
  # @method dom_element_has_attribute(self, name)
  # @param [DOMElement] self 
  # @param [String] name 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_has_attribute, :webkit_dom_element_has_attribute, [DOMElement, :string], :int
  
  # (Not documented)
  # 
  # @method dom_element_has_attribute_ns(self, namespace_uri, local_name)
  # @param [DOMElement] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_has_attribute_ns, :webkit_dom_element_has_attribute_ns, [DOMElement, :string, :string], :int
  
  # (Not documented)
  # 
  # @method dom_element_focus(self)
  # @param [DOMElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_focus, :webkit_dom_element_focus, [DOMElement], :void
  
  # (Not documented)
  # 
  # @method dom_element_blur(self)
  # @param [DOMElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_blur, :webkit_dom_element_blur, [DOMElement], :void
  
  # (Not documented)
  # 
  # @method dom_element_scroll_into_view(self, align_with_top)
  # @param [DOMElement] self 
  # @param [Integer] align_with_top 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_scroll_into_view, :webkit_dom_element_scroll_into_view, [DOMElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_element_scroll_into_view_if_needed(self, center_if_needed)
  # @param [DOMElement] self 
  # @param [Integer] center_if_needed 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_scroll_into_view_if_needed, :webkit_dom_element_scroll_into_view_if_needed, [DOMElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_element_scroll_by_lines(self, lines)
  # @param [DOMElement] self 
  # @param [Integer] lines 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_scroll_by_lines, :webkit_dom_element_scroll_by_lines, [DOMElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_element_scroll_by_pages(self, pages)
  # @param [DOMElement] self 
  # @param [Integer] pages 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_scroll_by_pages, :webkit_dom_element_scroll_by_pages, [DOMElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_elements_by_class_name(self, name)
  # @param [DOMElement] self 
  # @param [String] name 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_element_get_elements_by_class_name, :webkit_dom_element_get_elements_by_class_name, [DOMElement, :string], :pointer
  
  # (Not documented)
  # 
  # @method dom_element_query_selector(self, selectors, error)
  # @param [DOMElement] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_query_selector, :webkit_dom_element_query_selector, [DOMElement, :string, :pointer], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_query_selector_all(self, selectors, error)
  # @param [DOMElement] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_element_query_selector_all, :webkit_dom_element_query_selector_all, [DOMElement, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method dom_element_webkit_matches_selector(self, selectors, error)
  # @param [DOMElement] self 
  # @param [String] selectors 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_webkit_matches_selector, :webkit_dom_element_webkit_matches_selector, [DOMElement, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_element_webkit_request_full_screen(self, flags)
  # @param [DOMElement] self 
  # @param [Integer] flags 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_webkit_request_full_screen, :webkit_dom_element_webkit_request_full_screen, [DOMElement, :ushort], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_tag_name(self)
  # @param [DOMElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_element_get_tag_name, :webkit_dom_element_get_tag_name, [DOMElement], :string
  
  # (Not documented)
  # 
  # @method dom_element_get_style(self)
  # @param [DOMElement] self 
  # @return [DOMCSSStyleDeclaration] 
  # @scope class
  attach_function :dom_element_get_style, :webkit_dom_element_get_style, [DOMElement], DOMCSSStyleDeclaration
  
  # (Not documented)
  # 
  # @method dom_element_get_offset_left(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_offset_left, :webkit_dom_element_get_offset_left, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_offset_top(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_offset_top, :webkit_dom_element_get_offset_top, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_offset_width(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_offset_width, :webkit_dom_element_get_offset_width, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_offset_height(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_offset_height, :webkit_dom_element_get_offset_height, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_offset_parent(self)
  # @param [DOMElement] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_get_offset_parent, :webkit_dom_element_get_offset_parent, [DOMElement], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_get_client_left(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_client_left, :webkit_dom_element_get_client_left, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_client_top(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_client_top, :webkit_dom_element_get_client_top, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_client_width(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_client_width, :webkit_dom_element_get_client_width, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_client_height(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_client_height, :webkit_dom_element_get_client_height, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_scroll_left(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_scroll_left, :webkit_dom_element_get_scroll_left, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_set_scroll_left(self, value)
  # @param [DOMElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_set_scroll_left, :webkit_dom_element_set_scroll_left, [DOMElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_scroll_top(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_scroll_top, :webkit_dom_element_get_scroll_top, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_set_scroll_top(self, value)
  # @param [DOMElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_element_set_scroll_top, :webkit_dom_element_set_scroll_top, [DOMElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_element_get_scroll_width(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_scroll_width, :webkit_dom_element_get_scroll_width, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_scroll_height(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_scroll_height, :webkit_dom_element_get_scroll_height, [DOMElement], :long
  
  # (Not documented)
  # 
  # @method dom_element_get_first_element_child(self)
  # @param [DOMElement] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_get_first_element_child, :webkit_dom_element_get_first_element_child, [DOMElement], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_get_last_element_child(self)
  # @param [DOMElement] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_get_last_element_child, :webkit_dom_element_get_last_element_child, [DOMElement], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_get_previous_element_sibling(self)
  # @param [DOMElement] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_get_previous_element_sibling, :webkit_dom_element_get_previous_element_sibling, [DOMElement], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_get_next_element_sibling(self)
  # @param [DOMElement] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_element_get_next_element_sibling, :webkit_dom_element_get_next_element_sibling, [DOMElement], DOMElement
  
  # (Not documented)
  # 
  # @method dom_element_get_child_element_count(self)
  # @param [DOMElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_element_get_child_element_count, :webkit_dom_element_get_child_element_count, [DOMElement], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  class DOMEntityReference < FFI::Struct
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMEntityReferenceClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_entity_reference_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_entity_reference_get_type, :webkit_dom_entity_reference_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMEventWrappers
    def stop_propagation()
      WebKit.dom_event_stop_propagation(self)
    end
    
    def prevent_default()
      WebKit.dom_event_prevent_default(self)
    end
    
    def init_event(event_type_arg, can_bubble_arg, cancelable_arg)
      WebKit.dom_event_init_event(self, event_type_arg, can_bubble_arg, cancelable_arg)
    end
    
    def stop_immediate_propagation()
      WebKit.dom_event_stop_immediate_propagation(self)
    end
    
    def get_target()
      DOMEventTarget.new WebKit.dom_event_get_target(self)
    end
    
    def get_current_target()
      DOMEventTarget.new WebKit.dom_event_get_current_target(self)
    end
    
    def get_event_phase()
      WebKit.dom_event_get_event_phase(self)
    end
    
    def get_bubbles()
      WebKit.dom_event_get_bubbles(self)
    end
    
    def get_cancelable()
      WebKit.dom_event_get_cancelable(self)
    end
    
    def get_time_stamp()
      WebKit.dom_event_get_time_stamp(self)
    end
    
    def get_default_prevented()
      WebKit.dom_event_get_default_prevented(self)
    end
    
    def get_src_element()
      DOMEventTarget.new WebKit.dom_event_get_src_element(self)
    end
    
    def get_return_value()
      WebKit.dom_event_get_return_value(self)
    end
    
    def set_return_value(value)
      WebKit.dom_event_set_return_value(self, value)
    end
    
    def get_cancel_bubble()
      WebKit.dom_event_get_cancel_bubble(self)
    end
    
    def set_cancel_bubble(value)
      WebKit.dom_event_set_cancel_bubble(self, value)
    end
  end
  
  class DOMEvent < FFI::Struct
    include DOMEventWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMEventClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_event_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_type, :webkit_dom_event_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_event_stop_propagation(self)
  # @param [DOMEvent] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_stop_propagation, :webkit_dom_event_stop_propagation, [DOMEvent], :void
  
  # (Not documented)
  # 
  # @method dom_event_prevent_default(self)
  # @param [DOMEvent] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_prevent_default, :webkit_dom_event_prevent_default, [DOMEvent], :void
  
  # (Not documented)
  # 
  # @method dom_event_init_event(self, event_type_arg, can_bubble_arg, cancelable_arg)
  # @param [DOMEvent] self 
  # @param [String] event_type_arg 
  # @param [Integer] can_bubble_arg 
  # @param [Integer] cancelable_arg 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_init_event, :webkit_dom_event_init_event, [DOMEvent, :string, :int, :int], :void
  
  # (Not documented)
  # 
  # @method dom_event_stop_immediate_propagation(self)
  # @param [DOMEvent] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_stop_immediate_propagation, :webkit_dom_event_stop_immediate_propagation, [DOMEvent], :void
  
  # (Not documented)
  # 
  # @method dom_event_get_target(self)
  # @param [DOMEvent] self 
  # @return [DOMEventTarget] 
  # @scope class
  attach_function :dom_event_get_target, :webkit_dom_event_get_target, [DOMEvent], DOMEventTarget
  
  # (Not documented)
  # 
  # @method dom_event_get_current_target(self)
  # @param [DOMEvent] self 
  # @return [DOMEventTarget] 
  # @scope class
  attach_function :dom_event_get_current_target, :webkit_dom_event_get_current_target, [DOMEvent], DOMEventTarget
  
  # (Not documented)
  # 
  # @method dom_event_get_event_phase(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_event_phase, :webkit_dom_event_get_event_phase, [DOMEvent], :ushort
  
  # (Not documented)
  # 
  # @method dom_event_get_bubbles(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_bubbles, :webkit_dom_event_get_bubbles, [DOMEvent], :int
  
  # (Not documented)
  # 
  # @method dom_event_get_cancelable(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_cancelable, :webkit_dom_event_get_cancelable, [DOMEvent], :int
  
  # (Not documented)
  # 
  # @method dom_event_get_time_stamp(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_time_stamp, :webkit_dom_event_get_time_stamp, [DOMEvent], :uint
  
  # (Not documented)
  # 
  # @method dom_event_get_default_prevented(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_default_prevented, :webkit_dom_event_get_default_prevented, [DOMEvent], :int
  
  # (Not documented)
  # 
  # @method dom_event_get_src_element(self)
  # @param [DOMEvent] self 
  # @return [DOMEventTarget] 
  # @scope class
  attach_function :dom_event_get_src_element, :webkit_dom_event_get_src_element, [DOMEvent], DOMEventTarget
  
  # (Not documented)
  # 
  # @method dom_event_get_return_value(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_return_value, :webkit_dom_event_get_return_value, [DOMEvent], :int
  
  # (Not documented)
  # 
  # @method dom_event_set_return_value(self, value)
  # @param [DOMEvent] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_set_return_value, :webkit_dom_event_set_return_value, [DOMEvent, :int], :void
  
  # (Not documented)
  # 
  # @method dom_event_get_cancel_bubble(self)
  # @param [DOMEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_get_cancel_bubble, :webkit_dom_event_get_cancel_bubble, [DOMEvent], :int
  
  # (Not documented)
  # 
  # @method dom_event_set_cancel_bubble(self, value)
  # @param [DOMEvent] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_set_cancel_bubble, :webkit_dom_event_set_cancel_bubble, [DOMEvent, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :dispatch_event ::
  #   (FFI::Pointer(*)) virtual table
  # :add_event_listener ::
  #   (FFI::Pointer(*)) 
  # :remove_event_listener ::
  #   (FFI::Pointer(*)) 
  class DOMEventTargetIface < FFI::Struct
    layout :g_iface, :char,
           :dispatch_event, :pointer,
           :add_event_listener, :pointer,
           :remove_event_listener, :pointer
  end
  
  # (Not documented)
  # 
  # @method dom_event_target_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_target_get_type, :webkit_dom_event_target_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_event_target_dispatch_event(target, event, error)
  # @param [DOMEventTarget] target 
  # @param [DOMEvent] event 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_event_target_dispatch_event, :webkit_dom_event_target_dispatch_event, [DOMEventTarget, DOMEvent, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_event_target_add_event_listener(target, event_name, handler, bubble, user_data)
  # @param [DOMEventTarget] target 
  # @param [String] event_name 
  # @param [FFI::Pointer(GCallback)] handler 
  # @param [Integer] bubble 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_target_add_event_listener, :webkit_dom_event_target_add_event_listener, [DOMEventTarget, :string, :pointer, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_event_target_remove_event_listener(target, event_name, handler, bubble)
  # @param [DOMEventTarget] target 
  # @param [String] event_name 
  # @param [FFI::Pointer(GCallback)] handler 
  # @param [Integer] bubble 
  # @return [Integer] 
  # @scope class
  attach_function :dom_event_target_remove_event_listener, :webkit_dom_event_target_remove_event_listener, [DOMEventTarget, :string, :pointer, :int], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMBlob) 
  module DOMFileWrappers
    def get_name()
      WebKit.dom_file_get_name(self)
    end
    
    def get_file_name()
      WebKit.dom_file_get_file_name(self)
    end
    
    def get_file_size()
      WebKit.dom_file_get_file_size(self)
    end
  end
  
  class DOMFile < FFI::Struct
    include DOMFileWrappers
    layout :parent_instance, DOMBlob.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMBlobClass) 
  class DOMFileClass < FFI::Struct
    layout :parent_class, DOMBlobClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_file_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_file_get_type, :webkit_dom_file_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_file_get_name(self)
  # @param [DOMFile] self 
  # @return [String] 
  # @scope class
  attach_function :dom_file_get_name, :webkit_dom_file_get_name, [DOMFile], :string
  
  # (Not documented)
  # 
  # @method dom_file_get_file_name(self)
  # @param [DOMFile] self 
  # @return [String] 
  # @scope class
  attach_function :dom_file_get_file_name, :webkit_dom_file_get_file_name, [DOMFile], :string
  
  # (Not documented)
  # 
  # @method dom_file_get_file_size(self)
  # @param [DOMFile] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_file_get_file_size, :webkit_dom_file_get_file_size, [DOMFile], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMFileListWrappers
    def item(index)
      DOMFile.new WebKit.dom_file_list_item(self, index)
    end
    
    def get_length()
      WebKit.dom_file_list_get_length(self)
    end
  end
  
  class DOMFileList < FFI::Struct
    include DOMFileListWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMFileListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_file_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_file_list_get_type, :webkit_dom_file_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_file_list_item(self, index)
  # @param [DOMFileList] self 
  # @param [Integer] index 
  # @return [DOMFile] 
  # @scope class
  attach_function :dom_file_list_item, :webkit_dom_file_list_item, [DOMFileList, :ulong], DOMFile
  
  # (Not documented)
  # 
  # @method dom_file_list_get_length(self)
  # @param [DOMFileList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_file_list_get_length, :webkit_dom_file_list_get_length, [DOMFileList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMGeolocationWrappers
    def clear_watch(watch_id)
      WebKit.dom_geolocation_clear_watch(self, watch_id)
    end
  end
  
  class DOMGeolocation < FFI::Struct
    include DOMGeolocationWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMGeolocationClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_geolocation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_geolocation_get_type, :webkit_dom_geolocation_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_geolocation_clear_watch(self, watch_id)
  # @param [DOMGeolocation] self 
  # @param [Integer] watch_id 
  # @return [nil] 
  # @scope class
  attach_function :dom_geolocation_clear_watch, :webkit_dom_geolocation_clear_watch, [DOMGeolocation, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMElement) 
  class DOMHTMLElement < FFI::Struct
    layout :parent_instance, DOMElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMElementClass) 
  class DOMHTMLElementClass < FFI::Struct
    layout :parent_class, DOMElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_type, :webkit_dom_html_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_element_insert_adjacent_element(self, where, element, error)
  # @param [DOMHTMLElement] self 
  # @param [String] where 
  # @param [DOMElement] element 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_html_element_insert_adjacent_element, :webkit_dom_html_element_insert_adjacent_element, [DOMHTMLElement, :string, DOMElement, :pointer], DOMElement
  
  # (Not documented)
  # 
  # @method dom_html_element_insert_adjacent_html(self, where, html, error)
  # @param [DOMHTMLElement] self 
  # @param [String] where 
  # @param [String] html 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_insert_adjacent_html, :webkit_dom_html_element_insert_adjacent_html, [DOMHTMLElement, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_insert_adjacent_text(self, where, text, error)
  # @param [DOMHTMLElement] self 
  # @param [String] where 
  # @param [String] text 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_insert_adjacent_text, :webkit_dom_html_element_insert_adjacent_text, [DOMHTMLElement, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_id(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_id, :webkit_dom_html_element_get_id, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_id(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_id, :webkit_dom_html_element_set_id, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_title(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_title, :webkit_dom_html_element_get_title, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_title(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_title, :webkit_dom_html_element_set_title, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_lang(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_lang, :webkit_dom_html_element_get_lang, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_lang(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_lang, :webkit_dom_html_element_set_lang, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_dir(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_dir, :webkit_dom_html_element_get_dir, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_dir(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_dir, :webkit_dom_html_element_set_dir, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_class_name(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_class_name, :webkit_dom_html_element_get_class_name, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_class_name(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_class_name, :webkit_dom_html_element_set_class_name, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_class_list(self)
  # @param [DOMHTMLElement] self 
  # @return [DOMDOMTokenList] 
  # @scope class
  attach_function :dom_html_element_get_class_list, :webkit_dom_html_element_get_class_list, [DOMHTMLElement], DOMDOMTokenList
  
  # (Not documented)
  # 
  # @method dom_html_element_get_tab_index(self)
  # @param [DOMHTMLElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_tab_index, :webkit_dom_html_element_get_tab_index, [DOMHTMLElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_element_set_tab_index(self, value)
  # @param [DOMHTMLElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_tab_index, :webkit_dom_html_element_set_tab_index, [DOMHTMLElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_draggable(self)
  # @param [DOMHTMLElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_draggable, :webkit_dom_html_element_get_draggable, [DOMHTMLElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_element_set_draggable(self, value)
  # @param [DOMHTMLElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_draggable, :webkit_dom_html_element_set_draggable, [DOMHTMLElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_webkitdropzone(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_webkitdropzone, :webkit_dom_html_element_get_webkitdropzone, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_webkitdropzone(self, value)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_webkitdropzone, :webkit_dom_html_element_set_webkitdropzone, [DOMHTMLElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_hidden(self)
  # @param [DOMHTMLElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_hidden, :webkit_dom_html_element_get_hidden, [DOMHTMLElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_element_set_hidden(self, value)
  # @param [DOMHTMLElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_hidden, :webkit_dom_html_element_set_hidden, [DOMHTMLElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_inner_html(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_inner_html, :webkit_dom_html_element_get_inner_html, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_inner_html(self, value, error)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_inner_html, :webkit_dom_html_element_set_inner_html, [DOMHTMLElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_inner_text(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_inner_text, :webkit_dom_html_element_get_inner_text, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_inner_text(self, value, error)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_inner_text, :webkit_dom_html_element_set_inner_text, [DOMHTMLElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_outer_html(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_outer_html, :webkit_dom_html_element_get_outer_html, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_outer_html(self, value, error)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_outer_html, :webkit_dom_html_element_set_outer_html, [DOMHTMLElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_outer_text(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_outer_text, :webkit_dom_html_element_get_outer_text, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_outer_text(self, value, error)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_outer_text, :webkit_dom_html_element_set_outer_text, [DOMHTMLElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_children(self)
  # @param [DOMHTMLElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLCollection)] 
  # @scope class
  attach_function :dom_html_element_get_children, :webkit_dom_html_element_get_children, [DOMHTMLElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_element_get_content_editable(self)
  # @param [DOMHTMLElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_element_get_content_editable, :webkit_dom_html_element_get_content_editable, [DOMHTMLElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_element_set_content_editable(self, value, error)
  # @param [DOMHTMLElement] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_content_editable, :webkit_dom_html_element_set_content_editable, [DOMHTMLElement, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_element_get_is_content_editable(self)
  # @param [DOMHTMLElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_is_content_editable, :webkit_dom_html_element_get_is_content_editable, [DOMHTMLElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_element_get_spellcheck(self)
  # @param [DOMHTMLElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_element_get_spellcheck, :webkit_dom_html_element_get_spellcheck, [DOMHTMLElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_element_set_spellcheck(self, value)
  # @param [DOMHTMLElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_element_set_spellcheck, :webkit_dom_html_element_set_spellcheck, [DOMHTMLElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLAnchorElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLAnchorElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_anchor_element_get_type, :webkit_dom_html_anchor_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_parameter(self, name)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] name 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_parameter, :webkit_dom_html_anchor_element_get_parameter, [DOMHTMLAnchorElement, :string], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_access_key(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_access_key, :webkit_dom_html_anchor_element_get_access_key, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_access_key(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_access_key, :webkit_dom_html_anchor_element_set_access_key, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_charset(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_charset, :webkit_dom_html_anchor_element_get_charset, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_charset(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_charset, :webkit_dom_html_anchor_element_set_charset, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_coords(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_coords, :webkit_dom_html_anchor_element_get_coords, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_coords(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_coords, :webkit_dom_html_anchor_element_set_coords, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_download(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_download, :webkit_dom_html_anchor_element_get_download, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_download(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_download, :webkit_dom_html_anchor_element_set_download, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_href(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_href, :webkit_dom_html_anchor_element_get_href, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_href(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_href, :webkit_dom_html_anchor_element_set_href, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_hreflang(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_hreflang, :webkit_dom_html_anchor_element_get_hreflang, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_hreflang(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_hreflang, :webkit_dom_html_anchor_element_set_hreflang, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_name(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_name, :webkit_dom_html_anchor_element_get_name, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_name(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_name, :webkit_dom_html_anchor_element_set_name, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_ping(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_ping, :webkit_dom_html_anchor_element_get_ping, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_ping(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_ping, :webkit_dom_html_anchor_element_set_ping, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_rel(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_rel, :webkit_dom_html_anchor_element_get_rel, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_rel(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_rel, :webkit_dom_html_anchor_element_set_rel, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_rev(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_rev, :webkit_dom_html_anchor_element_get_rev, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_rev(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_rev, :webkit_dom_html_anchor_element_set_rev, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_shape(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_shape, :webkit_dom_html_anchor_element_get_shape, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_shape(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_shape, :webkit_dom_html_anchor_element_set_shape, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_target(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_target, :webkit_dom_html_anchor_element_get_target, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_target(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_target, :webkit_dom_html_anchor_element_set_target, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_hash(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_hash, :webkit_dom_html_anchor_element_get_hash, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_hash(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_hash, :webkit_dom_html_anchor_element_set_hash, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_host(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_host, :webkit_dom_html_anchor_element_get_host, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_host(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_host, :webkit_dom_html_anchor_element_set_host, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_hostname(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_hostname, :webkit_dom_html_anchor_element_get_hostname, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_hostname(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_hostname, :webkit_dom_html_anchor_element_set_hostname, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_pathname(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_pathname, :webkit_dom_html_anchor_element_get_pathname, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_pathname(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_pathname, :webkit_dom_html_anchor_element_set_pathname, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_port(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_port, :webkit_dom_html_anchor_element_get_port, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_port(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_port, :webkit_dom_html_anchor_element_set_port, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_protocol(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_protocol, :webkit_dom_html_anchor_element_get_protocol, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_protocol(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_protocol, :webkit_dom_html_anchor_element_set_protocol, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_search(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_search, :webkit_dom_html_anchor_element_get_search, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_set_search(self, value)
  # @param [DOMHTMLAnchorElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_anchor_element_set_search, :webkit_dom_html_anchor_element_set_search, [DOMHTMLAnchorElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_origin(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_origin, :webkit_dom_html_anchor_element_get_origin, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_anchor_element_get_text(self)
  # @param [DOMHTMLAnchorElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_anchor_element_get_text, :webkit_dom_html_anchor_element_get_text, [DOMHTMLAnchorElement], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLAppletElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLAppletElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_applet_element_get_type, :webkit_dom_html_applet_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_align(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_align, :webkit_dom_html_applet_element_get_align, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_align(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_align, :webkit_dom_html_applet_element_set_align, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_alt(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_alt, :webkit_dom_html_applet_element_get_alt, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_alt(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_alt, :webkit_dom_html_applet_element_set_alt, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_archive(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_archive, :webkit_dom_html_applet_element_get_archive, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_archive(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_archive, :webkit_dom_html_applet_element_set_archive, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_code(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_code, :webkit_dom_html_applet_element_get_code, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_code(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_code, :webkit_dom_html_applet_element_set_code, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_code_base(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_code_base, :webkit_dom_html_applet_element_get_code_base, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_code_base(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_code_base, :webkit_dom_html_applet_element_set_code_base, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_height(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_height, :webkit_dom_html_applet_element_get_height, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_height(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_height, :webkit_dom_html_applet_element_set_height, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_hspace(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_applet_element_get_hspace, :webkit_dom_html_applet_element_get_hspace, [DOMHTMLAppletElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_hspace(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_hspace, :webkit_dom_html_applet_element_set_hspace, [DOMHTMLAppletElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_name(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_name, :webkit_dom_html_applet_element_get_name, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_name(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_name, :webkit_dom_html_applet_element_set_name, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_object(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_object, :webkit_dom_html_applet_element_get_object, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_object(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_object, :webkit_dom_html_applet_element_set_object, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_vspace(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_applet_element_get_vspace, :webkit_dom_html_applet_element_get_vspace, [DOMHTMLAppletElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_vspace(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_vspace, :webkit_dom_html_applet_element_set_vspace, [DOMHTMLAppletElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_get_width(self)
  # @param [DOMHTMLAppletElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_applet_element_get_width, :webkit_dom_html_applet_element_get_width, [DOMHTMLAppletElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_applet_element_set_width(self, value)
  # @param [DOMHTMLAppletElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_applet_element_set_width, :webkit_dom_html_applet_element_set_width, [DOMHTMLAppletElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLAreaElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLAreaElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_area_element_get_type, :webkit_dom_html_area_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_access_key(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_access_key, :webkit_dom_html_area_element_get_access_key, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_access_key(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_access_key, :webkit_dom_html_area_element_set_access_key, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_alt(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_alt, :webkit_dom_html_area_element_get_alt, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_alt(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_alt, :webkit_dom_html_area_element_set_alt, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_coords(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_coords, :webkit_dom_html_area_element_get_coords, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_coords(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_coords, :webkit_dom_html_area_element_set_coords, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_href(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_href, :webkit_dom_html_area_element_get_href, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_href(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_href, :webkit_dom_html_area_element_set_href, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_no_href(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_area_element_get_no_href, :webkit_dom_html_area_element_get_no_href, [DOMHTMLAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_no_href(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_no_href, :webkit_dom_html_area_element_set_no_href, [DOMHTMLAreaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_ping(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_ping, :webkit_dom_html_area_element_get_ping, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_ping(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_ping, :webkit_dom_html_area_element_set_ping, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_shape(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_shape, :webkit_dom_html_area_element_get_shape, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_shape(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_shape, :webkit_dom_html_area_element_set_shape, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_target(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_target, :webkit_dom_html_area_element_get_target, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_set_target(self, value)
  # @param [DOMHTMLAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_area_element_set_target, :webkit_dom_html_area_element_set_target, [DOMHTMLAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_hash(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_hash, :webkit_dom_html_area_element_get_hash, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_host(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_host, :webkit_dom_html_area_element_get_host, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_hostname(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_hostname, :webkit_dom_html_area_element_get_hostname, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_pathname(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_pathname, :webkit_dom_html_area_element_get_pathname, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_port(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_port, :webkit_dom_html_area_element_get_port, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_protocol(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_protocol, :webkit_dom_html_area_element_get_protocol, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_area_element_get_search(self)
  # @param [DOMHTMLAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_area_element_get_search, :webkit_dom_html_area_element_get_search, [DOMHTMLAreaElement], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLMediaElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLMediaElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_type, :webkit_dom_html_media_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_media_element_load(self, error)
  # @param [DOMHTMLMediaElement] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_load, :webkit_dom_html_media_element_load, [DOMHTMLMediaElement, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_can_play_type(self, type)
  # @param [DOMHTMLMediaElement] self 
  # @param [String] type 
  # @return [String] 
  # @scope class
  attach_function :dom_html_media_element_can_play_type, :webkit_dom_html_media_element_can_play_type, [DOMHTMLMediaElement, :string], :string
  
  # (Not documented)
  # 
  # @method dom_html_media_element_play(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_play, :webkit_dom_html_media_element_play, [DOMHTMLMediaElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_pause(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_pause, :webkit_dom_html_media_element_pause, [DOMHTMLMediaElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_error(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [FFI::Pointer(*WebKitDOMMediaError)] 
  # @scope class
  attach_function :dom_html_media_element_get_error, :webkit_dom_html_media_element_get_error, [DOMHTMLMediaElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_src(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_media_element_get_src, :webkit_dom_html_media_element_get_src, [DOMHTMLMediaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_src(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_src, :webkit_dom_html_media_element_set_src, [DOMHTMLMediaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_current_src(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_media_element_get_current_src, :webkit_dom_html_media_element_get_current_src, [DOMHTMLMediaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_network_state(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_network_state, :webkit_dom_html_media_element_get_network_state, [DOMHTMLMediaElement], :ushort
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_preload(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_media_element_get_preload, :webkit_dom_html_media_element_get_preload, [DOMHTMLMediaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_preload(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_preload, :webkit_dom_html_media_element_set_preload, [DOMHTMLMediaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_buffered(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [FFI::Pointer(*WebKitDOMTimeRanges)] 
  # @scope class
  attach_function :dom_html_media_element_get_buffered, :webkit_dom_html_media_element_get_buffered, [DOMHTMLMediaElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_ready_state(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_ready_state, :webkit_dom_html_media_element_get_ready_state, [DOMHTMLMediaElement], :ushort
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_seeking(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_seeking, :webkit_dom_html_media_element_get_seeking, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_current_time(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_current_time, :webkit_dom_html_media_element_get_current_time, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_current_time(self, value, error)
  # @param [DOMHTMLMediaElement] self 
  # @param [Float] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_current_time, :webkit_dom_html_media_element_set_current_time, [DOMHTMLMediaElement, :float, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_initial_time(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_initial_time, :webkit_dom_html_media_element_get_initial_time, [DOMHTMLMediaElement], :double
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_start_time(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_start_time, :webkit_dom_html_media_element_get_start_time, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_duration(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_duration, :webkit_dom_html_media_element_get_duration, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_paused(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_paused, :webkit_dom_html_media_element_get_paused, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_default_playback_rate(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_default_playback_rate, :webkit_dom_html_media_element_get_default_playback_rate, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_default_playback_rate(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_default_playback_rate, :webkit_dom_html_media_element_set_default_playback_rate, [DOMHTMLMediaElement, :float], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_playback_rate(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_playback_rate, :webkit_dom_html_media_element_get_playback_rate, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_playback_rate(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_playback_rate, :webkit_dom_html_media_element_set_playback_rate, [DOMHTMLMediaElement, :float], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_played(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [FFI::Pointer(*WebKitDOMTimeRanges)] 
  # @scope class
  attach_function :dom_html_media_element_get_played, :webkit_dom_html_media_element_get_played, [DOMHTMLMediaElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_seekable(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [FFI::Pointer(*WebKitDOMTimeRanges)] 
  # @scope class
  attach_function :dom_html_media_element_get_seekable, :webkit_dom_html_media_element_get_seekable, [DOMHTMLMediaElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_ended(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_ended, :webkit_dom_html_media_element_get_ended, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_autoplay(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_autoplay, :webkit_dom_html_media_element_get_autoplay, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_autoplay(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_autoplay, :webkit_dom_html_media_element_set_autoplay, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_loop(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_loop, :webkit_dom_html_media_element_get_loop, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_loop(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_loop, :webkit_dom_html_media_element_set_loop, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_controls(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_controls, :webkit_dom_html_media_element_get_controls, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_controls(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_controls, :webkit_dom_html_media_element_set_controls, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_volume(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_media_element_get_volume, :webkit_dom_html_media_element_get_volume, [DOMHTMLMediaElement], :float
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_volume(self, value, error)
  # @param [DOMHTMLMediaElement] self 
  # @param [Float] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_volume, :webkit_dom_html_media_element_set_volume, [DOMHTMLMediaElement, :float, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_muted(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_muted, :webkit_dom_html_media_element_get_muted, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_muted(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_muted, :webkit_dom_html_media_element_set_muted, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_default_muted(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_default_muted, :webkit_dom_html_media_element_get_default_muted, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_default_muted(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_default_muted, :webkit_dom_html_media_element_set_default_muted, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_webkit_preserves_pitch(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_webkit_preserves_pitch, :webkit_dom_html_media_element_get_webkit_preserves_pitch, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_webkit_preserves_pitch(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_webkit_preserves_pitch, :webkit_dom_html_media_element_set_webkit_preserves_pitch, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_webkit_has_closed_captions(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_webkit_has_closed_captions, :webkit_dom_html_media_element_get_webkit_has_closed_captions, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_webkit_closed_captions_visible(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_webkit_closed_captions_visible, :webkit_dom_html_media_element_get_webkit_closed_captions_visible, [DOMHTMLMediaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_media_element_set_webkit_closed_captions_visible(self, value)
  # @param [DOMHTMLMediaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_media_element_set_webkit_closed_captions_visible, :webkit_dom_html_media_element_set_webkit_closed_captions_visible, [DOMHTMLMediaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_webkit_audio_decoded_byte_count(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_webkit_audio_decoded_byte_count, :webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count, [DOMHTMLMediaElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_media_element_get_webkit_video_decoded_byte_count(self)
  # @param [DOMHTMLMediaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_media_element_get_webkit_video_decoded_byte_count, :webkit_dom_html_media_element_get_webkit_video_decoded_byte_count, [DOMHTMLMediaElement], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLMediaElement) 
  class DOMHTMLAudioElement < FFI::Struct
    layout :parent_instance, DOMHTMLMediaElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLMediaElementClass) 
  class DOMHTMLAudioElementClass < FFI::Struct
    layout :parent_class, DOMHTMLMediaElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_audio_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_audio_element_get_type, :webkit_dom_html_audio_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLBRElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLBRElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmlbr_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlbr_element_get_type, :webkit_dom_htmlbr_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmlbr_element_get_clear(self)
  # @param [DOMHTMLBRElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_htmlbr_element_get_clear, :webkit_dom_htmlbr_element_get_clear, [DOMHTMLBRElement], :string
  
  # (Not documented)
  # 
  # @method dom_htmlbr_element_set_clear(self, value)
  # @param [DOMHTMLBRElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlbr_element_set_clear, :webkit_dom_htmlbr_element_set_clear, [DOMHTMLBRElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLBaseElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLBaseElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_base_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_base_element_get_type, :webkit_dom_html_base_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_base_element_get_href(self)
  # @param [DOMHTMLBaseElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_base_element_get_href, :webkit_dom_html_base_element_get_href, [DOMHTMLBaseElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_base_element_set_href(self, value)
  # @param [DOMHTMLBaseElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_base_element_set_href, :webkit_dom_html_base_element_set_href, [DOMHTMLBaseElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_base_element_get_target(self)
  # @param [DOMHTMLBaseElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_base_element_get_target, :webkit_dom_html_base_element_get_target, [DOMHTMLBaseElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_base_element_set_target(self, value)
  # @param [DOMHTMLBaseElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_base_element_set_target, :webkit_dom_html_base_element_set_target, [DOMHTMLBaseElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLBaseFontElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLBaseFontElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_base_font_element_get_type, :webkit_dom_html_base_font_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_get_color(self)
  # @param [DOMHTMLBaseFontElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_base_font_element_get_color, :webkit_dom_html_base_font_element_get_color, [DOMHTMLBaseFontElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_set_color(self, value)
  # @param [DOMHTMLBaseFontElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_base_font_element_set_color, :webkit_dom_html_base_font_element_set_color, [DOMHTMLBaseFontElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_get_face(self)
  # @param [DOMHTMLBaseFontElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_base_font_element_get_face, :webkit_dom_html_base_font_element_get_face, [DOMHTMLBaseFontElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_set_face(self, value)
  # @param [DOMHTMLBaseFontElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_base_font_element_set_face, :webkit_dom_html_base_font_element_set_face, [DOMHTMLBaseFontElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_get_size(self)
  # @param [DOMHTMLBaseFontElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_base_font_element_get_size, :webkit_dom_html_base_font_element_get_size, [DOMHTMLBaseFontElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_base_font_element_set_size(self, value)
  # @param [DOMHTMLBaseFontElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_base_font_element_set_size, :webkit_dom_html_base_font_element_set_size, [DOMHTMLBaseFontElement, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLBodyElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLBodyElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_body_element_get_type, :webkit_dom_html_body_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_a_link(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_a_link, :webkit_dom_html_body_element_get_a_link, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_a_link(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_a_link, :webkit_dom_html_body_element_set_a_link, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_background(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_background, :webkit_dom_html_body_element_get_background, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_background(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_background, :webkit_dom_html_body_element_set_background, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_bg_color(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_bg_color, :webkit_dom_html_body_element_get_bg_color, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_bg_color(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_bg_color, :webkit_dom_html_body_element_set_bg_color, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_link(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_link, :webkit_dom_html_body_element_get_link, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_link(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_link, :webkit_dom_html_body_element_set_link, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_text(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_text, :webkit_dom_html_body_element_get_text, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_text(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_text, :webkit_dom_html_body_element_set_text, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_body_element_get_v_link(self)
  # @param [DOMHTMLBodyElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_body_element_get_v_link, :webkit_dom_html_body_element_get_v_link, [DOMHTMLBodyElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_body_element_set_v_link(self, value)
  # @param [DOMHTMLBodyElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_body_element_set_v_link, :webkit_dom_html_body_element_set_v_link, [DOMHTMLBodyElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLButtonElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLButtonElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_get_type, :webkit_dom_html_button_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_button_element_check_validity(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_check_validity, :webkit_dom_html_button_element_check_validity, [DOMHTMLButtonElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_custom_validity(self, error)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_custom_validity, :webkit_dom_html_button_element_set_custom_validity, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_click(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_click, :webkit_dom_html_button_element_click, [DOMHTMLButtonElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLFormElement)] 
  # @scope class
  attach_function :dom_html_button_element_get_form, :webkit_dom_html_button_element_get_form, [DOMHTMLButtonElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form_action(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_form_action, :webkit_dom_html_button_element_get_form_action, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_form_action(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_form_action, :webkit_dom_html_button_element_set_form_action, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form_enctype(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_form_enctype, :webkit_dom_html_button_element_get_form_enctype, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_form_enctype(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_form_enctype, :webkit_dom_html_button_element_set_form_enctype, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form_method(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_form_method, :webkit_dom_html_button_element_get_form_method, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_form_method(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_form_method, :webkit_dom_html_button_element_set_form_method, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form_no_validate(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_get_form_no_validate, :webkit_dom_html_button_element_get_form_no_validate, [DOMHTMLButtonElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_form_no_validate(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_form_no_validate, :webkit_dom_html_button_element_set_form_no_validate, [DOMHTMLButtonElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_form_target(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_form_target, :webkit_dom_html_button_element_get_form_target, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_form_target(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_form_target, :webkit_dom_html_button_element_set_form_target, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_validity(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_button_element_get_validity, :webkit_dom_html_button_element_get_validity, [DOMHTMLButtonElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_access_key(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_access_key, :webkit_dom_html_button_element_get_access_key, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_access_key(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_access_key, :webkit_dom_html_button_element_set_access_key, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_disabled(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_get_disabled, :webkit_dom_html_button_element_get_disabled, [DOMHTMLButtonElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_disabled(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_disabled, :webkit_dom_html_button_element_set_disabled, [DOMHTMLButtonElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_autofocus(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_get_autofocus, :webkit_dom_html_button_element_get_autofocus, [DOMHTMLButtonElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_autofocus(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_autofocus, :webkit_dom_html_button_element_set_autofocus, [DOMHTMLButtonElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_name(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_name, :webkit_dom_html_button_element_get_name, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_name(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_name, :webkit_dom_html_button_element_set_name, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_value(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_value, :webkit_dom_html_button_element_get_value, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_set_value(self, value)
  # @param [DOMHTMLButtonElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_button_element_set_value, :webkit_dom_html_button_element_set_value, [DOMHTMLButtonElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_will_validate(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_button_element_get_will_validate, :webkit_dom_html_button_element_get_will_validate, [DOMHTMLButtonElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_validation_message(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_button_element_get_validation_message, :webkit_dom_html_button_element_get_validation_message, [DOMHTMLButtonElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_button_element_get_labels(self)
  # @param [DOMHTMLButtonElement] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_html_button_element_get_labels, :webkit_dom_html_button_element_get_labels, [DOMHTMLButtonElement], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLCanvasElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLCanvasElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_canvas_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_canvas_element_get_type, :webkit_dom_html_canvas_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_canvas_element_get_width(self)
  # @param [DOMHTMLCanvasElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_canvas_element_get_width, :webkit_dom_html_canvas_element_get_width, [DOMHTMLCanvasElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_canvas_element_set_width(self, value)
  # @param [DOMHTMLCanvasElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_canvas_element_set_width, :webkit_dom_html_canvas_element_set_width, [DOMHTMLCanvasElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_canvas_element_get_height(self)
  # @param [DOMHTMLCanvasElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_canvas_element_get_height, :webkit_dom_html_canvas_element_get_height, [DOMHTMLCanvasElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_canvas_element_set_height(self, value)
  # @param [DOMHTMLCanvasElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_canvas_element_set_height, :webkit_dom_html_canvas_element_set_height, [DOMHTMLCanvasElement, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMHTMLCollection < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMHTMLCollectionClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_collection_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_collection_get_type, :webkit_dom_html_collection_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_collection_item(self, index)
  # @param [DOMHTMLCollection] self 
  # @param [Integer] index 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_html_collection_item, :webkit_dom_html_collection_item, [DOMHTMLCollection, :ulong], DOMNode
  
  # (Not documented)
  # 
  # @method dom_html_collection_named_item(self, name)
  # @param [DOMHTMLCollection] self 
  # @param [String] name 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_html_collection_named_item, :webkit_dom_html_collection_named_item, [DOMHTMLCollection, :string], DOMNode
  
  # (Not documented)
  # 
  # @method dom_html_collection_get_length(self)
  # @param [DOMHTMLCollection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_collection_get_length, :webkit_dom_html_collection_get_length, [DOMHTMLCollection], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLDListElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLDListElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmld_list_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmld_list_element_get_type, :webkit_dom_htmld_list_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmld_list_element_get_compact(self)
  # @param [DOMHTMLDListElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmld_list_element_get_compact, :webkit_dom_htmld_list_element_get_compact, [DOMHTMLDListElement], :int
  
  # (Not documented)
  # 
  # @method dom_htmld_list_element_set_compact(self, value)
  # @param [DOMHTMLDListElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmld_list_element_set_compact, :webkit_dom_htmld_list_element_set_compact, [DOMHTMLDListElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLDetailsElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLDetailsElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_details_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_details_element_get_type, :webkit_dom_html_details_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_details_element_get_open(self)
  # @param [DOMHTMLDetailsElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_details_element_get_open, :webkit_dom_html_details_element_get_open, [DOMHTMLDetailsElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_details_element_set_open(self, value)
  # @param [DOMHTMLDetailsElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_details_element_set_open, :webkit_dom_html_details_element_set_open, [DOMHTMLDetailsElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLDirectoryElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLDirectoryElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_directory_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_directory_element_get_type, :webkit_dom_html_directory_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_directory_element_get_compact(self)
  # @param [DOMHTMLDirectoryElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_directory_element_get_compact, :webkit_dom_html_directory_element_get_compact, [DOMHTMLDirectoryElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_directory_element_set_compact(self, value)
  # @param [DOMHTMLDirectoryElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_directory_element_set_compact, :webkit_dom_html_directory_element_set_compact, [DOMHTMLDirectoryElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLDivElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLDivElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_div_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_div_element_get_type, :webkit_dom_html_div_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_div_element_get_align(self)
  # @param [DOMHTMLDivElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_div_element_get_align, :webkit_dom_html_div_element_get_align, [DOMHTMLDivElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_div_element_set_align(self, value)
  # @param [DOMHTMLDivElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_div_element_set_align, :webkit_dom_html_div_element_set_align, [DOMHTMLDivElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMDocument) 
  class DOMHTMLDocument < FFI::Struct
    layout :parent_instance, DOMDocument.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMDocumentClass) 
  class DOMHTMLDocumentClass < FFI::Struct
    layout :parent_class, DOMDocumentClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_document_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_document_get_type, :webkit_dom_html_document_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_document_close(self)
  # @param [DOMHTMLDocument] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_close, :webkit_dom_html_document_close, [DOMHTMLDocument], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_clear(self)
  # @param [DOMHTMLDocument] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_clear, :webkit_dom_html_document_clear, [DOMHTMLDocument], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_capture_events(self)
  # @param [DOMHTMLDocument] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_capture_events, :webkit_dom_html_document_capture_events, [DOMHTMLDocument], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_release_events(self)
  # @param [DOMHTMLDocument] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_release_events, :webkit_dom_html_document_release_events, [DOMHTMLDocument], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_has_focus(self)
  # @param [DOMHTMLDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_document_has_focus, :webkit_dom_html_document_has_focus, [DOMHTMLDocument], :int
  
  # (Not documented)
  # 
  # @method dom_html_document_get_embeds(self)
  # @param [DOMHTMLDocument] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_document_get_embeds, :webkit_dom_html_document_get_embeds, [DOMHTMLDocument], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_document_get_plugins(self)
  # @param [DOMHTMLDocument] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_document_get_plugins, :webkit_dom_html_document_get_plugins, [DOMHTMLDocument], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_document_get_scripts(self)
  # @param [DOMHTMLDocument] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_document_get_scripts, :webkit_dom_html_document_get_scripts, [DOMHTMLDocument], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_document_get_width(self)
  # @param [DOMHTMLDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_document_get_width, :webkit_dom_html_document_get_width, [DOMHTMLDocument], :long
  
  # (Not documented)
  # 
  # @method dom_html_document_get_height(self)
  # @param [DOMHTMLDocument] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_document_get_height, :webkit_dom_html_document_get_height, [DOMHTMLDocument], :long
  
  # (Not documented)
  # 
  # @method dom_html_document_get_dir(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_dir, :webkit_dom_html_document_get_dir, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_dir(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_dir, :webkit_dom_html_document_set_dir, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_design_mode(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_design_mode, :webkit_dom_html_document_get_design_mode, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_design_mode(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_design_mode, :webkit_dom_html_document_set_design_mode, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_compat_mode(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_compat_mode, :webkit_dom_html_document_get_compat_mode, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_get_active_element(self)
  # @param [DOMHTMLDocument] self 
  # @return [DOMElement] 
  # @scope class
  attach_function :dom_html_document_get_active_element, :webkit_dom_html_document_get_active_element, [DOMHTMLDocument], DOMElement
  
  # (Not documented)
  # 
  # @method dom_html_document_get_bg_color(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_bg_color, :webkit_dom_html_document_get_bg_color, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_bg_color(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_bg_color, :webkit_dom_html_document_set_bg_color, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_fg_color(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_fg_color, :webkit_dom_html_document_get_fg_color, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_fg_color(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_fg_color, :webkit_dom_html_document_set_fg_color, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_alink_color(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_alink_color, :webkit_dom_html_document_get_alink_color, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_alink_color(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_alink_color, :webkit_dom_html_document_set_alink_color, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_link_color(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_link_color, :webkit_dom_html_document_get_link_color, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_link_color(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_link_color, :webkit_dom_html_document_set_link_color, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_document_get_vlink_color(self)
  # @param [DOMHTMLDocument] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_document_get_vlink_color, :webkit_dom_html_document_get_vlink_color, [DOMHTMLDocument], :string
  
  # (Not documented)
  # 
  # @method dom_html_document_set_vlink_color(self, value)
  # @param [DOMHTMLDocument] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_document_set_vlink_color, :webkit_dom_html_document_set_vlink_color, [DOMHTMLDocument, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLEmbedElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLEmbedElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_embed_element_get_type, :webkit_dom_html_embed_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_align(self)
  # @param [DOMHTMLEmbedElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_embed_element_get_align, :webkit_dom_html_embed_element_get_align, [DOMHTMLEmbedElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_set_align(self, value)
  # @param [DOMHTMLEmbedElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_embed_element_set_align, :webkit_dom_html_embed_element_set_align, [DOMHTMLEmbedElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_height(self)
  # @param [DOMHTMLEmbedElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_embed_element_get_height, :webkit_dom_html_embed_element_get_height, [DOMHTMLEmbedElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_set_height(self, value)
  # @param [DOMHTMLEmbedElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_embed_element_set_height, :webkit_dom_html_embed_element_set_height, [DOMHTMLEmbedElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_name(self)
  # @param [DOMHTMLEmbedElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_embed_element_get_name, :webkit_dom_html_embed_element_get_name, [DOMHTMLEmbedElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_set_name(self, value)
  # @param [DOMHTMLEmbedElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_embed_element_set_name, :webkit_dom_html_embed_element_set_name, [DOMHTMLEmbedElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_src(self)
  # @param [DOMHTMLEmbedElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_embed_element_get_src, :webkit_dom_html_embed_element_get_src, [DOMHTMLEmbedElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_set_src(self, value)
  # @param [DOMHTMLEmbedElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_embed_element_set_src, :webkit_dom_html_embed_element_set_src, [DOMHTMLEmbedElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_get_width(self)
  # @param [DOMHTMLEmbedElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_embed_element_get_width, :webkit_dom_html_embed_element_get_width, [DOMHTMLEmbedElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_embed_element_set_width(self, value)
  # @param [DOMHTMLEmbedElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_embed_element_set_width, :webkit_dom_html_embed_element_set_width, [DOMHTMLEmbedElement, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLFieldSetElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLFieldSetElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_field_set_element_get_type, :webkit_dom_html_field_set_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_check_validity(self)
  # @param [DOMHTMLFieldSetElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_field_set_element_check_validity, :webkit_dom_html_field_set_element_check_validity, [DOMHTMLFieldSetElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_set_custom_validity(self, error)
  # @param [DOMHTMLFieldSetElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_field_set_element_set_custom_validity, :webkit_dom_html_field_set_element_set_custom_validity, [DOMHTMLFieldSetElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_get_form(self)
  # @param [DOMHTMLFieldSetElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLFormElement)] 
  # @scope class
  attach_function :dom_html_field_set_element_get_form, :webkit_dom_html_field_set_element_get_form, [DOMHTMLFieldSetElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_get_validity(self)
  # @param [DOMHTMLFieldSetElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_field_set_element_get_validity, :webkit_dom_html_field_set_element_get_validity, [DOMHTMLFieldSetElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_get_will_validate(self)
  # @param [DOMHTMLFieldSetElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_field_set_element_get_will_validate, :webkit_dom_html_field_set_element_get_will_validate, [DOMHTMLFieldSetElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_field_set_element_get_validation_message(self)
  # @param [DOMHTMLFieldSetElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_field_set_element_get_validation_message, :webkit_dom_html_field_set_element_get_validation_message, [DOMHTMLFieldSetElement], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLFontElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLFontElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_font_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_font_element_get_type, :webkit_dom_html_font_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_font_element_get_color(self)
  # @param [DOMHTMLFontElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_font_element_get_color, :webkit_dom_html_font_element_get_color, [DOMHTMLFontElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_font_element_set_color(self, value)
  # @param [DOMHTMLFontElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_font_element_set_color, :webkit_dom_html_font_element_set_color, [DOMHTMLFontElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_font_element_get_face(self)
  # @param [DOMHTMLFontElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_font_element_get_face, :webkit_dom_html_font_element_get_face, [DOMHTMLFontElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_font_element_set_face(self, value)
  # @param [DOMHTMLFontElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_font_element_set_face, :webkit_dom_html_font_element_set_face, [DOMHTMLFontElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_font_element_get_size(self)
  # @param [DOMHTMLFontElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_font_element_get_size, :webkit_dom_html_font_element_get_size, [DOMHTMLFontElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_font_element_set_size(self, value)
  # @param [DOMHTMLFontElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_font_element_set_size, :webkit_dom_html_font_element_set_size, [DOMHTMLFontElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLFormElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLFormElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_form_element_get_type, :webkit_dom_html_form_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_form_element_submit(self)
  # @param [DOMHTMLFormElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_submit, :webkit_dom_html_form_element_submit, [DOMHTMLFormElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_reset(self)
  # @param [DOMHTMLFormElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_reset, :webkit_dom_html_form_element_reset, [DOMHTMLFormElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_check_validity(self)
  # @param [DOMHTMLFormElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_form_element_check_validity, :webkit_dom_html_form_element_check_validity, [DOMHTMLFormElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_elements(self)
  # @param [DOMHTMLFormElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_form_element_get_elements, :webkit_dom_html_form_element_get_elements, [DOMHTMLFormElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_length(self)
  # @param [DOMHTMLFormElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_form_element_get_length, :webkit_dom_html_form_element_get_length, [DOMHTMLFormElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_name(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_name, :webkit_dom_html_form_element_get_name, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_name(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_name, :webkit_dom_html_form_element_set_name, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_no_validate(self)
  # @param [DOMHTMLFormElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_form_element_get_no_validate, :webkit_dom_html_form_element_get_no_validate, [DOMHTMLFormElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_no_validate(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_no_validate, :webkit_dom_html_form_element_set_no_validate, [DOMHTMLFormElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_accept_charset(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_accept_charset, :webkit_dom_html_form_element_get_accept_charset, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_accept_charset(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_accept_charset, :webkit_dom_html_form_element_set_accept_charset, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_action(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_action, :webkit_dom_html_form_element_get_action, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_action(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_action, :webkit_dom_html_form_element_set_action, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_encoding(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_encoding, :webkit_dom_html_form_element_get_encoding, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_encoding(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_encoding, :webkit_dom_html_form_element_set_encoding, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_enctype(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_enctype, :webkit_dom_html_form_element_get_enctype, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_enctype(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_enctype, :webkit_dom_html_form_element_set_enctype, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_method(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_method, :webkit_dom_html_form_element_get_method, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_method(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_method, :webkit_dom_html_form_element_set_method, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_target(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_target, :webkit_dom_html_form_element_get_target, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_target(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_target, :webkit_dom_html_form_element_set_target, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_form_element_get_autocomplete(self)
  # @param [DOMHTMLFormElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_form_element_get_autocomplete, :webkit_dom_html_form_element_get_autocomplete, [DOMHTMLFormElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_form_element_set_autocomplete(self, value)
  # @param [DOMHTMLFormElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_form_element_set_autocomplete, :webkit_dom_html_form_element_set_autocomplete, [DOMHTMLFormElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLFrameElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLFrameElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_frame_element_get_type, :webkit_dom_html_frame_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_frame_border(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_frame_border, :webkit_dom_html_frame_element_get_frame_border, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_frame_border(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_frame_border, :webkit_dom_html_frame_element_set_frame_border, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_long_desc(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_long_desc, :webkit_dom_html_frame_element_get_long_desc, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_long_desc(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_long_desc, :webkit_dom_html_frame_element_set_long_desc, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_margin_height(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_margin_height, :webkit_dom_html_frame_element_get_margin_height, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_margin_height(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_margin_height, :webkit_dom_html_frame_element_set_margin_height, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_margin_width(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_margin_width, :webkit_dom_html_frame_element_get_margin_width, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_margin_width(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_margin_width, :webkit_dom_html_frame_element_set_margin_width, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_name(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_name, :webkit_dom_html_frame_element_get_name, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_name(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_name, :webkit_dom_html_frame_element_set_name, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_no_resize(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_frame_element_get_no_resize, :webkit_dom_html_frame_element_get_no_resize, [DOMHTMLFrameElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_no_resize(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_no_resize, :webkit_dom_html_frame_element_set_no_resize, [DOMHTMLFrameElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_scrolling(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_scrolling, :webkit_dom_html_frame_element_get_scrolling, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_scrolling(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_scrolling, :webkit_dom_html_frame_element_set_scrolling, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_src(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_element_get_src, :webkit_dom_html_frame_element_get_src, [DOMHTMLFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_set_src(self, value)
  # @param [DOMHTMLFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_element_set_src, :webkit_dom_html_frame_element_set_src, [DOMHTMLFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_content_document(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [DOMDocument] 
  # @scope class
  attach_function :dom_html_frame_element_get_content_document, :webkit_dom_html_frame_element_get_content_document, [DOMHTMLFrameElement], DOMDocument
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_content_window(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_html_frame_element_get_content_window, :webkit_dom_html_frame_element_get_content_window, [DOMHTMLFrameElement], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_width(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_frame_element_get_width, :webkit_dom_html_frame_element_get_width, [DOMHTMLFrameElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_frame_element_get_height(self)
  # @param [DOMHTMLFrameElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_frame_element_get_height, :webkit_dom_html_frame_element_get_height, [DOMHTMLFrameElement], :long
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLFrameSetElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLFrameSetElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_frame_set_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_frame_set_element_get_type, :webkit_dom_html_frame_set_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_frame_set_element_get_cols(self)
  # @param [DOMHTMLFrameSetElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_set_element_get_cols, :webkit_dom_html_frame_set_element_get_cols, [DOMHTMLFrameSetElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_set_element_set_cols(self, value)
  # @param [DOMHTMLFrameSetElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_set_element_set_cols, :webkit_dom_html_frame_set_element_set_cols, [DOMHTMLFrameSetElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_frame_set_element_get_rows(self)
  # @param [DOMHTMLFrameSetElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_frame_set_element_get_rows, :webkit_dom_html_frame_set_element_get_rows, [DOMHTMLFrameSetElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_frame_set_element_set_rows(self, value)
  # @param [DOMHTMLFrameSetElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_frame_set_element_set_rows, :webkit_dom_html_frame_set_element_set_rows, [DOMHTMLFrameSetElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLHRElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLHRElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlhr_element_get_type, :webkit_dom_htmlhr_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_get_align(self)
  # @param [DOMHTMLHRElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_htmlhr_element_get_align, :webkit_dom_htmlhr_element_get_align, [DOMHTMLHRElement], :string
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_set_align(self, value)
  # @param [DOMHTMLHRElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlhr_element_set_align, :webkit_dom_htmlhr_element_set_align, [DOMHTMLHRElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_get_no_shade(self)
  # @param [DOMHTMLHRElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlhr_element_get_no_shade, :webkit_dom_htmlhr_element_get_no_shade, [DOMHTMLHRElement], :int
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_set_no_shade(self, value)
  # @param [DOMHTMLHRElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlhr_element_set_no_shade, :webkit_dom_htmlhr_element_set_no_shade, [DOMHTMLHRElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_get_size(self)
  # @param [DOMHTMLHRElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_htmlhr_element_get_size, :webkit_dom_htmlhr_element_get_size, [DOMHTMLHRElement], :string
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_set_size(self, value)
  # @param [DOMHTMLHRElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlhr_element_set_size, :webkit_dom_htmlhr_element_set_size, [DOMHTMLHRElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_get_width(self)
  # @param [DOMHTMLHRElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_htmlhr_element_get_width, :webkit_dom_htmlhr_element_get_width, [DOMHTMLHRElement], :string
  
  # (Not documented)
  # 
  # @method dom_htmlhr_element_set_width(self, value)
  # @param [DOMHTMLHRElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlhr_element_set_width, :webkit_dom_htmlhr_element_set_width, [DOMHTMLHRElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLHeadElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLHeadElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_head_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_head_element_get_type, :webkit_dom_html_head_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_head_element_get_profile(self)
  # @param [DOMHTMLHeadElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_head_element_get_profile, :webkit_dom_html_head_element_get_profile, [DOMHTMLHeadElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_head_element_set_profile(self, value)
  # @param [DOMHTMLHeadElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_head_element_set_profile, :webkit_dom_html_head_element_set_profile, [DOMHTMLHeadElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLHeadingElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLHeadingElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_heading_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_heading_element_get_type, :webkit_dom_html_heading_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_heading_element_get_align(self)
  # @param [DOMHTMLHeadingElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_heading_element_get_align, :webkit_dom_html_heading_element_get_align, [DOMHTMLHeadingElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_heading_element_set_align(self, value)
  # @param [DOMHTMLHeadingElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_heading_element_set_align, :webkit_dom_html_heading_element_set_align, [DOMHTMLHeadingElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLHtmlElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLHtmlElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_html_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_html_element_get_type, :webkit_dom_html_html_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_html_element_get_version(self)
  # @param [DOMHTMLHtmlElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_html_element_get_version, :webkit_dom_html_html_element_get_version, [DOMHTMLHtmlElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_html_element_set_version(self, value)
  # @param [DOMHTMLHtmlElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_html_element_set_version, :webkit_dom_html_html_element_set_version, [DOMHTMLHtmlElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_html_element_get_manifest(self)
  # @param [DOMHTMLHtmlElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_html_element_get_manifest, :webkit_dom_html_html_element_get_manifest, [DOMHTMLHtmlElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_html_element_set_manifest(self, value)
  # @param [DOMHTMLHtmlElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_html_element_set_manifest, :webkit_dom_html_html_element_set_manifest, [DOMHTMLHtmlElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLIFrameElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLIFrameElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_iframe_element_get_type, :webkit_dom_html_iframe_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_align(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_align, :webkit_dom_html_iframe_element_get_align, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_align(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_align, :webkit_dom_html_iframe_element_set_align, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_frame_border(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_frame_border, :webkit_dom_html_iframe_element_get_frame_border, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_frame_border(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_frame_border, :webkit_dom_html_iframe_element_set_frame_border, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_height(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_height, :webkit_dom_html_iframe_element_get_height, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_height(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_height, :webkit_dom_html_iframe_element_set_height, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_long_desc(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_long_desc, :webkit_dom_html_iframe_element_get_long_desc, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_long_desc(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_long_desc, :webkit_dom_html_iframe_element_set_long_desc, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_margin_height(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_margin_height, :webkit_dom_html_iframe_element_get_margin_height, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_margin_height(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_margin_height, :webkit_dom_html_iframe_element_set_margin_height, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_margin_width(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_margin_width, :webkit_dom_html_iframe_element_get_margin_width, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_margin_width(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_margin_width, :webkit_dom_html_iframe_element_set_margin_width, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_name(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_name, :webkit_dom_html_iframe_element_get_name, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_name(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_name, :webkit_dom_html_iframe_element_set_name, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_sandbox(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_sandbox, :webkit_dom_html_iframe_element_get_sandbox, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_sandbox(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_sandbox, :webkit_dom_html_iframe_element_set_sandbox, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_scrolling(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_scrolling, :webkit_dom_html_iframe_element_get_scrolling, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_scrolling(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_scrolling, :webkit_dom_html_iframe_element_set_scrolling, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_src(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_src, :webkit_dom_html_iframe_element_get_src, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_src(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_src, :webkit_dom_html_iframe_element_set_src, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_width(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_iframe_element_get_width, :webkit_dom_html_iframe_element_get_width, [DOMHTMLIFrameElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_set_width(self, value)
  # @param [DOMHTMLIFrameElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_iframe_element_set_width, :webkit_dom_html_iframe_element_set_width, [DOMHTMLIFrameElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_content_document(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [DOMDocument] 
  # @scope class
  attach_function :dom_html_iframe_element_get_content_document, :webkit_dom_html_iframe_element_get_content_document, [DOMHTMLIFrameElement], DOMDocument
  
  # (Not documented)
  # 
  # @method dom_html_iframe_element_get_content_window(self)
  # @param [DOMHTMLIFrameElement] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_html_iframe_element_get_content_window, :webkit_dom_html_iframe_element_get_content_window, [DOMHTMLIFrameElement], DOMDOMWindow
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLImageElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLImageElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_type, :webkit_dom_html_image_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_name(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_name, :webkit_dom_html_image_element_get_name, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_name(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_name, :webkit_dom_html_image_element_set_name, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_align(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_align, :webkit_dom_html_image_element_get_align, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_align(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_align, :webkit_dom_html_image_element_set_align, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_alt(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_alt, :webkit_dom_html_image_element_get_alt, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_alt(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_alt, :webkit_dom_html_image_element_set_alt, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_border(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_border, :webkit_dom_html_image_element_get_border, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_border(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_border, :webkit_dom_html_image_element_set_border, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_cross_origin(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_cross_origin, :webkit_dom_html_image_element_get_cross_origin, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_cross_origin(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_cross_origin, :webkit_dom_html_image_element_set_cross_origin, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_height(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_height, :webkit_dom_html_image_element_get_height, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_height(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_height, :webkit_dom_html_image_element_set_height, [DOMHTMLImageElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_hspace(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_hspace, :webkit_dom_html_image_element_get_hspace, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_hspace(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_hspace, :webkit_dom_html_image_element_set_hspace, [DOMHTMLImageElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_is_map(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_is_map, :webkit_dom_html_image_element_get_is_map, [DOMHTMLImageElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_is_map(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_is_map, :webkit_dom_html_image_element_set_is_map, [DOMHTMLImageElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_long_desc(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_long_desc, :webkit_dom_html_image_element_get_long_desc, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_long_desc(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_long_desc, :webkit_dom_html_image_element_set_long_desc, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_src(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_src, :webkit_dom_html_image_element_get_src, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_src(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_src, :webkit_dom_html_image_element_set_src, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_use_map(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_use_map, :webkit_dom_html_image_element_get_use_map, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_use_map(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_use_map, :webkit_dom_html_image_element_set_use_map, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_vspace(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_vspace, :webkit_dom_html_image_element_get_vspace, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_vspace(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_vspace, :webkit_dom_html_image_element_set_vspace, [DOMHTMLImageElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_width(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_width, :webkit_dom_html_image_element_get_width, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_width(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_width, :webkit_dom_html_image_element_set_width, [DOMHTMLImageElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_complete(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_complete, :webkit_dom_html_image_element_get_complete, [DOMHTMLImageElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_lowsrc(self)
  # @param [DOMHTMLImageElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_image_element_get_lowsrc, :webkit_dom_html_image_element_get_lowsrc, [DOMHTMLImageElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_image_element_set_lowsrc(self, value)
  # @param [DOMHTMLImageElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_image_element_set_lowsrc, :webkit_dom_html_image_element_set_lowsrc, [DOMHTMLImageElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_natural_height(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_natural_height, :webkit_dom_html_image_element_get_natural_height, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_natural_width(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_natural_width, :webkit_dom_html_image_element_get_natural_width, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_x(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_x, :webkit_dom_html_image_element_get_x, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_image_element_get_y(self)
  # @param [DOMHTMLImageElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_image_element_get_y, :webkit_dom_html_image_element_get_y, [DOMHTMLImageElement], :long
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLInputElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLInputElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_type, :webkit_dom_html_input_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_input_element_step_up(self, n, error)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] n 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_step_up, :webkit_dom_html_input_element_step_up, [DOMHTMLInputElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_step_down(self, n, error)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] n 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_step_down, :webkit_dom_html_input_element_step_down, [DOMHTMLInputElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_check_validity(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_check_validity, :webkit_dom_html_input_element_check_validity, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_custom_validity(self, error)
  # @param [DOMHTMLInputElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_custom_validity, :webkit_dom_html_input_element_set_custom_validity, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_select(self)
  # @param [DOMHTMLInputElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_select, :webkit_dom_html_input_element_select, [DOMHTMLInputElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_click(self)
  # @param [DOMHTMLInputElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_click, :webkit_dom_html_input_element_click, [DOMHTMLInputElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_value_for_user(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_value_for_user, :webkit_dom_html_input_element_set_value_for_user, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_default_value(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_default_value, :webkit_dom_html_input_element_get_default_value, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_default_value(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_default_value, :webkit_dom_html_input_element_set_default_value, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_default_checked(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_default_checked, :webkit_dom_html_input_element_get_default_checked, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_default_checked(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_default_checked, :webkit_dom_html_input_element_set_default_checked, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form(self)
  # @param [DOMHTMLInputElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_input_element_get_form, :webkit_dom_html_input_element_get_form, [DOMHTMLInputElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form_action(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_form_action, :webkit_dom_html_input_element_get_form_action, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_form_action(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_form_action, :webkit_dom_html_input_element_set_form_action, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form_enctype(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_form_enctype, :webkit_dom_html_input_element_get_form_enctype, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_form_enctype(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_form_enctype, :webkit_dom_html_input_element_set_form_enctype, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form_method(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_form_method, :webkit_dom_html_input_element_get_form_method, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_form_method(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_form_method, :webkit_dom_html_input_element_set_form_method, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form_no_validate(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_form_no_validate, :webkit_dom_html_input_element_get_form_no_validate, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_form_no_validate(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_form_no_validate, :webkit_dom_html_input_element_set_form_no_validate, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_form_target(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_form_target, :webkit_dom_html_input_element_get_form_target, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_form_target(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_form_target, :webkit_dom_html_input_element_set_form_target, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_validity(self)
  # @param [DOMHTMLInputElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_input_element_get_validity, :webkit_dom_html_input_element_get_validity, [DOMHTMLInputElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_accept(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_accept, :webkit_dom_html_input_element_get_accept, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_accept(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_accept, :webkit_dom_html_input_element_set_accept, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_access_key(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_access_key, :webkit_dom_html_input_element_get_access_key, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_access_key(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_access_key, :webkit_dom_html_input_element_set_access_key, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_align(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_align, :webkit_dom_html_input_element_get_align, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_align(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_align, :webkit_dom_html_input_element_set_align, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_alt(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_alt, :webkit_dom_html_input_element_get_alt, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_alt(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_alt, :webkit_dom_html_input_element_set_alt, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_checked(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_checked, :webkit_dom_html_input_element_get_checked, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_checked(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_checked, :webkit_dom_html_input_element_set_checked, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_disabled(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_disabled, :webkit_dom_html_input_element_get_disabled, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_disabled(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_disabled, :webkit_dom_html_input_element_set_disabled, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_autofocus(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_autofocus, :webkit_dom_html_input_element_get_autofocus, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_autofocus(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_autofocus, :webkit_dom_html_input_element_set_autofocus, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_autocomplete(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_autocomplete, :webkit_dom_html_input_element_get_autocomplete, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_autocomplete(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_autocomplete, :webkit_dom_html_input_element_set_autocomplete, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_list(self)
  # @param [DOMHTMLInputElement] self 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_input_element_get_list, :webkit_dom_html_input_element_get_list, [DOMHTMLInputElement], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_max(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_max, :webkit_dom_html_input_element_get_max, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_max(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_max, :webkit_dom_html_input_element_set_max, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_max_length(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_max_length, :webkit_dom_html_input_element_get_max_length, [DOMHTMLInputElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_max_length(self, value, error)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_max_length, :webkit_dom_html_input_element_set_max_length, [DOMHTMLInputElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_min(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_min, :webkit_dom_html_input_element_get_min, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_min(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_min, :webkit_dom_html_input_element_set_min, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_multiple(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_multiple, :webkit_dom_html_input_element_get_multiple, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_multiple(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_multiple, :webkit_dom_html_input_element_set_multiple, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_webkitdirectory(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_webkitdirectory, :webkit_dom_html_input_element_get_webkitdirectory, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_webkitdirectory(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_webkitdirectory, :webkit_dom_html_input_element_set_webkitdirectory, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_name(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_name, :webkit_dom_html_input_element_get_name, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_name(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_name, :webkit_dom_html_input_element_set_name, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_pattern(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_pattern, :webkit_dom_html_input_element_get_pattern, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_pattern(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_pattern, :webkit_dom_html_input_element_set_pattern, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_placeholder(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_placeholder, :webkit_dom_html_input_element_get_placeholder, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_placeholder(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_placeholder, :webkit_dom_html_input_element_set_placeholder, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_read_only(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_read_only, :webkit_dom_html_input_element_get_read_only, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_read_only(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_read_only, :webkit_dom_html_input_element_set_read_only, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_required(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_required, :webkit_dom_html_input_element_get_required, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_required(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_required, :webkit_dom_html_input_element_set_required, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_size(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_size, :webkit_dom_html_input_element_get_size, [DOMHTMLInputElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_size(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_size, :webkit_dom_html_input_element_set_size, [DOMHTMLInputElement, :ulong], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_src(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_src, :webkit_dom_html_input_element_get_src, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_src(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_src, :webkit_dom_html_input_element_set_src, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_step(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_step, :webkit_dom_html_input_element_get_step, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_step(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_step, :webkit_dom_html_input_element_set_step, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_use_map(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_use_map, :webkit_dom_html_input_element_get_use_map, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_use_map(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_use_map, :webkit_dom_html_input_element_set_use_map, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_value(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_value, :webkit_dom_html_input_element_get_value, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_value(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_value, :webkit_dom_html_input_element_set_value, [DOMHTMLInputElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_value_as_number(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_html_input_element_get_value_as_number, :webkit_dom_html_input_element_get_value_as_number, [DOMHTMLInputElement], :double
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_value_as_number(self, value, error)
  # @param [DOMHTMLInputElement] self 
  # @param [Float] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_value_as_number, :webkit_dom_html_input_element_set_value_as_number, [DOMHTMLInputElement, :double, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_selected_option(self)
  # @param [DOMHTMLInputElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLOptionElement)] 
  # @scope class
  attach_function :dom_html_input_element_get_selected_option, :webkit_dom_html_input_element_get_selected_option, [DOMHTMLInputElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_incremental(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_incremental, :webkit_dom_html_input_element_get_incremental, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_incremental(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_incremental, :webkit_dom_html_input_element_set_incremental, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_will_validate(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_will_validate, :webkit_dom_html_input_element_get_will_validate, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_validation_message(self)
  # @param [DOMHTMLInputElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_input_element_get_validation_message, :webkit_dom_html_input_element_get_validation_message, [DOMHTMLInputElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_indeterminate(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_indeterminate, :webkit_dom_html_input_element_get_indeterminate, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_indeterminate(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_indeterminate, :webkit_dom_html_input_element_set_indeterminate, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_files(self)
  # @param [DOMHTMLInputElement] self 
  # @return [DOMFileList] 
  # @scope class
  attach_function :dom_html_input_element_get_files, :webkit_dom_html_input_element_get_files, [DOMHTMLInputElement], DOMFileList
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_labels(self)
  # @param [DOMHTMLInputElement] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_html_input_element_get_labels, :webkit_dom_html_input_element_get_labels, [DOMHTMLInputElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_webkit_speech(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_webkit_speech, :webkit_dom_html_input_element_get_webkit_speech, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_webkit_speech(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_webkit_speech, :webkit_dom_html_input_element_set_webkit_speech, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_input_element_get_webkit_grammar(self)
  # @param [DOMHTMLInputElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_input_element_get_webkit_grammar, :webkit_dom_html_input_element_get_webkit_grammar, [DOMHTMLInputElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_input_element_set_webkit_grammar(self, value)
  # @param [DOMHTMLInputElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_input_element_set_webkit_grammar, :webkit_dom_html_input_element_set_webkit_grammar, [DOMHTMLInputElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLInputElement) 
  class DOMHTMLIsIndexElement < FFI::Struct
    layout :parent_instance, DOMHTMLInputElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLInputElementClass) 
  class DOMHTMLIsIndexElementClass < FFI::Struct
    layout :parent_class, DOMHTMLInputElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_is_index_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_is_index_element_get_type, :webkit_dom_html_is_index_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_is_index_element_get_form(self)
  # @param [DOMHTMLIsIndexElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_is_index_element_get_form, :webkit_dom_html_is_index_element_get_form, [DOMHTMLIsIndexElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_is_index_element_get_prompt(self)
  # @param [DOMHTMLIsIndexElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_is_index_element_get_prompt, :webkit_dom_html_is_index_element_get_prompt, [DOMHTMLIsIndexElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_is_index_element_set_prompt(self, value)
  # @param [DOMHTMLIsIndexElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_is_index_element_set_prompt, :webkit_dom_html_is_index_element_set_prompt, [DOMHTMLIsIndexElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLKeygenElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLKeygenElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_keygen_element_get_type, :webkit_dom_html_keygen_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_check_validity(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_keygen_element_check_validity, :webkit_dom_html_keygen_element_check_validity, [DOMHTMLKeygenElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_custom_validity(self, error)
  # @param [DOMHTMLKeygenElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_custom_validity, :webkit_dom_html_keygen_element_set_custom_validity, [DOMHTMLKeygenElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_autofocus(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_keygen_element_get_autofocus, :webkit_dom_html_keygen_element_get_autofocus, [DOMHTMLKeygenElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_autofocus(self, value)
  # @param [DOMHTMLKeygenElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_autofocus, :webkit_dom_html_keygen_element_set_autofocus, [DOMHTMLKeygenElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_challenge(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_keygen_element_get_challenge, :webkit_dom_html_keygen_element_get_challenge, [DOMHTMLKeygenElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_challenge(self, value)
  # @param [DOMHTMLKeygenElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_challenge, :webkit_dom_html_keygen_element_set_challenge, [DOMHTMLKeygenElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_disabled(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_keygen_element_get_disabled, :webkit_dom_html_keygen_element_get_disabled, [DOMHTMLKeygenElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_disabled(self, value)
  # @param [DOMHTMLKeygenElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_disabled, :webkit_dom_html_keygen_element_set_disabled, [DOMHTMLKeygenElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_form(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_keygen_element_get_form, :webkit_dom_html_keygen_element_get_form, [DOMHTMLKeygenElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_keytype(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_keygen_element_get_keytype, :webkit_dom_html_keygen_element_get_keytype, [DOMHTMLKeygenElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_keytype(self, value)
  # @param [DOMHTMLKeygenElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_keytype, :webkit_dom_html_keygen_element_set_keytype, [DOMHTMLKeygenElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_name(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_keygen_element_get_name, :webkit_dom_html_keygen_element_get_name, [DOMHTMLKeygenElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_set_name(self, value)
  # @param [DOMHTMLKeygenElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_keygen_element_set_name, :webkit_dom_html_keygen_element_set_name, [DOMHTMLKeygenElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_will_validate(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_keygen_element_get_will_validate, :webkit_dom_html_keygen_element_get_will_validate, [DOMHTMLKeygenElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_validity(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_keygen_element_get_validity, :webkit_dom_html_keygen_element_get_validity, [DOMHTMLKeygenElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_validation_message(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_keygen_element_get_validation_message, :webkit_dom_html_keygen_element_get_validation_message, [DOMHTMLKeygenElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_keygen_element_get_labels(self)
  # @param [DOMHTMLKeygenElement] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_html_keygen_element_get_labels, :webkit_dom_html_keygen_element_get_labels, [DOMHTMLKeygenElement], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLLIElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLLIElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmlli_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlli_element_get_type, :webkit_dom_htmlli_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmlli_element_get_value(self)
  # @param [DOMHTMLLIElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlli_element_get_value, :webkit_dom_htmlli_element_get_value, [DOMHTMLLIElement], :long
  
  # (Not documented)
  # 
  # @method dom_htmlli_element_set_value(self, value)
  # @param [DOMHTMLLIElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlli_element_set_value, :webkit_dom_htmlli_element_set_value, [DOMHTMLLIElement, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLLabelElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLLabelElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_label_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_label_element_get_type, :webkit_dom_html_label_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_label_element_get_form(self)
  # @param [DOMHTMLLabelElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_label_element_get_form, :webkit_dom_html_label_element_get_form, [DOMHTMLLabelElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_label_element_get_access_key(self)
  # @param [DOMHTMLLabelElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_label_element_get_access_key, :webkit_dom_html_label_element_get_access_key, [DOMHTMLLabelElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_label_element_set_access_key(self, value)
  # @param [DOMHTMLLabelElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_label_element_set_access_key, :webkit_dom_html_label_element_set_access_key, [DOMHTMLLabelElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_label_element_get_html_for(self)
  # @param [DOMHTMLLabelElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_label_element_get_html_for, :webkit_dom_html_label_element_get_html_for, [DOMHTMLLabelElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_label_element_set_html_for(self, value)
  # @param [DOMHTMLLabelElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_label_element_set_html_for, :webkit_dom_html_label_element_set_html_for, [DOMHTMLLabelElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_label_element_get_control(self)
  # @param [DOMHTMLLabelElement] self 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_label_element_get_control, :webkit_dom_html_label_element_get_control, [DOMHTMLLabelElement], DOMHTMLElement
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLLegendElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLLegendElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_legend_element_get_type, :webkit_dom_html_legend_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_get_form(self)
  # @param [DOMHTMLLegendElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_legend_element_get_form, :webkit_dom_html_legend_element_get_form, [DOMHTMLLegendElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_get_access_key(self)
  # @param [DOMHTMLLegendElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_legend_element_get_access_key, :webkit_dom_html_legend_element_get_access_key, [DOMHTMLLegendElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_set_access_key(self, value)
  # @param [DOMHTMLLegendElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_legend_element_set_access_key, :webkit_dom_html_legend_element_set_access_key, [DOMHTMLLegendElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_get_align(self)
  # @param [DOMHTMLLegendElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_legend_element_get_align, :webkit_dom_html_legend_element_get_align, [DOMHTMLLegendElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_legend_element_set_align(self, value)
  # @param [DOMHTMLLegendElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_legend_element_set_align, :webkit_dom_html_legend_element_set_align, [DOMHTMLLegendElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLLinkElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLLinkElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_link_element_get_type, :webkit_dom_html_link_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_disabled(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_link_element_get_disabled, :webkit_dom_html_link_element_get_disabled, [DOMHTMLLinkElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_disabled(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_disabled, :webkit_dom_html_link_element_set_disabled, [DOMHTMLLinkElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_charset(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_charset, :webkit_dom_html_link_element_get_charset, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_charset(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_charset, :webkit_dom_html_link_element_set_charset, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_href(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_href, :webkit_dom_html_link_element_get_href, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_href(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_href, :webkit_dom_html_link_element_set_href, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_hreflang(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_hreflang, :webkit_dom_html_link_element_get_hreflang, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_hreflang(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_hreflang, :webkit_dom_html_link_element_set_hreflang, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_media(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_media, :webkit_dom_html_link_element_get_media, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_media(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_media, :webkit_dom_html_link_element_set_media, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_rel(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_rel, :webkit_dom_html_link_element_get_rel, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_rel(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_rel, :webkit_dom_html_link_element_set_rel, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_rev(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_rev, :webkit_dom_html_link_element_get_rev, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_rev(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_rev, :webkit_dom_html_link_element_set_rev, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_target(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_link_element_get_target, :webkit_dom_html_link_element_get_target, [DOMHTMLLinkElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_link_element_set_target(self, value)
  # @param [DOMHTMLLinkElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_link_element_set_target, :webkit_dom_html_link_element_set_target, [DOMHTMLLinkElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_link_element_get_sheet(self)
  # @param [DOMHTMLLinkElement] self 
  # @return [DOMStyleSheet] 
  # @scope class
  attach_function :dom_html_link_element_get_sheet, :webkit_dom_html_link_element_get_sheet, [DOMHTMLLinkElement], DOMStyleSheet
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLMapElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLMapElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_map_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_map_element_get_type, :webkit_dom_html_map_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_map_element_get_areas(self)
  # @param [DOMHTMLMapElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_map_element_get_areas, :webkit_dom_html_map_element_get_areas, [DOMHTMLMapElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_map_element_get_name(self)
  # @param [DOMHTMLMapElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_map_element_get_name, :webkit_dom_html_map_element_get_name, [DOMHTMLMapElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_map_element_set_name(self, value)
  # @param [DOMHTMLMapElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_map_element_set_name, :webkit_dom_html_map_element_set_name, [DOMHTMLMapElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLMarqueeElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLMarqueeElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_type, :webkit_dom_html_marquee_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_start(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_start, :webkit_dom_html_marquee_element_start, [DOMHTMLMarqueeElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_stop(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_stop, :webkit_dom_html_marquee_element_stop, [DOMHTMLMarqueeElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_behavior(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_marquee_element_get_behavior, :webkit_dom_html_marquee_element_get_behavior, [DOMHTMLMarqueeElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_behavior(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_behavior, :webkit_dom_html_marquee_element_set_behavior, [DOMHTMLMarqueeElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_bg_color(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_marquee_element_get_bg_color, :webkit_dom_html_marquee_element_get_bg_color, [DOMHTMLMarqueeElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_bg_color(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_bg_color, :webkit_dom_html_marquee_element_set_bg_color, [DOMHTMLMarqueeElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_direction(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_marquee_element_get_direction, :webkit_dom_html_marquee_element_get_direction, [DOMHTMLMarqueeElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_direction(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_direction, :webkit_dom_html_marquee_element_set_direction, [DOMHTMLMarqueeElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_height(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_marquee_element_get_height, :webkit_dom_html_marquee_element_get_height, [DOMHTMLMarqueeElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_height(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_height, :webkit_dom_html_marquee_element_set_height, [DOMHTMLMarqueeElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_hspace(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_hspace, :webkit_dom_html_marquee_element_get_hspace, [DOMHTMLMarqueeElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_hspace(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_hspace, :webkit_dom_html_marquee_element_set_hspace, [DOMHTMLMarqueeElement, :ulong], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_loop(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_loop, :webkit_dom_html_marquee_element_get_loop, [DOMHTMLMarqueeElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_loop(self, value, error)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_loop, :webkit_dom_html_marquee_element_set_loop, [DOMHTMLMarqueeElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_scroll_amount(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_scroll_amount, :webkit_dom_html_marquee_element_get_scroll_amount, [DOMHTMLMarqueeElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_scroll_amount(self, value, error)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_scroll_amount, :webkit_dom_html_marquee_element_set_scroll_amount, [DOMHTMLMarqueeElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_scroll_delay(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_scroll_delay, :webkit_dom_html_marquee_element_get_scroll_delay, [DOMHTMLMarqueeElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_scroll_delay(self, value, error)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_scroll_delay, :webkit_dom_html_marquee_element_set_scroll_delay, [DOMHTMLMarqueeElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_true_speed(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_true_speed, :webkit_dom_html_marquee_element_get_true_speed, [DOMHTMLMarqueeElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_true_speed(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_true_speed, :webkit_dom_html_marquee_element_set_true_speed, [DOMHTMLMarqueeElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_vspace(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_marquee_element_get_vspace, :webkit_dom_html_marquee_element_get_vspace, [DOMHTMLMarqueeElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_vspace(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_vspace, :webkit_dom_html_marquee_element_set_vspace, [DOMHTMLMarqueeElement, :ulong], :void
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_get_width(self)
  # @param [DOMHTMLMarqueeElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_marquee_element_get_width, :webkit_dom_html_marquee_element_get_width, [DOMHTMLMarqueeElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_marquee_element_set_width(self, value)
  # @param [DOMHTMLMarqueeElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_marquee_element_set_width, :webkit_dom_html_marquee_element_set_width, [DOMHTMLMarqueeElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLMenuElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLMenuElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_menu_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_menu_element_get_type, :webkit_dom_html_menu_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_menu_element_get_compact(self)
  # @param [DOMHTMLMenuElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_menu_element_get_compact, :webkit_dom_html_menu_element_get_compact, [DOMHTMLMenuElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_menu_element_set_compact(self, value)
  # @param [DOMHTMLMenuElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_menu_element_set_compact, :webkit_dom_html_menu_element_set_compact, [DOMHTMLMenuElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLMetaElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLMetaElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_meta_element_get_type, :webkit_dom_html_meta_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_get_content(self)
  # @param [DOMHTMLMetaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_meta_element_get_content, :webkit_dom_html_meta_element_get_content, [DOMHTMLMetaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_set_content(self, value)
  # @param [DOMHTMLMetaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_meta_element_set_content, :webkit_dom_html_meta_element_set_content, [DOMHTMLMetaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_get_http_equiv(self)
  # @param [DOMHTMLMetaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_meta_element_get_http_equiv, :webkit_dom_html_meta_element_get_http_equiv, [DOMHTMLMetaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_set_http_equiv(self, value)
  # @param [DOMHTMLMetaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_meta_element_set_http_equiv, :webkit_dom_html_meta_element_set_http_equiv, [DOMHTMLMetaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_get_name(self)
  # @param [DOMHTMLMetaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_meta_element_get_name, :webkit_dom_html_meta_element_get_name, [DOMHTMLMetaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_set_name(self, value)
  # @param [DOMHTMLMetaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_meta_element_set_name, :webkit_dom_html_meta_element_set_name, [DOMHTMLMetaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_get_scheme(self)
  # @param [DOMHTMLMetaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_meta_element_get_scheme, :webkit_dom_html_meta_element_get_scheme, [DOMHTMLMetaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_meta_element_set_scheme(self, value)
  # @param [DOMHTMLMetaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_meta_element_set_scheme, :webkit_dom_html_meta_element_set_scheme, [DOMHTMLMetaElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLModElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLModElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_mod_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_mod_element_get_type, :webkit_dom_html_mod_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_mod_element_get_cite(self)
  # @param [DOMHTMLModElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_mod_element_get_cite, :webkit_dom_html_mod_element_get_cite, [DOMHTMLModElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_mod_element_set_cite(self, value)
  # @param [DOMHTMLModElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_mod_element_set_cite, :webkit_dom_html_mod_element_set_cite, [DOMHTMLModElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_mod_element_get_date_time(self)
  # @param [DOMHTMLModElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_mod_element_get_date_time, :webkit_dom_html_mod_element_get_date_time, [DOMHTMLModElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_mod_element_set_date_time(self, value)
  # @param [DOMHTMLModElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_mod_element_set_date_time, :webkit_dom_html_mod_element_set_date_time, [DOMHTMLModElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLOListElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLOListElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmlo_list_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlo_list_element_get_type, :webkit_dom_htmlo_list_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmlo_list_element_get_compact(self)
  # @param [DOMHTMLOListElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlo_list_element_get_compact, :webkit_dom_htmlo_list_element_get_compact, [DOMHTMLOListElement], :int
  
  # (Not documented)
  # 
  # @method dom_htmlo_list_element_set_compact(self, value)
  # @param [DOMHTMLOListElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlo_list_element_set_compact, :webkit_dom_htmlo_list_element_set_compact, [DOMHTMLOListElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_htmlo_list_element_get_start(self)
  # @param [DOMHTMLOListElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlo_list_element_get_start, :webkit_dom_htmlo_list_element_get_start, [DOMHTMLOListElement], :long
  
  # (Not documented)
  # 
  # @method dom_htmlo_list_element_set_start(self, value)
  # @param [DOMHTMLOListElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlo_list_element_set_start, :webkit_dom_htmlo_list_element_set_start, [DOMHTMLOListElement, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLObjectElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLObjectElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_get_type, :webkit_dom_html_object_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_object_element_check_validity(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_check_validity, :webkit_dom_html_object_element_check_validity, [DOMHTMLObjectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_custom_validity(self, error)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_custom_validity, :webkit_dom_html_object_element_set_custom_validity, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_form(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_object_element_get_form, :webkit_dom_html_object_element_get_form, [DOMHTMLObjectElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_code(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_code, :webkit_dom_html_object_element_get_code, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_code(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_code, :webkit_dom_html_object_element_set_code, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_align(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_align, :webkit_dom_html_object_element_get_align, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_align(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_align, :webkit_dom_html_object_element_set_align, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_archive(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_archive, :webkit_dom_html_object_element_get_archive, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_archive(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_archive, :webkit_dom_html_object_element_set_archive, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_border(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_border, :webkit_dom_html_object_element_get_border, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_border(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_border, :webkit_dom_html_object_element_set_border, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_code_base(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_code_base, :webkit_dom_html_object_element_get_code_base, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_code_base(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_code_base, :webkit_dom_html_object_element_set_code_base, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_code_type(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_code_type, :webkit_dom_html_object_element_get_code_type, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_code_type(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_code_type, :webkit_dom_html_object_element_set_code_type, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_data(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_data, :webkit_dom_html_object_element_get_data, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_data(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_data, :webkit_dom_html_object_element_set_data, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_declare(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_get_declare, :webkit_dom_html_object_element_get_declare, [DOMHTMLObjectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_declare(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_declare, :webkit_dom_html_object_element_set_declare, [DOMHTMLObjectElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_height(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_height, :webkit_dom_html_object_element_get_height, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_height(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_height, :webkit_dom_html_object_element_set_height, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_hspace(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_get_hspace, :webkit_dom_html_object_element_get_hspace, [DOMHTMLObjectElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_hspace(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_hspace, :webkit_dom_html_object_element_set_hspace, [DOMHTMLObjectElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_name(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_name, :webkit_dom_html_object_element_get_name, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_name(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_name, :webkit_dom_html_object_element_set_name, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_standby(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_standby, :webkit_dom_html_object_element_get_standby, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_standby(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_standby, :webkit_dom_html_object_element_set_standby, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_use_map(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_use_map, :webkit_dom_html_object_element_get_use_map, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_use_map(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_use_map, :webkit_dom_html_object_element_set_use_map, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_vspace(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_get_vspace, :webkit_dom_html_object_element_get_vspace, [DOMHTMLObjectElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_vspace(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_vspace, :webkit_dom_html_object_element_set_vspace, [DOMHTMLObjectElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_width(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_width, :webkit_dom_html_object_element_get_width, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_set_width(self, value)
  # @param [DOMHTMLObjectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_object_element_set_width, :webkit_dom_html_object_element_set_width, [DOMHTMLObjectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_will_validate(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_object_element_get_will_validate, :webkit_dom_html_object_element_get_will_validate, [DOMHTMLObjectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_validity(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_object_element_get_validity, :webkit_dom_html_object_element_get_validity, [DOMHTMLObjectElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_validation_message(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_object_element_get_validation_message, :webkit_dom_html_object_element_get_validation_message, [DOMHTMLObjectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_object_element_get_content_document(self)
  # @param [DOMHTMLObjectElement] self 
  # @return [DOMDocument] 
  # @scope class
  attach_function :dom_html_object_element_get_content_document, :webkit_dom_html_object_element_get_content_document, [DOMHTMLObjectElement], DOMDocument
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLOptGroupElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLOptGroupElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_opt_group_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_opt_group_element_get_type, :webkit_dom_html_opt_group_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_opt_group_element_get_disabled(self)
  # @param [DOMHTMLOptGroupElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_opt_group_element_get_disabled, :webkit_dom_html_opt_group_element_get_disabled, [DOMHTMLOptGroupElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_opt_group_element_set_disabled(self, value)
  # @param [DOMHTMLOptGroupElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_opt_group_element_set_disabled, :webkit_dom_html_opt_group_element_set_disabled, [DOMHTMLOptGroupElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_opt_group_element_get_label(self)
  # @param [DOMHTMLOptGroupElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_opt_group_element_get_label, :webkit_dom_html_opt_group_element_get_label, [DOMHTMLOptGroupElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_opt_group_element_set_label(self, value)
  # @param [DOMHTMLOptGroupElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_opt_group_element_set_label, :webkit_dom_html_opt_group_element_set_label, [DOMHTMLOptGroupElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLOptionElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLOptionElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_option_element_get_type, :webkit_dom_html_option_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_form(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_option_element_get_form, :webkit_dom_html_option_element_get_form, [DOMHTMLOptionElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_default_selected(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_option_element_get_default_selected, :webkit_dom_html_option_element_get_default_selected, [DOMHTMLOptionElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_option_element_set_default_selected(self, value)
  # @param [DOMHTMLOptionElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_option_element_set_default_selected, :webkit_dom_html_option_element_set_default_selected, [DOMHTMLOptionElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_text(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_option_element_get_text, :webkit_dom_html_option_element_get_text, [DOMHTMLOptionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_index(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_option_element_get_index, :webkit_dom_html_option_element_get_index, [DOMHTMLOptionElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_disabled(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_option_element_get_disabled, :webkit_dom_html_option_element_get_disabled, [DOMHTMLOptionElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_option_element_set_disabled(self, value)
  # @param [DOMHTMLOptionElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_option_element_set_disabled, :webkit_dom_html_option_element_set_disabled, [DOMHTMLOptionElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_label(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_option_element_get_label, :webkit_dom_html_option_element_get_label, [DOMHTMLOptionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_option_element_set_label(self, value)
  # @param [DOMHTMLOptionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_option_element_set_label, :webkit_dom_html_option_element_set_label, [DOMHTMLOptionElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_selected(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_option_element_get_selected, :webkit_dom_html_option_element_get_selected, [DOMHTMLOptionElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_option_element_set_selected(self, value)
  # @param [DOMHTMLOptionElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_option_element_set_selected, :webkit_dom_html_option_element_set_selected, [DOMHTMLOptionElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_option_element_get_value(self)
  # @param [DOMHTMLOptionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_option_element_get_value, :webkit_dom_html_option_element_get_value, [DOMHTMLOptionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_option_element_set_value(self, value)
  # @param [DOMHTMLOptionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_option_element_set_value, :webkit_dom_html_option_element_set_value, [DOMHTMLOptionElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLCollection) 
  class DOMHTMLOptionsCollection < FFI::Struct
    layout :parent_instance, DOMHTMLCollection.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLCollectionClass) 
  class DOMHTMLOptionsCollectionClass < FFI::Struct
    layout :parent_class, DOMHTMLCollectionClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_options_collection_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_options_collection_get_type, :webkit_dom_html_options_collection_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_options_collection_get_selected_index(self)
  # @param [DOMHTMLOptionsCollection] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_options_collection_get_selected_index, :webkit_dom_html_options_collection_get_selected_index, [DOMHTMLOptionsCollection], :long
  
  # (Not documented)
  # 
  # @method dom_html_options_collection_set_selected_index(self, value)
  # @param [DOMHTMLOptionsCollection] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_options_collection_set_selected_index, :webkit_dom_html_options_collection_set_selected_index, [DOMHTMLOptionsCollection, :long], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLParagraphElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLParagraphElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_paragraph_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_paragraph_element_get_type, :webkit_dom_html_paragraph_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_paragraph_element_get_align(self)
  # @param [DOMHTMLParagraphElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_paragraph_element_get_align, :webkit_dom_html_paragraph_element_get_align, [DOMHTMLParagraphElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_paragraph_element_set_align(self, value)
  # @param [DOMHTMLParagraphElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_paragraph_element_set_align, :webkit_dom_html_paragraph_element_set_align, [DOMHTMLParagraphElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLParamElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLParamElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_param_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_param_element_get_type, :webkit_dom_html_param_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_param_element_get_name(self)
  # @param [DOMHTMLParamElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_param_element_get_name, :webkit_dom_html_param_element_get_name, [DOMHTMLParamElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_param_element_set_name(self, value)
  # @param [DOMHTMLParamElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_param_element_set_name, :webkit_dom_html_param_element_set_name, [DOMHTMLParamElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_param_element_get_value(self)
  # @param [DOMHTMLParamElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_param_element_get_value, :webkit_dom_html_param_element_get_value, [DOMHTMLParamElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_param_element_set_value(self, value)
  # @param [DOMHTMLParamElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_param_element_set_value, :webkit_dom_html_param_element_set_value, [DOMHTMLParamElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_param_element_get_value_type(self)
  # @param [DOMHTMLParamElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_param_element_get_value_type, :webkit_dom_html_param_element_get_value_type, [DOMHTMLParamElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_param_element_set_value_type(self, value)
  # @param [DOMHTMLParamElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_param_element_set_value_type, :webkit_dom_html_param_element_set_value_type, [DOMHTMLParamElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLPreElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLPreElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_pre_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_pre_element_get_type, :webkit_dom_html_pre_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_pre_element_get_width(self)
  # @param [DOMHTMLPreElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_pre_element_get_width, :webkit_dom_html_pre_element_get_width, [DOMHTMLPreElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_pre_element_set_width(self, value)
  # @param [DOMHTMLPreElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_pre_element_set_width, :webkit_dom_html_pre_element_set_width, [DOMHTMLPreElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_pre_element_get_wrap(self)
  # @param [DOMHTMLPreElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_pre_element_get_wrap, :webkit_dom_html_pre_element_get_wrap, [DOMHTMLPreElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_pre_element_set_wrap(self, value)
  # @param [DOMHTMLPreElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_pre_element_set_wrap, :webkit_dom_html_pre_element_set_wrap, [DOMHTMLPreElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLQuoteElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLQuoteElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_quote_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_quote_element_get_type, :webkit_dom_html_quote_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_quote_element_get_cite(self)
  # @param [DOMHTMLQuoteElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_quote_element_get_cite, :webkit_dom_html_quote_element_get_cite, [DOMHTMLQuoteElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_quote_element_set_cite(self, value)
  # @param [DOMHTMLQuoteElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_quote_element_set_cite, :webkit_dom_html_quote_element_set_cite, [DOMHTMLQuoteElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLScriptElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLScriptElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_script_element_get_type, :webkit_dom_html_script_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_text(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_script_element_get_text, :webkit_dom_html_script_element_get_text, [DOMHTMLScriptElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_text(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_text, :webkit_dom_html_script_element_set_text, [DOMHTMLScriptElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_html_for(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_script_element_get_html_for, :webkit_dom_html_script_element_get_html_for, [DOMHTMLScriptElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_html_for(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_html_for, :webkit_dom_html_script_element_set_html_for, [DOMHTMLScriptElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_event(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_script_element_get_event, :webkit_dom_html_script_element_get_event, [DOMHTMLScriptElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_event(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_event, :webkit_dom_html_script_element_set_event, [DOMHTMLScriptElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_charset(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_script_element_get_charset, :webkit_dom_html_script_element_get_charset, [DOMHTMLScriptElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_charset(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_charset, :webkit_dom_html_script_element_set_charset, [DOMHTMLScriptElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_async(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_script_element_get_async, :webkit_dom_html_script_element_get_async, [DOMHTMLScriptElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_async(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_async, :webkit_dom_html_script_element_set_async, [DOMHTMLScriptElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_defer(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_script_element_get_defer, :webkit_dom_html_script_element_get_defer, [DOMHTMLScriptElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_defer(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_defer, :webkit_dom_html_script_element_set_defer, [DOMHTMLScriptElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_script_element_get_src(self)
  # @param [DOMHTMLScriptElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_script_element_get_src, :webkit_dom_html_script_element_get_src, [DOMHTMLScriptElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_script_element_set_src(self, value)
  # @param [DOMHTMLScriptElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_script_element_set_src, :webkit_dom_html_script_element_set_src, [DOMHTMLScriptElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLSelectElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLSelectElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_type, :webkit_dom_html_select_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_select_element_check_validity(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_check_validity, :webkit_dom_html_select_element_check_validity, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_custom_validity(self, error)
  # @param [DOMHTMLSelectElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_custom_validity, :webkit_dom_html_select_element_set_custom_validity, [DOMHTMLSelectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_add(self, element, before, error)
  # @param [DOMHTMLSelectElement] self 
  # @param [DOMHTMLElement] element 
  # @param [DOMHTMLElement] before 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_add, :webkit_dom_html_select_element_add, [DOMHTMLSelectElement, DOMHTMLElement, DOMHTMLElement, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_remove(self, index)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_remove, :webkit_dom_html_select_element_remove, [DOMHTMLSelectElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_item(self, index)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] index 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_html_select_element_item, :webkit_dom_html_select_element_item, [DOMHTMLSelectElement, :ulong], DOMNode
  
  # (Not documented)
  # 
  # @method dom_html_select_element_named_item(self, name)
  # @param [DOMHTMLSelectElement] self 
  # @param [String] name 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_html_select_element_named_item, :webkit_dom_html_select_element_named_item, [DOMHTMLSelectElement, :string], DOMNode
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_selected_index(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_selected_index, :webkit_dom_html_select_element_get_selected_index, [DOMHTMLSelectElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_selected_index(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_selected_index, :webkit_dom_html_select_element_set_selected_index, [DOMHTMLSelectElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_value(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_select_element_get_value, :webkit_dom_html_select_element_get_value, [DOMHTMLSelectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_value(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_value, :webkit_dom_html_select_element_set_value, [DOMHTMLSelectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_length(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_length, :webkit_dom_html_select_element_get_length, [DOMHTMLSelectElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_length(self, value, error)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_length, :webkit_dom_html_select_element_set_length, [DOMHTMLSelectElement, :ulong, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_form(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_select_element_get_form, :webkit_dom_html_select_element_get_form, [DOMHTMLSelectElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_validity(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_select_element_get_validity, :webkit_dom_html_select_element_get_validity, [DOMHTMLSelectElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_will_validate(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_will_validate, :webkit_dom_html_select_element_get_will_validate, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_validation_message(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_select_element_get_validation_message, :webkit_dom_html_select_element_get_validation_message, [DOMHTMLSelectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_options(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [DOMHTMLOptionsCollection] 
  # @scope class
  attach_function :dom_html_select_element_get_options, :webkit_dom_html_select_element_get_options, [DOMHTMLSelectElement], DOMHTMLOptionsCollection
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_disabled(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_disabled, :webkit_dom_html_select_element_get_disabled, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_disabled(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_disabled, :webkit_dom_html_select_element_set_disabled, [DOMHTMLSelectElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_autofocus(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_autofocus, :webkit_dom_html_select_element_get_autofocus, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_autofocus(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_autofocus, :webkit_dom_html_select_element_set_autofocus, [DOMHTMLSelectElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_multiple(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_multiple, :webkit_dom_html_select_element_get_multiple, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_multiple(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_multiple, :webkit_dom_html_select_element_set_multiple, [DOMHTMLSelectElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_name(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_select_element_get_name, :webkit_dom_html_select_element_get_name, [DOMHTMLSelectElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_name(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_name, :webkit_dom_html_select_element_set_name, [DOMHTMLSelectElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_required(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_required, :webkit_dom_html_select_element_get_required, [DOMHTMLSelectElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_required(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_required, :webkit_dom_html_select_element_set_required, [DOMHTMLSelectElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_size(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_select_element_get_size, :webkit_dom_html_select_element_get_size, [DOMHTMLSelectElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_select_element_set_size(self, value)
  # @param [DOMHTMLSelectElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_select_element_set_size, :webkit_dom_html_select_element_set_size, [DOMHTMLSelectElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_select_element_get_labels(self)
  # @param [DOMHTMLSelectElement] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_html_select_element_get_labels, :webkit_dom_html_select_element_get_labels, [DOMHTMLSelectElement], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLStyleElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLStyleElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_style_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_style_element_get_type, :webkit_dom_html_style_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_style_element_get_disabled(self)
  # @param [DOMHTMLStyleElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_style_element_get_disabled, :webkit_dom_html_style_element_get_disabled, [DOMHTMLStyleElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_style_element_set_disabled(self, value)
  # @param [DOMHTMLStyleElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_style_element_set_disabled, :webkit_dom_html_style_element_set_disabled, [DOMHTMLStyleElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_style_element_get_media(self)
  # @param [DOMHTMLStyleElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_style_element_get_media, :webkit_dom_html_style_element_get_media, [DOMHTMLStyleElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_style_element_set_media(self, value)
  # @param [DOMHTMLStyleElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_style_element_set_media, :webkit_dom_html_style_element_set_media, [DOMHTMLStyleElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_style_element_get_sheet(self)
  # @param [DOMHTMLStyleElement] self 
  # @return [DOMStyleSheet] 
  # @scope class
  attach_function :dom_html_style_element_get_sheet, :webkit_dom_html_style_element_get_sheet, [DOMHTMLStyleElement], DOMStyleSheet
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableCaptionElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableCaptionElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_caption_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_caption_element_get_type, :webkit_dom_html_table_caption_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_caption_element_get_align(self)
  # @param [DOMHTMLTableCaptionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_caption_element_get_align, :webkit_dom_html_table_caption_element_get_align, [DOMHTMLTableCaptionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_caption_element_set_align(self, value)
  # @param [DOMHTMLTableCaptionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_caption_element_set_align, :webkit_dom_html_table_caption_element_set_align, [DOMHTMLTableCaptionElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableCellElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableCellElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_type, :webkit_dom_html_table_cell_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_cell_index(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_cell_index, :webkit_dom_html_table_cell_element_get_cell_index, [DOMHTMLTableCellElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_abbr(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_abbr, :webkit_dom_html_table_cell_element_get_abbr, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_abbr(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_abbr, :webkit_dom_html_table_cell_element_set_abbr, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_align(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_align, :webkit_dom_html_table_cell_element_get_align, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_align(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_align, :webkit_dom_html_table_cell_element_set_align, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_axis(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_axis, :webkit_dom_html_table_cell_element_get_axis, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_axis(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_axis, :webkit_dom_html_table_cell_element_set_axis, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_bg_color(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_bg_color, :webkit_dom_html_table_cell_element_get_bg_color, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_bg_color(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_bg_color, :webkit_dom_html_table_cell_element_set_bg_color, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_ch(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_ch, :webkit_dom_html_table_cell_element_get_ch, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_ch(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_ch, :webkit_dom_html_table_cell_element_set_ch, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_ch_off(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_ch_off, :webkit_dom_html_table_cell_element_get_ch_off, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_ch_off(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_ch_off, :webkit_dom_html_table_cell_element_set_ch_off, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_col_span(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_col_span, :webkit_dom_html_table_cell_element_get_col_span, [DOMHTMLTableCellElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_col_span(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_col_span, :webkit_dom_html_table_cell_element_set_col_span, [DOMHTMLTableCellElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_headers(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_headers, :webkit_dom_html_table_cell_element_get_headers, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_headers(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_headers, :webkit_dom_html_table_cell_element_set_headers, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_height(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_height, :webkit_dom_html_table_cell_element_get_height, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_height(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_height, :webkit_dom_html_table_cell_element_set_height, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_no_wrap(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_no_wrap, :webkit_dom_html_table_cell_element_get_no_wrap, [DOMHTMLTableCellElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_no_wrap(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_no_wrap, :webkit_dom_html_table_cell_element_set_no_wrap, [DOMHTMLTableCellElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_row_span(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_row_span, :webkit_dom_html_table_cell_element_get_row_span, [DOMHTMLTableCellElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_row_span(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_row_span, :webkit_dom_html_table_cell_element_set_row_span, [DOMHTMLTableCellElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_scope(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_scope, :webkit_dom_html_table_cell_element_get_scope, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_scope(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_scope, :webkit_dom_html_table_cell_element_set_scope, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_v_align(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_v_align, :webkit_dom_html_table_cell_element_get_v_align, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_v_align(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_v_align, :webkit_dom_html_table_cell_element_set_v_align, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_get_width(self)
  # @param [DOMHTMLTableCellElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_cell_element_get_width, :webkit_dom_html_table_cell_element_get_width, [DOMHTMLTableCellElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_cell_element_set_width(self, value)
  # @param [DOMHTMLTableCellElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_cell_element_set_width, :webkit_dom_html_table_cell_element_set_width, [DOMHTMLTableCellElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableColElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableColElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_col_element_get_type, :webkit_dom_html_table_col_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_align(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_col_element_get_align, :webkit_dom_html_table_col_element_get_align, [DOMHTMLTableColElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_align(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_align, :webkit_dom_html_table_col_element_set_align, [DOMHTMLTableColElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_ch(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_col_element_get_ch, :webkit_dom_html_table_col_element_get_ch, [DOMHTMLTableColElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_ch(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_ch, :webkit_dom_html_table_col_element_set_ch, [DOMHTMLTableColElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_ch_off(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_col_element_get_ch_off, :webkit_dom_html_table_col_element_get_ch_off, [DOMHTMLTableColElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_ch_off(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_ch_off, :webkit_dom_html_table_col_element_set_ch_off, [DOMHTMLTableColElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_span(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_col_element_get_span, :webkit_dom_html_table_col_element_get_span, [DOMHTMLTableColElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_span(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_span, :webkit_dom_html_table_col_element_set_span, [DOMHTMLTableColElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_v_align(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_col_element_get_v_align, :webkit_dom_html_table_col_element_get_v_align, [DOMHTMLTableColElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_v_align(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_v_align, :webkit_dom_html_table_col_element_set_v_align, [DOMHTMLTableColElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_get_width(self)
  # @param [DOMHTMLTableColElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_col_element_get_width, :webkit_dom_html_table_col_element_get_width, [DOMHTMLTableColElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_col_element_set_width(self, value)
  # @param [DOMHTMLTableColElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_col_element_set_width, :webkit_dom_html_table_col_element_set_width, [DOMHTMLTableColElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_element_get_type, :webkit_dom_html_table_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_element_create_t_head(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_element_create_t_head, :webkit_dom_html_table_element_create_t_head, [DOMHTMLTableElement], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_element_delete_t_head(self)
  # @param [DOMHTMLTableElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_delete_t_head, :webkit_dom_html_table_element_delete_t_head, [DOMHTMLTableElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_create_t_foot(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_element_create_t_foot, :webkit_dom_html_table_element_create_t_foot, [DOMHTMLTableElement], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_element_delete_t_foot(self)
  # @param [DOMHTMLTableElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_delete_t_foot, :webkit_dom_html_table_element_delete_t_foot, [DOMHTMLTableElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_create_caption(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_element_create_caption, :webkit_dom_html_table_element_create_caption, [DOMHTMLTableElement], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_element_delete_caption(self)
  # @param [DOMHTMLTableElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_delete_caption, :webkit_dom_html_table_element_delete_caption, [DOMHTMLTableElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_insert_row(self, index, error)
  # @param [DOMHTMLTableElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_element_insert_row, :webkit_dom_html_table_element_insert_row, [DOMHTMLTableElement, :long, :pointer], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_element_delete_row(self, index, error)
  # @param [DOMHTMLTableElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_delete_row, :webkit_dom_html_table_element_delete_row, [DOMHTMLTableElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_caption(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLTableCaptionElement] 
  # @scope class
  attach_function :dom_html_table_element_get_caption, :webkit_dom_html_table_element_get_caption, [DOMHTMLTableElement], DOMHTMLTableCaptionElement
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_caption(self, value, error)
  # @param [DOMHTMLTableElement] self 
  # @param [DOMHTMLTableCaptionElement] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_caption, :webkit_dom_html_table_element_set_caption, [DOMHTMLTableElement, DOMHTMLTableCaptionElement, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_t_head(self)
  # @param [DOMHTMLTableElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLTableSectionElement)] 
  # @scope class
  attach_function :dom_html_table_element_get_t_head, :webkit_dom_html_table_element_get_t_head, [DOMHTMLTableElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_t_head(self, value, error)
  # @param [DOMHTMLTableElement] self 
  # @param [FFI::Pointer(*WebKitDOMHTMLTableSectionElement)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_t_head, :webkit_dom_html_table_element_set_t_head, [DOMHTMLTableElement, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_t_foot(self)
  # @param [DOMHTMLTableElement] self 
  # @return [FFI::Pointer(*WebKitDOMHTMLTableSectionElement)] 
  # @scope class
  attach_function :dom_html_table_element_get_t_foot, :webkit_dom_html_table_element_get_t_foot, [DOMHTMLTableElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_t_foot(self, value, error)
  # @param [DOMHTMLTableElement] self 
  # @param [FFI::Pointer(*WebKitDOMHTMLTableSectionElement)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_t_foot, :webkit_dom_html_table_element_set_t_foot, [DOMHTMLTableElement, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_rows(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_table_element_get_rows, :webkit_dom_html_table_element_get_rows, [DOMHTMLTableElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_t_bodies(self)
  # @param [DOMHTMLTableElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_table_element_get_t_bodies, :webkit_dom_html_table_element_get_t_bodies, [DOMHTMLTableElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_align(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_align, :webkit_dom_html_table_element_get_align, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_align(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_align, :webkit_dom_html_table_element_set_align, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_bg_color(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_bg_color, :webkit_dom_html_table_element_get_bg_color, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_bg_color(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_bg_color, :webkit_dom_html_table_element_set_bg_color, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_border(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_border, :webkit_dom_html_table_element_get_border, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_border(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_border, :webkit_dom_html_table_element_set_border, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_cell_padding(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_cell_padding, :webkit_dom_html_table_element_get_cell_padding, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_cell_padding(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_cell_padding, :webkit_dom_html_table_element_set_cell_padding, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_cell_spacing(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_cell_spacing, :webkit_dom_html_table_element_get_cell_spacing, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_cell_spacing(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_cell_spacing, :webkit_dom_html_table_element_set_cell_spacing, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_frame(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_frame, :webkit_dom_html_table_element_get_frame, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_frame(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_frame, :webkit_dom_html_table_element_set_frame, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_rules(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_rules, :webkit_dom_html_table_element_get_rules, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_rules(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_rules, :webkit_dom_html_table_element_set_rules, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_summary(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_summary, :webkit_dom_html_table_element_get_summary, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_summary(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_summary, :webkit_dom_html_table_element_set_summary, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_element_get_width(self)
  # @param [DOMHTMLTableElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_element_get_width, :webkit_dom_html_table_element_get_width, [DOMHTMLTableElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_element_set_width(self, value)
  # @param [DOMHTMLTableElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_element_set_width, :webkit_dom_html_table_element_set_width, [DOMHTMLTableElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableRowElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableRowElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_row_element_get_type, :webkit_dom_html_table_row_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_insert_cell(self, index, error)
  # @param [DOMHTMLTableRowElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_row_element_insert_cell, :webkit_dom_html_table_row_element_insert_cell, [DOMHTMLTableRowElement, :long, :pointer], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_delete_cell(self, index, error)
  # @param [DOMHTMLTableRowElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_delete_cell, :webkit_dom_html_table_row_element_delete_cell, [DOMHTMLTableRowElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_row_index(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_row_element_get_row_index, :webkit_dom_html_table_row_element_get_row_index, [DOMHTMLTableRowElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_section_row_index(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_row_element_get_section_row_index, :webkit_dom_html_table_row_element_get_section_row_index, [DOMHTMLTableRowElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_cells(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_table_row_element_get_cells, :webkit_dom_html_table_row_element_get_cells, [DOMHTMLTableRowElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_align(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_row_element_get_align, :webkit_dom_html_table_row_element_get_align, [DOMHTMLTableRowElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_set_align(self, value)
  # @param [DOMHTMLTableRowElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_set_align, :webkit_dom_html_table_row_element_set_align, [DOMHTMLTableRowElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_bg_color(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_row_element_get_bg_color, :webkit_dom_html_table_row_element_get_bg_color, [DOMHTMLTableRowElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_set_bg_color(self, value)
  # @param [DOMHTMLTableRowElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_set_bg_color, :webkit_dom_html_table_row_element_set_bg_color, [DOMHTMLTableRowElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_ch(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_row_element_get_ch, :webkit_dom_html_table_row_element_get_ch, [DOMHTMLTableRowElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_set_ch(self, value)
  # @param [DOMHTMLTableRowElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_set_ch, :webkit_dom_html_table_row_element_set_ch, [DOMHTMLTableRowElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_ch_off(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_row_element_get_ch_off, :webkit_dom_html_table_row_element_get_ch_off, [DOMHTMLTableRowElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_set_ch_off(self, value)
  # @param [DOMHTMLTableRowElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_set_ch_off, :webkit_dom_html_table_row_element_set_ch_off, [DOMHTMLTableRowElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_get_v_align(self)
  # @param [DOMHTMLTableRowElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_row_element_get_v_align, :webkit_dom_html_table_row_element_get_v_align, [DOMHTMLTableRowElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_row_element_set_v_align(self, value)
  # @param [DOMHTMLTableRowElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_row_element_set_v_align, :webkit_dom_html_table_row_element_set_v_align, [DOMHTMLTableRowElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTableSectionElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTableSectionElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_table_section_element_get_type, :webkit_dom_html_table_section_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_insert_row(self, index, error)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMHTMLElement] 
  # @scope class
  attach_function :dom_html_table_section_element_insert_row, :webkit_dom_html_table_section_element_insert_row, [DOMHTMLTableSectionElement, :long, :pointer], DOMHTMLElement
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_delete_row(self, index, error)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_section_element_delete_row, :webkit_dom_html_table_section_element_delete_row, [DOMHTMLTableSectionElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_align(self)
  # @param [DOMHTMLTableSectionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_section_element_get_align, :webkit_dom_html_table_section_element_get_align, [DOMHTMLTableSectionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_set_align(self, value)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_section_element_set_align, :webkit_dom_html_table_section_element_set_align, [DOMHTMLTableSectionElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_ch(self)
  # @param [DOMHTMLTableSectionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_section_element_get_ch, :webkit_dom_html_table_section_element_get_ch, [DOMHTMLTableSectionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_set_ch(self, value)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_section_element_set_ch, :webkit_dom_html_table_section_element_set_ch, [DOMHTMLTableSectionElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_ch_off(self)
  # @param [DOMHTMLTableSectionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_section_element_get_ch_off, :webkit_dom_html_table_section_element_get_ch_off, [DOMHTMLTableSectionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_set_ch_off(self, value)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_section_element_set_ch_off, :webkit_dom_html_table_section_element_set_ch_off, [DOMHTMLTableSectionElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_v_align(self)
  # @param [DOMHTMLTableSectionElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_table_section_element_get_v_align, :webkit_dom_html_table_section_element_get_v_align, [DOMHTMLTableSectionElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_set_v_align(self, value)
  # @param [DOMHTMLTableSectionElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_table_section_element_set_v_align, :webkit_dom_html_table_section_element_set_v_align, [DOMHTMLTableSectionElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_table_section_element_get_rows(self)
  # @param [DOMHTMLTableSectionElement] self 
  # @return [DOMHTMLCollection] 
  # @scope class
  attach_function :dom_html_table_section_element_get_rows, :webkit_dom_html_table_section_element_get_rows, [DOMHTMLTableSectionElement], DOMHTMLCollection
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTextAreaElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTextAreaElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_type, :webkit_dom_html_text_area_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_select(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_select, :webkit_dom_html_text_area_element_select, [DOMHTMLTextAreaElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_check_validity(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_check_validity, :webkit_dom_html_text_area_element_check_validity, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_custom_validity(self, error)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_custom_validity, :webkit_dom_html_text_area_element_set_custom_validity, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_selection_range(self, start, end, direction)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] start 
  # @param [Integer] end 
  # @param [String] direction 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_selection_range, :webkit_dom_html_text_area_element_set_selection_range, [DOMHTMLTextAreaElement, :long, :long, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_default_value(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_default_value, :webkit_dom_html_text_area_element_get_default_value, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_default_value(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_default_value, :webkit_dom_html_text_area_element_set_default_value, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_form(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [DOMHTMLFormElement] 
  # @scope class
  attach_function :dom_html_text_area_element_get_form, :webkit_dom_html_text_area_element_get_form, [DOMHTMLTextAreaElement], DOMHTMLFormElement
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_validity(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [FFI::Pointer(*WebKitDOMValidityState)] 
  # @scope class
  attach_function :dom_html_text_area_element_get_validity, :webkit_dom_html_text_area_element_get_validity, [DOMHTMLTextAreaElement], :pointer
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_access_key(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_access_key, :webkit_dom_html_text_area_element_get_access_key, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_access_key(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_access_key, :webkit_dom_html_text_area_element_set_access_key, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_cols(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_cols, :webkit_dom_html_text_area_element_get_cols, [DOMHTMLTextAreaElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_cols(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_cols, :webkit_dom_html_text_area_element_set_cols, [DOMHTMLTextAreaElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_disabled(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_disabled, :webkit_dom_html_text_area_element_get_disabled, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_disabled(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_disabled, :webkit_dom_html_text_area_element_set_disabled, [DOMHTMLTextAreaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_autofocus(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_autofocus, :webkit_dom_html_text_area_element_get_autofocus, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_autofocus(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_autofocus, :webkit_dom_html_text_area_element_set_autofocus, [DOMHTMLTextAreaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_max_length(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_max_length, :webkit_dom_html_text_area_element_get_max_length, [DOMHTMLTextAreaElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_max_length(self, value, error)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_max_length, :webkit_dom_html_text_area_element_set_max_length, [DOMHTMLTextAreaElement, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_name(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_name, :webkit_dom_html_text_area_element_get_name, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_name(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_name, :webkit_dom_html_text_area_element_set_name, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_placeholder(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_placeholder, :webkit_dom_html_text_area_element_get_placeholder, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_placeholder(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_placeholder, :webkit_dom_html_text_area_element_set_placeholder, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_read_only(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_read_only, :webkit_dom_html_text_area_element_get_read_only, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_read_only(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_read_only, :webkit_dom_html_text_area_element_set_read_only, [DOMHTMLTextAreaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_required(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_required, :webkit_dom_html_text_area_element_get_required, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_required(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_required, :webkit_dom_html_text_area_element_set_required, [DOMHTMLTextAreaElement, :int], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_rows(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_rows, :webkit_dom_html_text_area_element_get_rows, [DOMHTMLTextAreaElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_rows(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_rows, :webkit_dom_html_text_area_element_set_rows, [DOMHTMLTextAreaElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_value(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_value, :webkit_dom_html_text_area_element_get_value, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_value(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_value, :webkit_dom_html_text_area_element_set_value, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_text_length(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_text_length, :webkit_dom_html_text_area_element_get_text_length, [DOMHTMLTextAreaElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_will_validate(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_will_validate, :webkit_dom_html_text_area_element_get_will_validate, [DOMHTMLTextAreaElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_validation_message(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_validation_message, :webkit_dom_html_text_area_element_get_validation_message, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_selection_start(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_selection_start, :webkit_dom_html_text_area_element_get_selection_start, [DOMHTMLTextAreaElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_selection_start(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_selection_start, :webkit_dom_html_text_area_element_set_selection_start, [DOMHTMLTextAreaElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_selection_end(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_text_area_element_get_selection_end, :webkit_dom_html_text_area_element_get_selection_end, [DOMHTMLTextAreaElement], :long
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_selection_end(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_selection_end, :webkit_dom_html_text_area_element_set_selection_end, [DOMHTMLTextAreaElement, :long], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_selection_direction(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_text_area_element_get_selection_direction, :webkit_dom_html_text_area_element_get_selection_direction, [DOMHTMLTextAreaElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_set_selection_direction(self, value)
  # @param [DOMHTMLTextAreaElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_text_area_element_set_selection_direction, :webkit_dom_html_text_area_element_set_selection_direction, [DOMHTMLTextAreaElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_text_area_element_get_labels(self)
  # @param [DOMHTMLTextAreaElement] self 
  # @return [FFI::Pointer(*WebKitDOMNodeList)] 
  # @scope class
  attach_function :dom_html_text_area_element_get_labels, :webkit_dom_html_text_area_element_get_labels, [DOMHTMLTextAreaElement], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLTitleElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLTitleElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_title_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_title_element_get_type, :webkit_dom_html_title_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_title_element_get_text(self)
  # @param [DOMHTMLTitleElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_title_element_get_text, :webkit_dom_html_title_element_get_text, [DOMHTMLTitleElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_title_element_set_text(self, value)
  # @param [DOMHTMLTitleElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_title_element_set_text, :webkit_dom_html_title_element_set_text, [DOMHTMLTitleElement, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLElement) 
  class DOMHTMLUListElement < FFI::Struct
    layout :parent_instance, DOMHTMLElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLElementClass) 
  class DOMHTMLUListElementClass < FFI::Struct
    layout :parent_class, DOMHTMLElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_htmlu_list_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlu_list_element_get_type, :webkit_dom_htmlu_list_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_htmlu_list_element_get_compact(self)
  # @param [DOMHTMLUListElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_htmlu_list_element_get_compact, :webkit_dom_htmlu_list_element_get_compact, [DOMHTMLUListElement], :int
  
  # (Not documented)
  # 
  # @method dom_htmlu_list_element_set_compact(self, value)
  # @param [DOMHTMLUListElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_htmlu_list_element_set_compact, :webkit_dom_htmlu_list_element_set_compact, [DOMHTMLUListElement, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMHTMLMediaElement) 
  class DOMHTMLVideoElement < FFI::Struct
    layout :parent_instance, DOMHTMLMediaElement.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMHTMLMediaElementClass) 
  class DOMHTMLVideoElementClass < FFI::Struct
    layout :parent_class, DOMHTMLMediaElementClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_type, :webkit_dom_html_video_element_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_webkit_enter_fullscreen(self, error)
  # @param [DOMHTMLVideoElement] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_webkit_enter_fullscreen, :webkit_dom_html_video_element_webkit_enter_fullscreen, [DOMHTMLVideoElement, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_webkit_exit_fullscreen(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_webkit_exit_fullscreen, :webkit_dom_html_video_element_webkit_exit_fullscreen, [DOMHTMLVideoElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_webkit_enter_full_screen(self, error)
  # @param [DOMHTMLVideoElement] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_webkit_enter_full_screen, :webkit_dom_html_video_element_webkit_enter_full_screen, [DOMHTMLVideoElement, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_webkit_exit_full_screen(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_webkit_exit_full_screen, :webkit_dom_html_video_element_webkit_exit_full_screen, [DOMHTMLVideoElement], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_width(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_width, :webkit_dom_html_video_element_get_width, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_set_width(self, value)
  # @param [DOMHTMLVideoElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_set_width, :webkit_dom_html_video_element_set_width, [DOMHTMLVideoElement, :ulong], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_height(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_height, :webkit_dom_html_video_element_get_height, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_set_height(self, value)
  # @param [DOMHTMLVideoElement] self 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_set_height, :webkit_dom_html_video_element_set_height, [DOMHTMLVideoElement, :ulong], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_video_width(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_video_width, :webkit_dom_html_video_element_get_video_width, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_video_height(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_video_height, :webkit_dom_html_video_element_get_video_height, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_poster(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [String] 
  # @scope class
  attach_function :dom_html_video_element_get_poster, :webkit_dom_html_video_element_get_poster, [DOMHTMLVideoElement], :string
  
  # (Not documented)
  # 
  # @method dom_html_video_element_set_poster(self, value)
  # @param [DOMHTMLVideoElement] self 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_html_video_element_set_poster, :webkit_dom_html_video_element_set_poster, [DOMHTMLVideoElement, :string], :void
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_webkit_supports_fullscreen(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_webkit_supports_fullscreen, :webkit_dom_html_video_element_get_webkit_supports_fullscreen, [DOMHTMLVideoElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_webkit_displaying_fullscreen(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_webkit_displaying_fullscreen, :webkit_dom_html_video_element_get_webkit_displaying_fullscreen, [DOMHTMLVideoElement], :int
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_webkit_decoded_frame_count(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_webkit_decoded_frame_count, :webkit_dom_html_video_element_get_webkit_decoded_frame_count, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # @method dom_html_video_element_get_webkit_dropped_frame_count(self)
  # @param [DOMHTMLVideoElement] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_html_video_element_get_webkit_dropped_frame_count, :webkit_dom_html_video_element_get_webkit_dropped_frame_count, [DOMHTMLVideoElement], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMHistoryWrappers
    def back()
      WebKit.dom_history_back(self)
    end
    
    def forward()
      WebKit.dom_history_forward(self)
    end
    
    def go(distance)
      WebKit.dom_history_go(self, distance)
    end
    
    def get_length()
      WebKit.dom_history_get_length(self)
    end
  end
  
  class DOMHistory < FFI::Struct
    include DOMHistoryWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMHistoryClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_history_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_history_get_type, :webkit_dom_history_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_history_back(self)
  # @param [DOMHistory] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_history_back, :webkit_dom_history_back, [DOMHistory], :void
  
  # (Not documented)
  # 
  # @method dom_history_forward(self)
  # @param [DOMHistory] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_history_forward, :webkit_dom_history_forward, [DOMHistory], :void
  
  # (Not documented)
  # 
  # @method dom_history_go(self, distance)
  # @param [DOMHistory] self 
  # @param [Integer] distance 
  # @return [nil] 
  # @scope class
  attach_function :dom_history_go, :webkit_dom_history_go, [DOMHistory, :long], :void
  
  # (Not documented)
  # 
  # @method dom_history_get_length(self)
  # @param [DOMHistory] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_history_get_length, :webkit_dom_history_get_length, [DOMHistory], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMLocationWrappers
    def get_parameter(name)
      WebKit.dom_location_get_parameter(self, name)
    end
    
    def get_origin()
      WebKit.dom_location_get_origin(self)
    end
  end
  
  class DOMLocation < FFI::Struct
    include DOMLocationWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMLocationClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_location_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_location_get_type, :webkit_dom_location_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_location_get_parameter(self, name)
  # @param [DOMLocation] self 
  # @param [String] name 
  # @return [String] 
  # @scope class
  attach_function :dom_location_get_parameter, :webkit_dom_location_get_parameter, [DOMLocation, :string], :string
  
  # (Not documented)
  # 
  # @method dom_location_get_origin(self)
  # @param [DOMLocation] self 
  # @return [String] 
  # @scope class
  attach_function :dom_location_get_origin, :webkit_dom_location_get_origin, [DOMLocation], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMMediaErrorWrappers
    def get_code()
      WebKit.dom_media_error_get_code(self)
    end
  end
  
  class DOMMediaError < FFI::Struct
    include DOMMediaErrorWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMMediaErrorClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_media_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_error_get_type, :webkit_dom_media_error_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_media_error_get_code(self)
  # @param [DOMMediaError] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_error_get_code, :webkit_dom_media_error_get_code, [DOMMediaError], :ushort
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMMediaListWrappers
    def item(index)
      WebKit.dom_media_list_item(self, index)
    end
    
    def delete_medium(old_medium, error)
      WebKit.dom_media_list_delete_medium(self, old_medium, error)
    end
    
    def append_medium(new_medium, error)
      WebKit.dom_media_list_append_medium(self, new_medium, error)
    end
    
    def get_media_text()
      WebKit.dom_media_list_get_media_text(self)
    end
    
    def set_media_text(value, error)
      WebKit.dom_media_list_set_media_text(self, value, error)
    end
    
    def get_length()
      WebKit.dom_media_list_get_length(self)
    end
  end
  
  class DOMMediaList < FFI::Struct
    include DOMMediaListWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMMediaListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_media_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_list_get_type, :webkit_dom_media_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_media_list_item(self, index)
  # @param [DOMMediaList] self 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :dom_media_list_item, :webkit_dom_media_list_item, [DOMMediaList, :ulong], :string
  
  # (Not documented)
  # 
  # @method dom_media_list_delete_medium(self, old_medium, error)
  # @param [DOMMediaList] self 
  # @param [String] old_medium 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_media_list_delete_medium, :webkit_dom_media_list_delete_medium, [DOMMediaList, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_media_list_append_medium(self, new_medium, error)
  # @param [DOMMediaList] self 
  # @param [String] new_medium 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_media_list_append_medium, :webkit_dom_media_list_append_medium, [DOMMediaList, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_media_list_get_media_text(self)
  # @param [DOMMediaList] self 
  # @return [String] 
  # @scope class
  attach_function :dom_media_list_get_media_text, :webkit_dom_media_list_get_media_text, [DOMMediaList], :string
  
  # (Not documented)
  # 
  # @method dom_media_list_set_media_text(self, value, error)
  # @param [DOMMediaList] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_media_list_set_media_text, :webkit_dom_media_list_set_media_text, [DOMMediaList, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_media_list_get_length(self)
  # @param [DOMMediaList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_list_get_length, :webkit_dom_media_list_get_length, [DOMMediaList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMMediaQueryListWrappers
    def get_media()
      WebKit.dom_media_query_list_get_media(self)
    end
    
    def get_matches()
      WebKit.dom_media_query_list_get_matches(self)
    end
  end
  
  class DOMMediaQueryList < FFI::Struct
    include DOMMediaQueryListWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMMediaQueryListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_media_query_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_query_list_get_type, :webkit_dom_media_query_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_media_query_list_get_media(self)
  # @param [DOMMediaQueryList] self 
  # @return [String] 
  # @scope class
  attach_function :dom_media_query_list_get_media, :webkit_dom_media_query_list_get_media, [DOMMediaQueryList], :string
  
  # (Not documented)
  # 
  # @method dom_media_query_list_get_matches(self)
  # @param [DOMMediaQueryList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_media_query_list_get_matches, :webkit_dom_media_query_list_get_matches, [DOMMediaQueryList], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMMemoryInfoWrappers
    def get_total_js_heap_size()
      WebKit.dom_memory_info_get_total_js_heap_size(self)
    end
    
    def get_used_js_heap_size()
      WebKit.dom_memory_info_get_used_js_heap_size(self)
    end
    
    def get_js_heap_size_limit()
      WebKit.dom_memory_info_get_js_heap_size_limit(self)
    end
  end
  
  class DOMMemoryInfo < FFI::Struct
    include DOMMemoryInfoWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMMemoryInfoClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_memory_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_memory_info_get_type, :webkit_dom_memory_info_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_memory_info_get_total_js_heap_size(self)
  # @param [DOMMemoryInfo] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_memory_info_get_total_js_heap_size, :webkit_dom_memory_info_get_total_js_heap_size, [DOMMemoryInfo], :ulong
  
  # (Not documented)
  # 
  # @method dom_memory_info_get_used_js_heap_size(self)
  # @param [DOMMemoryInfo] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_memory_info_get_used_js_heap_size, :webkit_dom_memory_info_get_used_js_heap_size, [DOMMemoryInfo], :ulong
  
  # (Not documented)
  # 
  # @method dom_memory_info_get_js_heap_size_limit(self)
  # @param [DOMMemoryInfo] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_memory_info_get_js_heap_size_limit, :webkit_dom_memory_info_get_js_heap_size_limit, [DOMMemoryInfo], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMMessagePort < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMMessagePortClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_message_port_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_message_port_get_type, :webkit_dom_message_port_get_type, [], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMEvent) 
  class DOMUIEvent < FFI::Struct
    layout :parent_instance, DOMEvent.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMEventClass) 
  class DOMUIEventClass < FFI::Struct
    layout :parent_class, DOMEventClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_type, :webkit_dom_ui_event_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_ui_event_init_ui_event(self, type, can_bubble, cancelable, view, detail)
  # @param [DOMUIEvent] self 
  # @param [String] type 
  # @param [Integer] can_bubble 
  # @param [Integer] cancelable 
  # @param [DOMDOMWindow] view 
  # @param [Integer] detail 
  # @return [nil] 
  # @scope class
  attach_function :dom_ui_event_init_ui_event, :webkit_dom_ui_event_init_ui_event, [DOMUIEvent, :string, :int, :int, DOMDOMWindow, :long], :void
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_view(self)
  # @param [DOMUIEvent] self 
  # @return [DOMDOMWindow] 
  # @scope class
  attach_function :dom_ui_event_get_view, :webkit_dom_ui_event_get_view, [DOMUIEvent], DOMDOMWindow
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_detail(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_detail, :webkit_dom_ui_event_get_detail, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_key_code(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_key_code, :webkit_dom_ui_event_get_key_code, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_char_code(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_char_code, :webkit_dom_ui_event_get_char_code, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_layer_x(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_layer_x, :webkit_dom_ui_event_get_layer_x, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_layer_y(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_layer_y, :webkit_dom_ui_event_get_layer_y, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_page_x(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_page_x, :webkit_dom_ui_event_get_page_x, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_page_y(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_page_y, :webkit_dom_ui_event_get_page_y, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # @method dom_ui_event_get_which(self)
  # @param [DOMUIEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_ui_event_get_which, :webkit_dom_ui_event_get_which, [DOMUIEvent], :long
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMUIEvent) 
  module DOMMouseEventWrappers
    def init_mouse_event(type, can_bubble, cancelable, view, detail, screen_x, screen_y, client_x, client_y, ctrl_key, alt_key, shift_key, meta_key, button, related_target)
      WebKit.dom_mouse_event_init_mouse_event(self, type, can_bubble, cancelable, view, detail, screen_x, screen_y, client_x, client_y, ctrl_key, alt_key, shift_key, meta_key, button, related_target)
    end
    
    def get_screen_x()
      WebKit.dom_mouse_event_get_screen_x(self)
    end
    
    def get_screen_y()
      WebKit.dom_mouse_event_get_screen_y(self)
    end
    
    def get_client_x()
      WebKit.dom_mouse_event_get_client_x(self)
    end
    
    def get_client_y()
      WebKit.dom_mouse_event_get_client_y(self)
    end
    
    def get_ctrl_key()
      WebKit.dom_mouse_event_get_ctrl_key(self)
    end
    
    def get_shift_key()
      WebKit.dom_mouse_event_get_shift_key(self)
    end
    
    def get_alt_key()
      WebKit.dom_mouse_event_get_alt_key(self)
    end
    
    def get_meta_key()
      WebKit.dom_mouse_event_get_meta_key(self)
    end
    
    def get_button()
      WebKit.dom_mouse_event_get_button(self)
    end
    
    def get_related_target()
      DOMEventTarget.new WebKit.dom_mouse_event_get_related_target(self)
    end
    
    def get_offset_x()
      WebKit.dom_mouse_event_get_offset_x(self)
    end
    
    def get_offset_y()
      WebKit.dom_mouse_event_get_offset_y(self)
    end
    
    def get_x()
      WebKit.dom_mouse_event_get_x(self)
    end
    
    def get_y()
      WebKit.dom_mouse_event_get_y(self)
    end
    
    def get_from_element()
      DOMNode.new WebKit.dom_mouse_event_get_from_element(self)
    end
    
    def get_to_element()
      DOMNode.new WebKit.dom_mouse_event_get_to_element(self)
    end
  end
  
  class DOMMouseEvent < FFI::Struct
    include DOMMouseEventWrappers
    layout :parent_instance, DOMUIEvent.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMUIEventClass) 
  class DOMMouseEventClass < FFI::Struct
    layout :parent_class, DOMUIEventClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_type, :webkit_dom_mouse_event_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_mouse_event_init_mouse_event(self, type, can_bubble, cancelable, view, detail, screen_x, screen_y, client_x, client_y, ctrl_key, alt_key, shift_key, meta_key, button, related_target)
  # @param [DOMMouseEvent] self 
  # @param [String] type 
  # @param [Integer] can_bubble 
  # @param [Integer] cancelable 
  # @param [DOMDOMWindow] view 
  # @param [Integer] detail 
  # @param [Integer] screen_x 
  # @param [Integer] screen_y 
  # @param [Integer] client_x 
  # @param [Integer] client_y 
  # @param [Integer] ctrl_key 
  # @param [Integer] alt_key 
  # @param [Integer] shift_key 
  # @param [Integer] meta_key 
  # @param [Integer] button 
  # @param [DOMEventTarget] related_target 
  # @return [nil] 
  # @scope class
  attach_function :dom_mouse_event_init_mouse_event, :webkit_dom_mouse_event_init_mouse_event, [DOMMouseEvent, :string, :int, :int, DOMDOMWindow, :long, :long, :long, :long, :long, :int, :int, :int, :int, :ushort, DOMEventTarget], :void
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_screen_x(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_screen_x, :webkit_dom_mouse_event_get_screen_x, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_screen_y(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_screen_y, :webkit_dom_mouse_event_get_screen_y, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_client_x(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_client_x, :webkit_dom_mouse_event_get_client_x, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_client_y(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_client_y, :webkit_dom_mouse_event_get_client_y, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_ctrl_key(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_ctrl_key, :webkit_dom_mouse_event_get_ctrl_key, [DOMMouseEvent], :int
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_shift_key(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_shift_key, :webkit_dom_mouse_event_get_shift_key, [DOMMouseEvent], :int
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_alt_key(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_alt_key, :webkit_dom_mouse_event_get_alt_key, [DOMMouseEvent], :int
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_meta_key(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_meta_key, :webkit_dom_mouse_event_get_meta_key, [DOMMouseEvent], :int
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_button(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_button, :webkit_dom_mouse_event_get_button, [DOMMouseEvent], :ushort
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_related_target(self)
  # @param [DOMMouseEvent] self 
  # @return [DOMEventTarget] 
  # @scope class
  attach_function :dom_mouse_event_get_related_target, :webkit_dom_mouse_event_get_related_target, [DOMMouseEvent], DOMEventTarget
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_offset_x(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_offset_x, :webkit_dom_mouse_event_get_offset_x, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_offset_y(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_offset_y, :webkit_dom_mouse_event_get_offset_y, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_x(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_x, :webkit_dom_mouse_event_get_x, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_y(self)
  # @param [DOMMouseEvent] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_mouse_event_get_y, :webkit_dom_mouse_event_get_y, [DOMMouseEvent], :long
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_from_element(self)
  # @param [DOMMouseEvent] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_mouse_event_get_from_element, :webkit_dom_mouse_event_get_from_element, [DOMMouseEvent], DOMNode
  
  # (Not documented)
  # 
  # @method dom_mouse_event_get_to_element(self)
  # @param [DOMMouseEvent] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_mouse_event_get_to_element, :webkit_dom_mouse_event_get_to_element, [DOMMouseEvent], DOMNode
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNamedNodeMapWrappers
    def get_named_item(name)
      DOMNode.new WebKit.dom_named_node_map_get_named_item(self, name)
    end
    
    def set_named_item(node, error)
      DOMNode.new WebKit.dom_named_node_map_set_named_item(self, node, error)
    end
    
    def remove_named_item(name, error)
      DOMNode.new WebKit.dom_named_node_map_remove_named_item(self, name, error)
    end
    
    def item(index)
      DOMNode.new WebKit.dom_named_node_map_item(self, index)
    end
    
    def get_named_item_ns(namespace_uri, local_name)
      DOMNode.new WebKit.dom_named_node_map_get_named_item_ns(self, namespace_uri, local_name)
    end
    
    def set_named_item_ns(node, error)
      DOMNode.new WebKit.dom_named_node_map_set_named_item_ns(self, node, error)
    end
    
    def remove_named_item_ns(namespace_uri, local_name, error)
      DOMNode.new WebKit.dom_named_node_map_remove_named_item_ns(self, namespace_uri, local_name, error)
    end
    
    def get_length()
      WebKit.dom_named_node_map_get_length(self)
    end
  end
  
  class DOMNamedNodeMap < FFI::Struct
    include DOMNamedNodeMapWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNamedNodeMapClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_named_node_map_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_named_node_map_get_type, :webkit_dom_named_node_map_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_named_node_map_get_named_item(self, name)
  # @param [DOMNamedNodeMap] self 
  # @param [String] name 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_get_named_item, :webkit_dom_named_node_map_get_named_item, [DOMNamedNodeMap, :string], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_set_named_item(self, node, error)
  # @param [DOMNamedNodeMap] self 
  # @param [DOMNode] node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_set_named_item, :webkit_dom_named_node_map_set_named_item, [DOMNamedNodeMap, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_remove_named_item(self, name, error)
  # @param [DOMNamedNodeMap] self 
  # @param [String] name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_remove_named_item, :webkit_dom_named_node_map_remove_named_item, [DOMNamedNodeMap, :string, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_item(self, index)
  # @param [DOMNamedNodeMap] self 
  # @param [Integer] index 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_item, :webkit_dom_named_node_map_item, [DOMNamedNodeMap, :ulong], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_get_named_item_ns(self, namespace_uri, local_name)
  # @param [DOMNamedNodeMap] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_get_named_item_ns, :webkit_dom_named_node_map_get_named_item_ns, [DOMNamedNodeMap, :string, :string], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_set_named_item_ns(self, node, error)
  # @param [DOMNamedNodeMap] self 
  # @param [DOMNode] node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_set_named_item_ns, :webkit_dom_named_node_map_set_named_item_ns, [DOMNamedNodeMap, DOMNode, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_remove_named_item_ns(self, namespace_uri, local_name, error)
  # @param [DOMNamedNodeMap] self 
  # @param [String] namespace_uri 
  # @param [String] local_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_named_node_map_remove_named_item_ns, :webkit_dom_named_node_map_remove_named_item_ns, [DOMNamedNodeMap, :string, :string, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_named_node_map_get_length(self)
  # @param [DOMNamedNodeMap] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_named_node_map_get_length, :webkit_dom_named_node_map_get_length, [DOMNamedNodeMap], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNavigatorWrappers
    def java_enabled()
      WebKit.dom_navigator_java_enabled(self)
    end
    
    def get_storage_updates()
      WebKit.dom_navigator_get_storage_updates(self)
    end
    
    def get_app_code_name()
      WebKit.dom_navigator_get_app_code_name(self)
    end
    
    def get_app_name()
      WebKit.dom_navigator_get_app_name(self)
    end
    
    def get_app_version()
      WebKit.dom_navigator_get_app_version(self)
    end
    
    def get_language()
      WebKit.dom_navigator_get_language(self)
    end
    
    def get_user_agent()
      WebKit.dom_navigator_get_user_agent(self)
    end
    
    def get_platform()
      WebKit.dom_navigator_get_platform(self)
    end
    
    def get_plugins()
      DOMDOMPluginArray.new WebKit.dom_navigator_get_plugins(self)
    end
    
    def get_mime_types()
      DOMDOMMimeTypeArray.new WebKit.dom_navigator_get_mime_types(self)
    end
    
    def get_product()
      WebKit.dom_navigator_get_product(self)
    end
    
    def get_product_sub()
      WebKit.dom_navigator_get_product_sub(self)
    end
    
    def get_vendor()
      WebKit.dom_navigator_get_vendor(self)
    end
    
    def get_vendor_sub()
      WebKit.dom_navigator_get_vendor_sub(self)
    end
    
    def get_cookie_enabled()
      WebKit.dom_navigator_get_cookie_enabled(self)
    end
    
    def get_on_line()
      WebKit.dom_navigator_get_on_line(self)
    end
    
    def get_geolocation()
      DOMGeolocation.new WebKit.dom_navigator_get_geolocation(self)
    end
  end
  
  class DOMNavigator < FFI::Struct
    include DOMNavigatorWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNavigatorClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_navigator_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_navigator_get_type, :webkit_dom_navigator_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_navigator_java_enabled(self)
  # @param [DOMNavigator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_navigator_java_enabled, :webkit_dom_navigator_java_enabled, [DOMNavigator], :int
  
  # (Not documented)
  # 
  # @method dom_navigator_get_storage_updates(self)
  # @param [DOMNavigator] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_navigator_get_storage_updates, :webkit_dom_navigator_get_storage_updates, [DOMNavigator], :void
  
  # (Not documented)
  # 
  # @method dom_navigator_get_app_code_name(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_app_code_name, :webkit_dom_navigator_get_app_code_name, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_app_name(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_app_name, :webkit_dom_navigator_get_app_name, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_app_version(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_app_version, :webkit_dom_navigator_get_app_version, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_language(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_language, :webkit_dom_navigator_get_language, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_user_agent(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_user_agent, :webkit_dom_navigator_get_user_agent, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_platform(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_platform, :webkit_dom_navigator_get_platform, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_plugins(self)
  # @param [DOMNavigator] self 
  # @return [DOMDOMPluginArray] 
  # @scope class
  attach_function :dom_navigator_get_plugins, :webkit_dom_navigator_get_plugins, [DOMNavigator], DOMDOMPluginArray
  
  # (Not documented)
  # 
  # @method dom_navigator_get_mime_types(self)
  # @param [DOMNavigator] self 
  # @return [DOMDOMMimeTypeArray] 
  # @scope class
  attach_function :dom_navigator_get_mime_types, :webkit_dom_navigator_get_mime_types, [DOMNavigator], DOMDOMMimeTypeArray
  
  # (Not documented)
  # 
  # @method dom_navigator_get_product(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_product, :webkit_dom_navigator_get_product, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_product_sub(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_product_sub, :webkit_dom_navigator_get_product_sub, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_vendor(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_vendor, :webkit_dom_navigator_get_vendor, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_vendor_sub(self)
  # @param [DOMNavigator] self 
  # @return [String] 
  # @scope class
  attach_function :dom_navigator_get_vendor_sub, :webkit_dom_navigator_get_vendor_sub, [DOMNavigator], :string
  
  # (Not documented)
  # 
  # @method dom_navigator_get_cookie_enabled(self)
  # @param [DOMNavigator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_navigator_get_cookie_enabled, :webkit_dom_navigator_get_cookie_enabled, [DOMNavigator], :int
  
  # (Not documented)
  # 
  # @method dom_navigator_get_on_line(self)
  # @param [DOMNavigator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_navigator_get_on_line, :webkit_dom_navigator_get_on_line, [DOMNavigator], :int
  
  # (Not documented)
  # 
  # @method dom_navigator_get_geolocation(self)
  # @param [DOMNavigator] self 
  # @return [DOMGeolocation] 
  # @scope class
  attach_function :dom_navigator_get_geolocation, :webkit_dom_navigator_get_geolocation, [DOMNavigator], DOMGeolocation
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNodeFilterWrappers
    def accept_node(n)
      WebKit.dom_node_filter_accept_node(self, n)
    end
  end
  
  class DOMNodeFilter < FFI::Struct
    include DOMNodeFilterWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNodeFilterClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_node_filter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_filter_get_type, :webkit_dom_node_filter_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_node_filter_accept_node(self, n)
  # @param [DOMNodeFilter] self 
  # @param [DOMNode] n 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_filter_accept_node, :webkit_dom_node_filter_accept_node, [DOMNodeFilter, DOMNode], :short
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNodeIteratorWrappers
    def next_node(error)
      DOMNode.new WebKit.dom_node_iterator_next_node(self, error)
    end
    
    def previous_node(error)
      DOMNode.new WebKit.dom_node_iterator_previous_node(self, error)
    end
    
    def detach()
      WebKit.dom_node_iterator_detach(self)
    end
    
    def get_root()
      DOMNode.new WebKit.dom_node_iterator_get_root(self)
    end
    
    def get_what_to_show()
      WebKit.dom_node_iterator_get_what_to_show(self)
    end
    
    def get_filter()
      DOMNodeFilter.new WebKit.dom_node_iterator_get_filter(self)
    end
    
    def get_expand_entity_references()
      WebKit.dom_node_iterator_get_expand_entity_references(self)
    end
    
    def get_reference_node()
      DOMNode.new WebKit.dom_node_iterator_get_reference_node(self)
    end
    
    def get_pointer_before_reference_node()
      WebKit.dom_node_iterator_get_pointer_before_reference_node(self)
    end
  end
  
  class DOMNodeIterator < FFI::Struct
    include DOMNodeIteratorWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNodeIteratorClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_iterator_get_type, :webkit_dom_node_iterator_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_node_iterator_next_node(self, error)
  # @param [DOMNodeIterator] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_iterator_next_node, :webkit_dom_node_iterator_next_node, [DOMNodeIterator, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_iterator_previous_node(self, error)
  # @param [DOMNodeIterator] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_iterator_previous_node, :webkit_dom_node_iterator_previous_node, [DOMNodeIterator, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_iterator_detach(self)
  # @param [DOMNodeIterator] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_node_iterator_detach, :webkit_dom_node_iterator_detach, [DOMNodeIterator], :void
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_root(self)
  # @param [DOMNodeIterator] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_iterator_get_root, :webkit_dom_node_iterator_get_root, [DOMNodeIterator], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_what_to_show(self)
  # @param [DOMNodeIterator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_iterator_get_what_to_show, :webkit_dom_node_iterator_get_what_to_show, [DOMNodeIterator], :ulong
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_filter(self)
  # @param [DOMNodeIterator] self 
  # @return [DOMNodeFilter] 
  # @scope class
  attach_function :dom_node_iterator_get_filter, :webkit_dom_node_iterator_get_filter, [DOMNodeIterator], DOMNodeFilter
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_expand_entity_references(self)
  # @param [DOMNodeIterator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_iterator_get_expand_entity_references, :webkit_dom_node_iterator_get_expand_entity_references, [DOMNodeIterator], :int
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_reference_node(self)
  # @param [DOMNodeIterator] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_iterator_get_reference_node, :webkit_dom_node_iterator_get_reference_node, [DOMNodeIterator], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_iterator_get_pointer_before_reference_node(self)
  # @param [DOMNodeIterator] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_iterator_get_pointer_before_reference_node, :webkit_dom_node_iterator_get_pointer_before_reference_node, [DOMNodeIterator], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMNodeListWrappers
    def item(index)
      DOMNode.new WebKit.dom_node_list_item(self, index)
    end
    
    def get_length()
      WebKit.dom_node_list_get_length(self)
    end
  end
  
  class DOMNodeList < FFI::Struct
    include DOMNodeListWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMNodeListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_node_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_list_get_type, :webkit_dom_node_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_node_list_item(self, index)
  # @param [DOMNodeList] self 
  # @param [Integer] index 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_node_list_item, :webkit_dom_node_list_item, [DOMNodeList, :ulong], DOMNode
  
  # (Not documented)
  # 
  # @method dom_node_list_get_length(self)
  # @param [DOMNodeList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_node_list_get_length, :webkit_dom_node_list_get_length, [DOMNodeList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMNode) 
  module DOMProcessingInstructionWrappers
    def get_target()
      WebKit.dom_processing_instruction_get_target(self)
    end
    
    def get_data()
      WebKit.dom_processing_instruction_get_data(self)
    end
    
    def set_data(value, error)
      WebKit.dom_processing_instruction_set_data(self, value, error)
    end
    
    def get_sheet()
      DOMStyleSheet.new WebKit.dom_processing_instruction_get_sheet(self)
    end
  end
  
  class DOMProcessingInstruction < FFI::Struct
    include DOMProcessingInstructionWrappers
    layout :parent_instance, DOMNode.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMNodeClass) 
  class DOMProcessingInstructionClass < FFI::Struct
    layout :parent_class, DOMNodeClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_processing_instruction_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_processing_instruction_get_type, :webkit_dom_processing_instruction_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_processing_instruction_get_target(self)
  # @param [DOMProcessingInstruction] self 
  # @return [String] 
  # @scope class
  attach_function :dom_processing_instruction_get_target, :webkit_dom_processing_instruction_get_target, [DOMProcessingInstruction], :string
  
  # (Not documented)
  # 
  # @method dom_processing_instruction_get_data(self)
  # @param [DOMProcessingInstruction] self 
  # @return [String] 
  # @scope class
  attach_function :dom_processing_instruction_get_data, :webkit_dom_processing_instruction_get_data, [DOMProcessingInstruction], :string
  
  # (Not documented)
  # 
  # @method dom_processing_instruction_set_data(self, value, error)
  # @param [DOMProcessingInstruction] self 
  # @param [String] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_processing_instruction_set_data, :webkit_dom_processing_instruction_set_data, [DOMProcessingInstruction, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_processing_instruction_get_sheet(self)
  # @param [DOMProcessingInstruction] self 
  # @return [DOMStyleSheet] 
  # @scope class
  attach_function :dom_processing_instruction_get_sheet, :webkit_dom_processing_instruction_get_sheet, [DOMProcessingInstruction], DOMStyleSheet
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMRangeWrappers
    def set_start(ref_node, offset, error)
      WebKit.dom_range_set_start(self, ref_node, offset, error)
    end
    
    def set_end(ref_node, offset, error)
      WebKit.dom_range_set_end(self, ref_node, offset, error)
    end
    
    def set_start_before(ref_node, error)
      WebKit.dom_range_set_start_before(self, ref_node, error)
    end
    
    def set_start_after(ref_node, error)
      WebKit.dom_range_set_start_after(self, ref_node, error)
    end
    
    def set_end_before(ref_node, error)
      WebKit.dom_range_set_end_before(self, ref_node, error)
    end
    
    def set_end_after(ref_node, error)
      WebKit.dom_range_set_end_after(self, ref_node, error)
    end
    
    def collapse(to_start, error)
      WebKit.dom_range_collapse(self, to_start, error)
    end
    
    def select_node(ref_node, error)
      WebKit.dom_range_select_node(self, ref_node, error)
    end
    
    def select_node_contents(ref_node, error)
      WebKit.dom_range_select_node_contents(self, ref_node, error)
    end
    
    def compare_boundary_points(how, source_range, error)
      WebKit.dom_range_compare_boundary_points(self, how, source_range, error)
    end
    
    def delete_contents(error)
      WebKit.dom_range_delete_contents(self, error)
    end
    
    def extract_contents(error)
      DOMDocumentFragment.new WebKit.dom_range_extract_contents(self, error)
    end
    
    def clone_contents(error)
      DOMDocumentFragment.new WebKit.dom_range_clone_contents(self, error)
    end
    
    def insert_node(new_node, error)
      WebKit.dom_range_insert_node(self, new_node, error)
    end
    
    def surround_contents(new_parent, error)
      WebKit.dom_range_surround_contents(self, new_parent, error)
    end
    
    def clone_range(error)
      DOMRange.new WebKit.dom_range_clone_range(self, error)
    end
    
    def to_string(error)
      WebKit.dom_range_to_string(self, error)
    end
    
    def detach(error)
      WebKit.dom_range_detach(self, error)
    end
    
    def create_contextual_fragment(html, error)
      DOMDocumentFragment.new WebKit.dom_range_create_contextual_fragment(self, html, error)
    end
    
    def intersects_node(ref_node, error)
      WebKit.dom_range_intersects_node(self, ref_node, error)
    end
    
    def compare_node(ref_node, error)
      WebKit.dom_range_compare_node(self, ref_node, error)
    end
    
    def compare_point(ref_node, offset, error)
      WebKit.dom_range_compare_point(self, ref_node, offset, error)
    end
    
    def is_point_in_range(ref_node, offset, error)
      WebKit.dom_range_is_point_in_range(self, ref_node, offset, error)
    end
    
    def expand(unit, error)
      WebKit.dom_range_expand(self, unit, error)
    end
    
    def get_start_container(error)
      DOMNode.new WebKit.dom_range_get_start_container(self, error)
    end
    
    def get_start_offset(error)
      WebKit.dom_range_get_start_offset(self, error)
    end
    
    def get_end_container(error)
      DOMNode.new WebKit.dom_range_get_end_container(self, error)
    end
    
    def get_end_offset(error)
      WebKit.dom_range_get_end_offset(self, error)
    end
    
    def get_collapsed(error)
      WebKit.dom_range_get_collapsed(self, error)
    end
    
    def get_common_ancestor_container(error)
      DOMNode.new WebKit.dom_range_get_common_ancestor_container(self, error)
    end
    
    def get_text()
      WebKit.dom_range_get_text(self)
    end
  end
  
  class DOMRange < FFI::Struct
    include DOMRangeWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMRangeClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_range_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_get_type, :webkit_dom_range_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_range_set_start(self, ref_node, offset, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_start, :webkit_dom_range_set_start, [DOMRange, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_set_end(self, ref_node, offset, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_end, :webkit_dom_range_set_end, [DOMRange, DOMNode, :long, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_set_start_before(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_start_before, :webkit_dom_range_set_start_before, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_set_start_after(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_start_after, :webkit_dom_range_set_start_after, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_set_end_before(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_end_before, :webkit_dom_range_set_end_before, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_set_end_after(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_set_end_after, :webkit_dom_range_set_end_after, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_collapse(self, to_start, error)
  # @param [DOMRange] self 
  # @param [Integer] to_start 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_collapse, :webkit_dom_range_collapse, [DOMRange, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_select_node(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_select_node, :webkit_dom_range_select_node, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_select_node_contents(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_select_node_contents, :webkit_dom_range_select_node_contents, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_compare_boundary_points(self, how, source_range, error)
  # @param [DOMRange] self 
  # @param [Integer] how 
  # @param [DOMRange] source_range 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_compare_boundary_points, :webkit_dom_range_compare_boundary_points, [DOMRange, :ushort, DOMRange, :pointer], :short
  
  # (Not documented)
  # 
  # @method dom_range_delete_contents(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_delete_contents, :webkit_dom_range_delete_contents, [DOMRange, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_extract_contents(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMDocumentFragment] 
  # @scope class
  attach_function :dom_range_extract_contents, :webkit_dom_range_extract_contents, [DOMRange, :pointer], DOMDocumentFragment
  
  # (Not documented)
  # 
  # @method dom_range_clone_contents(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMDocumentFragment] 
  # @scope class
  attach_function :dom_range_clone_contents, :webkit_dom_range_clone_contents, [DOMRange, :pointer], DOMDocumentFragment
  
  # (Not documented)
  # 
  # @method dom_range_insert_node(self, new_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] new_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_insert_node, :webkit_dom_range_insert_node, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_surround_contents(self, new_parent, error)
  # @param [DOMRange] self 
  # @param [DOMNode] new_parent 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_surround_contents, :webkit_dom_range_surround_contents, [DOMRange, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_clone_range(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMRange] 
  # @scope class
  attach_function :dom_range_clone_range, :webkit_dom_range_clone_range, [DOMRange, :pointer], DOMRange
  
  # (Not documented)
  # 
  # @method dom_range_to_string(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_range_to_string, :webkit_dom_range_to_string, [DOMRange, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_range_detach(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_detach, :webkit_dom_range_detach, [DOMRange, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_create_contextual_fragment(self, html, error)
  # @param [DOMRange] self 
  # @param [String] html 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMDocumentFragment] 
  # @scope class
  attach_function :dom_range_create_contextual_fragment, :webkit_dom_range_create_contextual_fragment, [DOMRange, :string, :pointer], DOMDocumentFragment
  
  # (Not documented)
  # 
  # @method dom_range_intersects_node(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_intersects_node, :webkit_dom_range_intersects_node, [DOMRange, DOMNode, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_range_compare_node(self, ref_node, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_compare_node, :webkit_dom_range_compare_node, [DOMRange, DOMNode, :pointer], :short
  
  # (Not documented)
  # 
  # @method dom_range_compare_point(self, ref_node, offset, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_compare_point, :webkit_dom_range_compare_point, [DOMRange, DOMNode, :long, :pointer], :short
  
  # (Not documented)
  # 
  # @method dom_range_is_point_in_range(self, ref_node, offset, error)
  # @param [DOMRange] self 
  # @param [DOMNode] ref_node 
  # @param [Integer] offset 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_is_point_in_range, :webkit_dom_range_is_point_in_range, [DOMRange, DOMNode, :long, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_range_expand(self, unit, error)
  # @param [DOMRange] self 
  # @param [String] unit 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_range_expand, :webkit_dom_range_expand, [DOMRange, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_range_get_start_container(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_range_get_start_container, :webkit_dom_range_get_start_container, [DOMRange, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_range_get_start_offset(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_get_start_offset, :webkit_dom_range_get_start_offset, [DOMRange, :pointer], :long
  
  # (Not documented)
  # 
  # @method dom_range_get_end_container(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_range_get_end_container, :webkit_dom_range_get_end_container, [DOMRange, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_range_get_end_offset(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_get_end_offset, :webkit_dom_range_get_end_offset, [DOMRange, :pointer], :long
  
  # (Not documented)
  # 
  # @method dom_range_get_collapsed(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_range_get_collapsed, :webkit_dom_range_get_collapsed, [DOMRange, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_range_get_common_ancestor_container(self, error)
  # @param [DOMRange] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_range_get_common_ancestor_container, :webkit_dom_range_get_common_ancestor_container, [DOMRange, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_range_get_text(self)
  # @param [DOMRange] self 
  # @return [String] 
  # @scope class
  attach_function :dom_range_get_text, :webkit_dom_range_get_text, [DOMRange], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMScreenWrappers
    def get_height()
      WebKit.dom_screen_get_height(self)
    end
    
    def get_width()
      WebKit.dom_screen_get_width(self)
    end
    
    def get_color_depth()
      WebKit.dom_screen_get_color_depth(self)
    end
    
    def get_pixel_depth()
      WebKit.dom_screen_get_pixel_depth(self)
    end
    
    def get_avail_left()
      WebKit.dom_screen_get_avail_left(self)
    end
    
    def get_avail_top()
      WebKit.dom_screen_get_avail_top(self)
    end
    
    def get_avail_height()
      WebKit.dom_screen_get_avail_height(self)
    end
    
    def get_avail_width()
      WebKit.dom_screen_get_avail_width(self)
    end
  end
  
  class DOMScreen < FFI::Struct
    include DOMScreenWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMScreenClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_screen_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_type, :webkit_dom_screen_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_height(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_height, :webkit_dom_screen_get_height, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_width(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_width, :webkit_dom_screen_get_width, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_color_depth(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_color_depth, :webkit_dom_screen_get_color_depth, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_pixel_depth(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_pixel_depth, :webkit_dom_screen_get_pixel_depth, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_avail_left(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_avail_left, :webkit_dom_screen_get_avail_left, [DOMScreen], :long
  
  # (Not documented)
  # 
  # @method dom_screen_get_avail_top(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_avail_top, :webkit_dom_screen_get_avail_top, [DOMScreen], :long
  
  # (Not documented)
  # 
  # @method dom_screen_get_avail_height(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_avail_height, :webkit_dom_screen_get_avail_height, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # @method dom_screen_get_avail_width(self)
  # @param [DOMScreen] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_screen_get_avail_width, :webkit_dom_screen_get_avail_width, [DOMScreen], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMStorageWrappers
    def key(index)
      WebKit.dom_storage_key(self, index)
    end
    
    def get_item(key)
      WebKit.dom_storage_get_item(self, key)
    end
    
    def set_item(key, data, error)
      WebKit.dom_storage_set_item(self, key, data, error)
    end
    
    def remove_item(key)
      WebKit.dom_storage_remove_item(self, key)
    end
    
    def clear()
      WebKit.dom_storage_clear(self)
    end
    
    def get_length()
      WebKit.dom_storage_get_length(self)
    end
  end
  
  class DOMStorage < FFI::Struct
    include DOMStorageWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMStorageClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_storage_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_storage_get_type, :webkit_dom_storage_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_storage_key(self, index)
  # @param [DOMStorage] self 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :dom_storage_key, :webkit_dom_storage_key, [DOMStorage, :ulong], :string
  
  # (Not documented)
  # 
  # @method dom_storage_get_item(self, key)
  # @param [DOMStorage] self 
  # @param [String] key 
  # @return [String] 
  # @scope class
  attach_function :dom_storage_get_item, :webkit_dom_storage_get_item, [DOMStorage, :string], :string
  
  # (Not documented)
  # 
  # @method dom_storage_set_item(self, key, data, error)
  # @param [DOMStorage] self 
  # @param [String] key 
  # @param [String] data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_storage_set_item, :webkit_dom_storage_set_item, [DOMStorage, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method dom_storage_remove_item(self, key)
  # @param [DOMStorage] self 
  # @param [String] key 
  # @return [nil] 
  # @scope class
  attach_function :dom_storage_remove_item, :webkit_dom_storage_remove_item, [DOMStorage, :string], :void
  
  # (Not documented)
  # 
  # @method dom_storage_clear(self)
  # @param [DOMStorage] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_storage_clear, :webkit_dom_storage_clear, [DOMStorage], :void
  
  # (Not documented)
  # 
  # @method dom_storage_get_length(self)
  # @param [DOMStorage] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_storage_get_length, :webkit_dom_storage_get_length, [DOMStorage], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMStyleMediaWrappers
    def match_medium(mediaquery)
      WebKit.dom_style_media_match_medium(self, mediaquery)
    end
  end
  
  class DOMStyleMedia < FFI::Struct
    include DOMStyleMediaWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMStyleMediaClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_style_media_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_media_get_type, :webkit_dom_style_media_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_style_media_match_medium(self, mediaquery)
  # @param [DOMStyleMedia] self 
  # @param [String] mediaquery 
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_media_match_medium, :webkit_dom_style_media_match_medium, [DOMStyleMedia, :string], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMStyleSheetListWrappers
    def item(index)
      DOMStyleSheet.new WebKit.dom_style_sheet_list_item(self, index)
    end
    
    def get_length()
      WebKit.dom_style_sheet_list_get_length(self)
    end
  end
  
  class DOMStyleSheetList < FFI::Struct
    include DOMStyleSheetListWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMStyleSheetListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_style_sheet_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_sheet_list_get_type, :webkit_dom_style_sheet_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_style_sheet_list_item(self, index)
  # @param [DOMStyleSheetList] self 
  # @param [Integer] index 
  # @return [DOMStyleSheet] 
  # @scope class
  attach_function :dom_style_sheet_list_item, :webkit_dom_style_sheet_list_item, [DOMStyleSheetList, :ulong], DOMStyleSheet
  
  # (Not documented)
  # 
  # @method dom_style_sheet_list_get_length(self)
  # @param [DOMStyleSheetList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_style_sheet_list_get_length, :webkit_dom_style_sheet_list_get_length, [DOMStyleSheetList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMTimeRangesWrappers
    def start(index, error)
      WebKit.dom_time_ranges_start(self, index, error)
    end
    
    def end(index, error)
      WebKit.dom_time_ranges_end(self, index, error)
    end
    
    def get_length()
      WebKit.dom_time_ranges_get_length(self)
    end
  end
  
  class DOMTimeRanges < FFI::Struct
    include DOMTimeRangesWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMTimeRangesClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_time_ranges_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_time_ranges_get_type, :webkit_dom_time_ranges_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_time_ranges_start(self, index, error)
  # @param [DOMTimeRanges] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Float] 
  # @scope class
  attach_function :dom_time_ranges_start, :webkit_dom_time_ranges_start, [DOMTimeRanges, :ulong, :pointer], :float
  
  # (Not documented)
  # 
  # @method dom_time_ranges_end(self, index, error)
  # @param [DOMTimeRanges] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Float] 
  # @scope class
  attach_function :dom_time_ranges_end, :webkit_dom_time_ranges_end, [DOMTimeRanges, :ulong, :pointer], :float
  
  # (Not documented)
  # 
  # @method dom_time_ranges_get_length(self)
  # @param [DOMTimeRanges] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_time_ranges_get_length, :webkit_dom_time_ranges_get_length, [DOMTimeRanges], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMTreeWalkerWrappers
    def parent_node()
      DOMNode.new WebKit.dom_tree_walker_parent_node(self)
    end
    
    def first_child()
      DOMNode.new WebKit.dom_tree_walker_first_child(self)
    end
    
    def last_child()
      DOMNode.new WebKit.dom_tree_walker_last_child(self)
    end
    
    def previous_sibling()
      DOMNode.new WebKit.dom_tree_walker_previous_sibling(self)
    end
    
    def next_sibling()
      DOMNode.new WebKit.dom_tree_walker_next_sibling(self)
    end
    
    def previous_node()
      DOMNode.new WebKit.dom_tree_walker_previous_node(self)
    end
    
    def next_node()
      DOMNode.new WebKit.dom_tree_walker_next_node(self)
    end
    
    def get_root()
      DOMNode.new WebKit.dom_tree_walker_get_root(self)
    end
    
    def get_what_to_show()
      WebKit.dom_tree_walker_get_what_to_show(self)
    end
    
    def get_filter()
      DOMNodeFilter.new WebKit.dom_tree_walker_get_filter(self)
    end
    
    def get_expand_entity_references()
      WebKit.dom_tree_walker_get_expand_entity_references(self)
    end
    
    def get_current_node()
      DOMNode.new WebKit.dom_tree_walker_get_current_node(self)
    end
    
    def set_current_node(value, error)
      WebKit.dom_tree_walker_set_current_node(self, value, error)
    end
  end
  
  class DOMTreeWalker < FFI::Struct
    include DOMTreeWalkerWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMTreeWalkerClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_tree_walker_get_type, :webkit_dom_tree_walker_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_tree_walker_parent_node(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_parent_node, :webkit_dom_tree_walker_parent_node, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_first_child(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_first_child, :webkit_dom_tree_walker_first_child, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_last_child(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_last_child, :webkit_dom_tree_walker_last_child, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_previous_sibling(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_previous_sibling, :webkit_dom_tree_walker_previous_sibling, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_next_sibling(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_next_sibling, :webkit_dom_tree_walker_next_sibling, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_previous_node(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_previous_node, :webkit_dom_tree_walker_previous_node, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_next_node(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_next_node, :webkit_dom_tree_walker_next_node, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_root(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_get_root, :webkit_dom_tree_walker_get_root, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_what_to_show(self)
  # @param [DOMTreeWalker] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_tree_walker_get_what_to_show, :webkit_dom_tree_walker_get_what_to_show, [DOMTreeWalker], :ulong
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_filter(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNodeFilter] 
  # @scope class
  attach_function :dom_tree_walker_get_filter, :webkit_dom_tree_walker_get_filter, [DOMTreeWalker], DOMNodeFilter
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_expand_entity_references(self)
  # @param [DOMTreeWalker] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_tree_walker_get_expand_entity_references, :webkit_dom_tree_walker_get_expand_entity_references, [DOMTreeWalker], :int
  
  # (Not documented)
  # 
  # @method dom_tree_walker_get_current_node(self)
  # @param [DOMTreeWalker] self 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_tree_walker_get_current_node, :webkit_dom_tree_walker_get_current_node, [DOMTreeWalker], DOMNode
  
  # (Not documented)
  # 
  # @method dom_tree_walker_set_current_node(self, value, error)
  # @param [DOMTreeWalker] self 
  # @param [DOMNode] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :dom_tree_walker_set_current_node, :webkit_dom_tree_walker_set_current_node, [DOMTreeWalker, DOMNode, :pointer], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  module DOMValidityStateWrappers
    def get_value_missing()
      WebKit.dom_validity_state_get_value_missing(self)
    end
    
    def get_type_mismatch()
      WebKit.dom_validity_state_get_type_mismatch(self)
    end
    
    def get_pattern_mismatch()
      WebKit.dom_validity_state_get_pattern_mismatch(self)
    end
    
    def get_too_long()
      WebKit.dom_validity_state_get_too_long(self)
    end
    
    def get_range_underflow()
      WebKit.dom_validity_state_get_range_underflow(self)
    end
    
    def get_range_overflow()
      WebKit.dom_validity_state_get_range_overflow(self)
    end
    
    def get_step_mismatch()
      WebKit.dom_validity_state_get_step_mismatch(self)
    end
    
    def get_custom_error()
      WebKit.dom_validity_state_get_custom_error(self)
    end
    
    def get_valid()
      WebKit.dom_validity_state_get_valid(self)
    end
  end
  
  class DOMValidityState < FFI::Struct
    include DOMValidityStateWrappers
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMValidityStateClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_type, :webkit_dom_validity_state_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_value_missing(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_value_missing, :webkit_dom_validity_state_get_value_missing, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_type_mismatch(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_type_mismatch, :webkit_dom_validity_state_get_type_mismatch, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_pattern_mismatch(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_pattern_mismatch, :webkit_dom_validity_state_get_pattern_mismatch, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_too_long(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_too_long, :webkit_dom_validity_state_get_too_long, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_range_underflow(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_range_underflow, :webkit_dom_validity_state_get_range_underflow, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_range_overflow(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_range_overflow, :webkit_dom_validity_state_get_range_overflow, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_step_mismatch(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_step_mismatch, :webkit_dom_validity_state_get_step_mismatch, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_custom_error(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_custom_error, :webkit_dom_validity_state_get_custom_error, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # @method dom_validity_state_get_valid(self)
  # @param [DOMValidityState] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_validity_state_get_valid, :webkit_dom_validity_state_get_valid, [DOMValidityState], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMWebKitAnimation < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMWebKitAnimationClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_get_type, :webkit_dom_webkit_animation_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_play(self)
  # @param [DOMWebKitAnimation] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_webkit_animation_play, :webkit_dom_webkit_animation_play, [DOMWebKitAnimation], :void
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_pause(self)
  # @param [DOMWebKitAnimation] self 
  # @return [nil] 
  # @scope class
  attach_function :dom_webkit_animation_pause, :webkit_dom_webkit_animation_pause, [DOMWebKitAnimation], :void
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_name(self)
  # @param [DOMWebKitAnimation] self 
  # @return [String] 
  # @scope class
  attach_function :dom_webkit_animation_get_name, :webkit_dom_webkit_animation_get_name, [DOMWebKitAnimation], :string
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_duration(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_webkit_animation_get_duration, :webkit_dom_webkit_animation_get_duration, [DOMWebKitAnimation], :double
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_elapsed_time(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_webkit_animation_get_elapsed_time, :webkit_dom_webkit_animation_get_elapsed_time, [DOMWebKitAnimation], :double
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_set_elapsed_time(self, value)
  # @param [DOMWebKitAnimation] self 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_webkit_animation_set_elapsed_time, :webkit_dom_webkit_animation_set_elapsed_time, [DOMWebKitAnimation, :double], :void
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_delay(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_webkit_animation_get_delay, :webkit_dom_webkit_animation_get_delay, [DOMWebKitAnimation], :double
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_paused(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_get_paused, :webkit_dom_webkit_animation_get_paused, [DOMWebKitAnimation], :int
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_ended(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_get_ended, :webkit_dom_webkit_animation_get_ended, [DOMWebKitAnimation], :int
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_direction(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_get_direction, :webkit_dom_webkit_animation_get_direction, [DOMWebKitAnimation], :ushort
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_get_fill_mode(self)
  # @param [DOMWebKitAnimation] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_get_fill_mode, :webkit_dom_webkit_animation_get_fill_mode, [DOMWebKitAnimation], :ushort
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMWebKitAnimationList < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMWebKitAnimationListClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_list_get_type, :webkit_dom_webkit_animation_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_list_item(self, index)
  # @param [DOMWebKitAnimationList] self 
  # @param [Integer] index 
  # @return [DOMWebKitAnimation] 
  # @scope class
  attach_function :dom_webkit_animation_list_item, :webkit_dom_webkit_animation_list_item, [DOMWebKitAnimationList, :ulong], DOMWebKitAnimation
  
  # (Not documented)
  # 
  # @method dom_webkit_animation_list_get_length(self)
  # @param [DOMWebKitAnimationList] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_animation_list_get_length, :webkit_dom_webkit_animation_list_get_length, [DOMWebKitAnimationList], :ulong
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMWebKitPoint < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMWebKitPointClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_webkit_point_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_webkit_point_get_type, :webkit_dom_webkit_point_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_webkit_point_get_x(self)
  # @param [DOMWebKitPoint] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_webkit_point_get_x, :webkit_dom_webkit_point_get_x, [DOMWebKitPoint], :float
  
  # (Not documented)
  # 
  # @method dom_webkit_point_set_x(self, value)
  # @param [DOMWebKitPoint] self 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_webkit_point_set_x, :webkit_dom_webkit_point_set_x, [DOMWebKitPoint, :float], :void
  
  # (Not documented)
  # 
  # @method dom_webkit_point_get_y(self)
  # @param [DOMWebKitPoint] self 
  # @return [Float] 
  # @scope class
  attach_function :dom_webkit_point_get_y, :webkit_dom_webkit_point_get_y, [DOMWebKitPoint], :float
  
  # (Not documented)
  # 
  # @method dom_webkit_point_set_y(self, value)
  # @param [DOMWebKitPoint] self 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :dom_webkit_point_set_y, :webkit_dom_webkit_point_set_y, [DOMWebKitPoint, :float], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMXPathExpression < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMXPathExpressionClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_xpath_expression_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_expression_get_type, :webkit_dom_xpath_expression_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_xpath_expression_evaluate(self, context_node, type, in_result, error)
  # @param [DOMXPathExpression] self 
  # @param [DOMNode] context_node 
  # @param [Integer] type 
  # @param [FFI::Pointer(*WebKitDOMXPathResult)] in_result 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*WebKitDOMXPathResult)] 
  # @scope class
  attach_function :dom_xpath_expression_evaluate, :webkit_dom_xpath_expression_evaluate, [DOMXPathExpression, DOMNode, :ushort, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMXPathNSResolver < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMXPathNSResolverClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_xpath_ns_resolver_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_ns_resolver_get_type, :webkit_dom_xpath_ns_resolver_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_xpath_ns_resolver_lookup_namespace_uri(self, prefix)
  # @param [DOMXPathNSResolver] self 
  # @param [String] prefix 
  # @return [String] 
  # @scope class
  attach_function :dom_xpath_ns_resolver_lookup_namespace_uri, :webkit_dom_xpath_ns_resolver_lookup_namespace_uri, [DOMXPathNSResolver, :string], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (DOMObject) 
  class DOMXPathResult < FFI::Struct
    layout :parent_instance, DOMObject.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (DOMObjectClass) 
  class DOMXPathResultClass < FFI::Struct
    layout :parent_class, DOMObjectClass.by_value
  end
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_result_get_type, :webkit_dom_xpath_result_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method dom_xpath_result_iterate_next(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_xpath_result_iterate_next, :webkit_dom_xpath_result_iterate_next, [DOMXPathResult, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_xpath_result_snapshot_item(self, index, error)
  # @param [DOMXPathResult] self 
  # @param [Integer] index 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_xpath_result_snapshot_item, :webkit_dom_xpath_result_snapshot_item, [DOMXPathResult, :ulong, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_result_type(self)
  # @param [DOMXPathResult] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_result_get_result_type, :webkit_dom_xpath_result_get_result_type, [DOMXPathResult], :ushort
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_number_value(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Float] 
  # @scope class
  attach_function :dom_xpath_result_get_number_value, :webkit_dom_xpath_result_get_number_value, [DOMXPathResult, :pointer], :double
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_string_value(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [String] 
  # @scope class
  attach_function :dom_xpath_result_get_string_value, :webkit_dom_xpath_result_get_string_value, [DOMXPathResult, :pointer], :string
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_boolean_value(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_result_get_boolean_value, :webkit_dom_xpath_result_get_boolean_value, [DOMXPathResult, :pointer], :int
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_single_node_value(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [DOMNode] 
  # @scope class
  attach_function :dom_xpath_result_get_single_node_value, :webkit_dom_xpath_result_get_single_node_value, [DOMXPathResult, :pointer], DOMNode
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_invalid_iterator_state(self)
  # @param [DOMXPathResult] self 
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_result_get_invalid_iterator_state, :webkit_dom_xpath_result_get_invalid_iterator_state, [DOMXPathResult], :int
  
  # (Not documented)
  # 
  # @method dom_xpath_result_get_snapshot_length(self, error)
  # @param [DOMXPathResult] self 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :dom_xpath_result_get_snapshot_length, :webkit_dom_xpath_result_get_snapshot_length, [DOMXPathResult, :pointer], :ulong
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_download_status).</em>
  # 
  # === Options:
  # :webkit_download_status_created ::
  #   
  # :webkit_download_status_started ::
  #   
  # :webkit_download_status_cancelled ::
  #   
  # :webkit_download_status_finished ::
  #   
  # 
  # @method _enum_web_kit_download_status_
  # @return [Symbol]
  # @scope class
  enum :web_kit_download_status, [
    :webkit_download_status_created, 0,
    :webkit_download_status_started,
    :webkit_download_status_cancelled,
    :webkit_download_status_finished
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_download_error).</em>
  # 
  # === Options:
  # :webkit_download_error_cancelled_by_user ::
  #   
  # :webkit_download_error_destination ::
  #   
  # :webkit_download_error_network ::
  #   
  # 
  # @method _enum_web_kit_download_error_
  # @return [Symbol]
  # @scope class
  enum :web_kit_download_error, [
    :webkit_download_error_cancelled_by_user,
    :webkit_download_error_destination,
    :webkit_download_error_network
  ]
  
  # (Not documented)
  class DownloadPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (DownloadPrivate) 
  module DownloadWrappers
    def start()
      WebKit.download_start(self)
    end
    
    def cancel()
      WebKit.download_cancel(self)
    end
    
    def get_uri()
      WebKit.download_get_uri(self)
    end
    
    def get_network_request()
      NetworkRequest.new WebKit.download_get_network_request(self)
    end
    
    def get_network_response()
      NetworkResponse.new WebKit.download_get_network_response(self)
    end
    
    def get_suggested_filename()
      WebKit.download_get_suggested_filename(self)
    end
    
    def get_destination_uri()
      WebKit.download_get_destination_uri(self)
    end
    
    def set_destination_uri(destination_uri)
      WebKit.download_set_destination_uri(self, destination_uri)
    end
    
    def get_progress()
      WebKit.download_get_progress(self)
    end
    
    def get_elapsed_time()
      WebKit.download_get_elapsed_time(self)
    end
    
    def get_total_size()
      WebKit.download_get_total_size(self)
    end
    
    def get_current_size()
      WebKit.download_get_current_size(self)
    end
    
    def get_status()
      WebKit.download_get_status(self)
    end
  end
  
  class Download < FFI::Struct
    include DownloadWrappers
    layout :parent_instance, :char,
           :priv, DownloadPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class DownloadClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method download_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :download_get_type, :webkit_download_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method download_new(request)
  # @param [FFI::Pointer(*WebKitNetworkRequest)] request 
  # @return [Download] 
  # @scope class
  attach_function :download_new, :webkit_download_new, [:pointer], Download
  
  # (Not documented)
  # 
  # @method download_start(download)
  # @param [Download] download 
  # @return [nil] 
  # @scope class
  attach_function :download_start, :webkit_download_start, [Download], :void
  
  # (Not documented)
  # 
  # @method download_cancel(download)
  # @param [Download] download 
  # @return [nil] 
  # @scope class
  attach_function :download_cancel, :webkit_download_cancel, [Download], :void
  
  # (Not documented)
  # 
  # @method download_get_uri(download)
  # @param [Download] download 
  # @return [String] 
  # @scope class
  attach_function :download_get_uri, :webkit_download_get_uri, [Download], :string
  
  # (Not documented)
  # 
  # @method download_get_network_request(download)
  # @param [Download] download 
  # @return [FFI::Pointer(*WebKitNetworkRequest)] 
  # @scope class
  attach_function :download_get_network_request, :webkit_download_get_network_request, [Download], :pointer
  
  # (Not documented)
  # 
  # @method download_get_network_response(download)
  # @param [Download] download 
  # @return [FFI::Pointer(*WebKitNetworkResponse)] 
  # @scope class
  attach_function :download_get_network_response, :webkit_download_get_network_response, [Download], :pointer
  
  # (Not documented)
  # 
  # @method download_get_suggested_filename(download)
  # @param [Download] download 
  # @return [String] 
  # @scope class
  attach_function :download_get_suggested_filename, :webkit_download_get_suggested_filename, [Download], :string
  
  # (Not documented)
  # 
  # @method download_get_destination_uri(download)
  # @param [Download] download 
  # @return [String] 
  # @scope class
  attach_function :download_get_destination_uri, :webkit_download_get_destination_uri, [Download], :string
  
  # (Not documented)
  # 
  # @method download_set_destination_uri(download, destination_uri)
  # @param [Download] download 
  # @param [String] destination_uri 
  # @return [nil] 
  # @scope class
  attach_function :download_set_destination_uri, :webkit_download_set_destination_uri, [Download, :string], :void
  
  # (Not documented)
  # 
  # @method download_get_progress(download)
  # @param [Download] download 
  # @return [Float] 
  # @scope class
  attach_function :download_get_progress, :webkit_download_get_progress, [Download], :double
  
  # (Not documented)
  # 
  # @method download_get_elapsed_time(download)
  # @param [Download] download 
  # @return [Float] 
  # @scope class
  attach_function :download_get_elapsed_time, :webkit_download_get_elapsed_time, [Download], :double
  
  # (Not documented)
  # 
  # @method download_get_total_size(download)
  # @param [Download] download 
  # @return [Integer] 
  # @scope class
  attach_function :download_get_total_size, :webkit_download_get_total_size, [Download], :ulong
  
  # (Not documented)
  # 
  # @method download_get_current_size(download)
  # @param [Download] download 
  # @return [Integer] 
  # @scope class
  attach_function :download_get_current_size, :webkit_download_get_current_size, [Download], :ulong
  
  # (Not documented)
  # 
  # @method download_get_status(download)
  # @param [Download] download 
  # @return [Symbol from _enum_web_kit_download_status_] 
  # @scope class
  attach_function :download_get_status, :webkit_download_get_status, [Download], :web_kit_download_status
  
  # (Not documented)
  # 
  # @method download_status_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :download_status_get_type, :webkit_download_status_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method download_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :download_error_get_type, :webkit_download_error_get_type, [], :ulong
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_network_error).</em>
  # 
  # === Options:
  # :webkit_network_error_failed ::
  #   
  # :webkit_network_error_transport ::
  #   
  # :webkit_network_error_unknown_protocol ::
  #   
  # :webkit_network_error_cancelled ::
  #   
  # :webkit_network_error_file_does_not_exist ::
  #   
  # 
  # @method _enum_web_kit_network_error_
  # @return [Symbol]
  # @scope class
  enum :web_kit_network_error, [
    :webkit_network_error_failed, 399,
    :webkit_network_error_transport, 300,
    :webkit_network_error_unknown_protocol, 301,
    :webkit_network_error_cancelled, 302,
    :webkit_network_error_file_does_not_exist, 303
  ]
  
  # Sync'd with Mac's WebKit Errors
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_policy_error).</em>
  # 
  # === Options:
  # :webkit_policy_error_failed ::
  #   
  # :webkit_policy_error_cannot_show_mime_type ::
  #   
  # :webkit_policy_error_cannot_show_url ::
  #   
  # :webkit_policy_error_frame_load_interrupted_by_policy_change ::
  #   
  # :webkit_policy_error_cannot_use_restricted_port ::
  #   
  # 
  # @method _enum_web_kit_policy_error_
  # @return [Symbol]
  # @scope class
  enum :web_kit_policy_error, [
    :webkit_policy_error_failed, 199,
    :webkit_policy_error_cannot_show_mime_type, 100,
    :webkit_policy_error_cannot_show_url, 101,
    :webkit_policy_error_frame_load_interrupted_by_policy_change, 102,
    :webkit_policy_error_cannot_use_restricted_port, 103
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_plugin_error).</em>
  # 
  # === Options:
  # :webkit_plugin_error_failed ::
  #   
  # :webkit_plugin_error_cannot_find_plugin ::
  #   
  # :webkit_plugin_error_cannot_load_plugin ::
  #   
  # :webkit_plugin_error_java_unavailable ::
  #   
  # :webkit_plugin_error_connection_cancelled ::
  #   
  # :webkit_plugin_error_will_handle_load ::
  #   
  # 
  # @method _enum_web_kit_plugin_error_
  # @return [Symbol]
  # @scope class
  enum :web_kit_plugin_error, [
    :webkit_plugin_error_failed, 299,
    :webkit_plugin_error_cannot_find_plugin, 200,
    :webkit_plugin_error_cannot_load_plugin, 201,
    :webkit_plugin_error_java_unavailable, 202,
    :webkit_plugin_error_connection_cancelled, 203,
    :webkit_plugin_error_will_handle_load, 204
  ]
  
  # (Not documented)
  # 
  # @method network_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :network_error_quark, :webkit_network_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method policy_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :policy_error_quark, :webkit_policy_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method plugin_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :plugin_error_quark, :webkit_plugin_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method network_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :network_error_get_type, :webkit_network_error_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method policy_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :policy_error_get_type, :webkit_policy_error_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method plugin_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :plugin_error_get_type, :webkit_plugin_error_get_type, [], :ulong
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_cache_model).</em>
  # 
  # === Options:
  # :webkit_cache_model_default ::
  #   
  # :webkit_cache_model_document_viewer ::
  #   
  # :webkit_cache_model_web_browser ::
  #   
  # :webkit_cache_model_document_browser ::
  #   
  # 
  # @method _enum_web_kit_cache_model_
  # @return [Symbol]
  # @scope class
  enum :web_kit_cache_model, [
    :webkit_cache_model_default,
    :webkit_cache_model_document_viewer,
    :webkit_cache_model_web_browser,
    :webkit_cache_model_document_browser
  ]
  
  # (Not documented)
  # 
  # @method get_default_session()
  # @return [FFI::Pointer(*SoupSession)] 
  # @scope class
  attach_function :get_default_session, :webkit_get_default_session, [], :pointer
  
  # (Not documented)
  # 
  # @method get_web_plugin_database()
  # @return [FFI::Pointer(*WebKitWebPluginDatabase)] 
  # @scope class
  attach_function :get_web_plugin_database, :webkit_get_web_plugin_database, [], :pointer
  
  # (Not documented)
  # 
  # @method get_icon_database()
  # @return [FFI::Pointer(*WebKitIconDatabase)] 
  # @scope class
  attach_function :get_icon_database, :webkit_get_icon_database, [], :pointer
  
  # (Not documented)
  # 
  # @method set_cache_model(cache_model)
  # @param [Symbol from _enum_web_kit_cache_model_] cache_model 
  # @return [nil] 
  # @scope class
  attach_function :set_cache_model, :webkit_set_cache_model, [:web_kit_cache_model], :void
  
  # (Not documented)
  # 
  # @method get_cache_model()
  # @return [Symbol from _enum_web_kit_cache_model_] 
  # @scope class
  attach_function :get_cache_model, :webkit_get_cache_model, [], :web_kit_cache_model
  
  # (Not documented)
  # 
  # @method get_text_checker()
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  attach_function :get_text_checker, :webkit_get_text_checker, [], :pointer
  
  # (Not documented)
  # 
  # @method set_text_checker(checker)
  # @param [FFI::Pointer(*GObject)] checker 
  # @return [nil] 
  # @scope class
  attach_function :set_text_checker, :webkit_set_text_checker, [:pointer], :void
  
  # (Not documented)
  # 
  # @method cache_model_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cache_model_get_type, :webkit_cache_model_get_type, [], :ulong
  
  # (Not documented)
  class HitTestResultPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (HitTestResultPrivate) < private >
  class HitTestResult < FFI::Struct
    layout :parent_instance, :char,
           :priv, HitTestResultPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class HitTestResultClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # WebKitHitTestResultContext
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT: anywhere in the document.
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK: a hyperlink element.
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE: an image element.
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA: a video or audio element.
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION: the area is selected by
  # the user.
  # @WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE: the area is
  # editable by the user.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_hit_test_result_context).</em>
  # 
  # === Options:
  # 
  # @method _enum_web_kit_hit_test_result_context_
  # @return [Symbol]
  # @scope class
  enum :web_kit_hit_test_result_context, [
  ]
  
  # (Not documented)
  # 
  # @method hit_test_result_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :hit_test_result_get_type, :webkit_hit_test_result_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method hit_test_result_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :hit_test_result_context_get_type, :webkit_hit_test_result_context_get_type, [], :ulong
  
  # (Not documented)
  class NetworkRequestPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (NetworkRequestPrivate) < private >
  module NetworkRequestWrappers
    def set_uri(uri)
      WebKit.network_request_set_uri(self, uri)
    end
    
    def get_uri()
      WebKit.network_request_get_uri(self)
    end
    
    def get_message()
      WebKit.network_request_get_message(self)
    end
  end
  
  class NetworkRequest < FFI::Struct
    include NetworkRequestWrappers
    layout :parent_instance, :char,
           :priv, NetworkRequestPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class NetworkRequestClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method network_request_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :network_request_get_type, :webkit_network_request_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method network_request_new(uri)
  # @param [String] uri 
  # @return [NetworkRequest] 
  # @scope class
  attach_function :network_request_new, :webkit_network_request_new, [:string], NetworkRequest
  
  # (Not documented)
  # 
  # @method network_request_set_uri(request, uri)
  # @param [NetworkRequest] request 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :network_request_set_uri, :webkit_network_request_set_uri, [NetworkRequest, :string], :void
  
  # (Not documented)
  # 
  # @method network_request_get_uri(request)
  # @param [NetworkRequest] request 
  # @return [String] 
  # @scope class
  attach_function :network_request_get_uri, :webkit_network_request_get_uri, [NetworkRequest], :string
  
  # (Not documented)
  # 
  # @method network_request_get_message(request)
  # @param [NetworkRequest] request 
  # @return [FFI::Pointer(*SoupMessage)] 
  # @scope class
  attach_function :network_request_get_message, :webkit_network_request_get_message, [NetworkRequest], :pointer
  
  # (Not documented)
  class WebDataSourcePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebDataSourcePrivate) < private >
  module WebDataSourceWrappers
    def get_web_frame()
      WebFrame.new WebKit.web_data_source_get_web_frame(self)
    end
    
    def get_initial_request()
      NetworkRequest.new WebKit.web_data_source_get_initial_request(self)
    end
    
    def get_request()
      NetworkRequest.new WebKit.web_data_source_get_request(self)
    end
    
    def get_encoding()
      WebKit.web_data_source_get_encoding(self)
    end
    
    def is_loading()
      WebKit.web_data_source_is_loading(self)
    end
    
    def get_data()
      WebKit.web_data_source_get_data(self)
    end
    
    def get_main_resource()
      WebResource.new WebKit.web_data_source_get_main_resource(self)
    end
    
    def get_unreachable_uri()
      WebKit.web_data_source_get_unreachable_uri(self)
    end
    
    def get_subresources()
      WebKit.web_data_source_get_subresources(self)
    end
  end
  
  class WebDataSource < FFI::Struct
    include WebDataSourceWrappers
    layout :parent_instance, :char,
           :priv, WebDataSourcePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebDataSourceClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_data_source_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_data_source_get_type, :webkit_web_data_source_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_data_source_new()
  # @return [WebDataSource] 
  # @scope class
  attach_function :web_data_source_new, :webkit_web_data_source_new, [], WebDataSource
  
  # (Not documented)
  # 
  # @method web_data_source_new_with_request(request)
  # @param [NetworkRequest] request 
  # @return [WebDataSource] 
  # @scope class
  attach_function :web_data_source_new_with_request, :webkit_web_data_source_new_with_request, [NetworkRequest], WebDataSource
  
  # (Not documented)
  # 
  # @method web_data_source_get_web_frame(data_source)
  # @param [WebDataSource] data_source 
  # @return [FFI::Pointer(*WebKitWebFrame)] 
  # @scope class
  attach_function :web_data_source_get_web_frame, :webkit_web_data_source_get_web_frame, [WebDataSource], :pointer
  
  # (Not documented)
  # 
  # @method web_data_source_get_initial_request(data_source)
  # @param [WebDataSource] data_source 
  # @return [NetworkRequest] 
  # @scope class
  attach_function :web_data_source_get_initial_request, :webkit_web_data_source_get_initial_request, [WebDataSource], NetworkRequest
  
  # (Not documented)
  # 
  # @method web_data_source_get_request(data_source)
  # @param [WebDataSource] data_source 
  # @return [NetworkRequest] 
  # @scope class
  attach_function :web_data_source_get_request, :webkit_web_data_source_get_request, [WebDataSource], NetworkRequest
  
  # (Not documented)
  # 
  # @method web_data_source_get_encoding(data_source)
  # @param [WebDataSource] data_source 
  # @return [String] 
  # @scope class
  attach_function :web_data_source_get_encoding, :webkit_web_data_source_get_encoding, [WebDataSource], :string
  
  # (Not documented)
  # 
  # @method web_data_source_is_loading(data_source)
  # @param [WebDataSource] data_source 
  # @return [Integer] 
  # @scope class
  attach_function :web_data_source_is_loading, :webkit_web_data_source_is_loading, [WebDataSource], :int
  
  # (Not documented)
  # 
  # @method web_data_source_get_data(data_source)
  # @param [WebDataSource] data_source 
  # @return [FFI::Pointer(*GString)] 
  # @scope class
  attach_function :web_data_source_get_data, :webkit_web_data_source_get_data, [WebDataSource], :pointer
  
  # (Not documented)
  # 
  # @method web_data_source_get_main_resource(data_source)
  # @param [WebDataSource] data_source 
  # @return [FFI::Pointer(*WebKitWebResource)] 
  # @scope class
  attach_function :web_data_source_get_main_resource, :webkit_web_data_source_get_main_resource, [WebDataSource], :pointer
  
  # (Not documented)
  # 
  # @method web_data_source_get_unreachable_uri(data_source)
  # @param [WebDataSource] data_source 
  # @return [String] 
  # @scope class
  attach_function :web_data_source_get_unreachable_uri, :webkit_web_data_source_get_unreachable_uri, [WebDataSource], :string
  
  # (Not documented)
  # 
  # @method web_data_source_get_subresources(data_source)
  # @param [WebDataSource] data_source 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :web_data_source_get_subresources, :webkit_web_data_source_get_subresources, [WebDataSource], :pointer
  
  # (Not documented)
  class WebFramePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebFramePrivate) < private >
  module WebFrameWrappers
    def get_web_view()
      WebView.new WebKit.web_frame_get_web_view(self)
    end
    
    def get_name()
      WebKit.web_frame_get_name(self)
    end
    
    def get_title()
      WebKit.web_frame_get_title(self)
    end
    
    def get_uri()
      WebKit.web_frame_get_uri(self)
    end
    
    def get_parent()
      WebFrame.new WebKit.web_frame_get_parent(self)
    end
    
    def load_uri(uri)
      WebKit.web_frame_load_uri(self, uri)
    end
    
    def load_string(content, mime_type, encoding, base_uri)
      WebKit.web_frame_load_string(self, content, mime_type, encoding, base_uri)
    end
    
    def load_alternate_string(content, base_url, unreachable_url)
      WebKit.web_frame_load_alternate_string(self, content, base_url, unreachable_url)
    end
    
    def load_request(request)
      WebKit.web_frame_load_request(self, request)
    end
    
    def stop_loading()
      WebKit.web_frame_stop_loading(self)
    end
    
    def reload()
      WebKit.web_frame_reload(self)
    end
    
    def find_frame(name)
      WebFrame.new WebKit.web_frame_find_frame(self, name)
    end
    
    def get_global_context()
      WebKit.web_frame_get_global_context(self)
    end
    
    def print_full(operation, action, error)
      WebKit.web_frame_print_full(self, operation, action, error)
    end
    
    def print()
      WebKit.web_frame_print(self)
    end
    
    def get_load_status()
      WebKit.web_frame_get_load_status(self)
    end
    
    def get_horizontal_scrollbar_policy()
      WebKit.web_frame_get_horizontal_scrollbar_policy(self)
    end
    
    def get_vertical_scrollbar_policy()
      WebKit.web_frame_get_vertical_scrollbar_policy(self)
    end
    
    def get_data_source()
      WebDataSource.new WebKit.web_frame_get_data_source(self)
    end
    
    def get_provisional_data_source()
      WebDataSource.new WebKit.web_frame_get_provisional_data_source(self)
    end
    
    def get_security_origin()
      SecurityOrigin.new WebKit.web_frame_get_security_origin(self)
    end
    
    def get_network_response()
      NetworkResponse.new WebKit.web_frame_get_network_response(self)
    end
    
    def replace_selection(text)
      WebKit.web_frame_replace_selection(self, text)
    end
    
    def get_range_for_word_around_caret()
      DOMRange.new WebKit.web_frame_get_range_for_word_around_caret(self)
    end
  end
  
  class WebFrame < FFI::Struct
    include WebFrameWrappers
    layout :parent_instance, :char,
           :priv, WebFramePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) < public >
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved6 ::
  #   (FFI::Pointer(*)) 
  class WebFrameClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer,
           :webkit_reserved5, :pointer,
           :webkit_reserved6, :pointer
  end
  
  # WebKitLoadStatus
  # @WEBKIT_LOAD_PROVISIONAL: No data has been received yet, empty
  # structures have been allocated to perform the load; the load may
  # still fail for transport issues such as not being able to resolve a
  # name, or connect to a port.
  # @WEBKIT_LOAD_COMMITTED: The first data chunk has arrived, meaning
  # that the necessary transport requirements are stabilished, and the
  # load is being performed.
  # @WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT: The first layout with
  # actual visible content happened; one or more layouts may have
  # happened before that caused nothing to be visible on the screen,
  # because the data available at the time was not significant enough.
  # @WEBKIT_LOAD_FINISHED: This state means that everything that was
  # required to display the page has been loaded.
  # @WEBKIT_LOAD_FAILED: This state means that some error occurred
  # during the page load that prevented it from being completed. You
  # can connect to the #WebKitWebView::load-error signal if you want to
  # know precisely what kind of error occurred.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_load_status).</em>
  # 
  # === Options:
  # :webkit_load_provisional ::
  #   
  # :webkit_load_committed ::
  #   
  # :webkit_load_finished ::
  #   
  # :webkit_load_first_visually_non_empty_layout ::
  #   
  # :webkit_load_failed ::
  #   
  # 
  # @method _enum_web_kit_load_status_
  # @return [Symbol]
  # @scope class
  enum :web_kit_load_status, [
    :webkit_load_provisional,
    :webkit_load_committed,
    :webkit_load_finished,
    :webkit_load_first_visually_non_empty_layout,
    :webkit_load_failed
  ]
  
  # (Not documented)
  # 
  # @method web_frame_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_frame_get_type, :webkit_web_frame_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_frame_new(web_view)
  # @param [FFI::Pointer(*WebKitWebView)] web_view 
  # @return [WebFrame] 
  # @scope class
  attach_function :web_frame_new, :webkit_web_frame_new, [:pointer], WebFrame
  
  # (Not documented)
  # 
  # @method web_frame_get_web_view(frame)
  # @param [WebFrame] frame 
  # @return [FFI::Pointer(*WebKitWebView)] 
  # @scope class
  attach_function :web_frame_get_web_view, :webkit_web_frame_get_web_view, [WebFrame], :pointer
  
  # (Not documented)
  # 
  # @method web_frame_get_name(frame)
  # @param [WebFrame] frame 
  # @return [String] 
  # @scope class
  attach_function :web_frame_get_name, :webkit_web_frame_get_name, [WebFrame], :string
  
  # (Not documented)
  # 
  # @method web_frame_get_title(frame)
  # @param [WebFrame] frame 
  # @return [String] 
  # @scope class
  attach_function :web_frame_get_title, :webkit_web_frame_get_title, [WebFrame], :string
  
  # (Not documented)
  # 
  # @method web_frame_get_uri(frame)
  # @param [WebFrame] frame 
  # @return [String] 
  # @scope class
  attach_function :web_frame_get_uri, :webkit_web_frame_get_uri, [WebFrame], :string
  
  # (Not documented)
  # 
  # @method web_frame_get_parent(frame)
  # @param [WebFrame] frame 
  # @return [WebFrame] 
  # @scope class
  attach_function :web_frame_get_parent, :webkit_web_frame_get_parent, [WebFrame], WebFrame
  
  # (Not documented)
  # 
  # @method web_frame_load_uri(frame, uri)
  # @param [WebFrame] frame 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_load_uri, :webkit_web_frame_load_uri, [WebFrame, :string], :void
  
  # (Not documented)
  # 
  # @method web_frame_load_string(frame, content, mime_type, encoding, base_uri)
  # @param [WebFrame] frame 
  # @param [String] content 
  # @param [String] mime_type 
  # @param [String] encoding 
  # @param [String] base_uri 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_load_string, :webkit_web_frame_load_string, [WebFrame, :string, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # @method web_frame_load_alternate_string(frame, content, base_url, unreachable_url)
  # @param [WebFrame] frame 
  # @param [String] content 
  # @param [String] base_url 
  # @param [String] unreachable_url 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_load_alternate_string, :webkit_web_frame_load_alternate_string, [WebFrame, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # @method web_frame_load_request(frame, request)
  # @param [WebFrame] frame 
  # @param [NetworkRequest] request 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_load_request, :webkit_web_frame_load_request, [WebFrame, NetworkRequest], :void
  
  # (Not documented)
  # 
  # @method web_frame_stop_loading(frame)
  # @param [WebFrame] frame 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_stop_loading, :webkit_web_frame_stop_loading, [WebFrame], :void
  
  # (Not documented)
  # 
  # @method web_frame_reload(frame)
  # @param [WebFrame] frame 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_reload, :webkit_web_frame_reload, [WebFrame], :void
  
  # (Not documented)
  # 
  # @method web_frame_find_frame(frame, name)
  # @param [WebFrame] frame 
  # @param [String] name 
  # @return [WebFrame] 
  # @scope class
  attach_function :web_frame_find_frame, :webkit_web_frame_find_frame, [WebFrame, :string], WebFrame
  
  # (Not documented)
  # 
  # @method web_frame_get_global_context(frame)
  # @param [WebFrame] frame 
  # @return [FFI::Pointer(JSGlobalContextRef)] 
  # @scope class
  attach_function :web_frame_get_global_context, :webkit_web_frame_get_global_context, [WebFrame], :pointer
  
  # (Not documented)
  # 
  # @method web_frame_print_full(frame, operation, action, error)
  # @param [WebFrame] frame 
  # @param [FFI::Pointer(*GtkPrintOperation)] operation 
  # @param [unknown] action 
  # @param [FFI::Pointer(**GError)] error 
  # @return [unknown] 
  # @scope class
  attach_function :web_frame_print_full, :webkit_web_frame_print_full, [WebFrame, :pointer, :char, :pointer], :char
  
  # (Not documented)
  # 
  # @method web_frame_print(frame)
  # @param [WebFrame] frame 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_print, :webkit_web_frame_print, [WebFrame], :void
  
  # (Not documented)
  # 
  # @method web_frame_get_load_status(frame)
  # @param [WebFrame] frame 
  # @return [Symbol from _enum_web_kit_load_status_] 
  # @scope class
  attach_function :web_frame_get_load_status, :webkit_web_frame_get_load_status, [WebFrame], :web_kit_load_status
  
  # (Not documented)
  # 
  # @method web_frame_get_horizontal_scrollbar_policy(frame)
  # @param [WebFrame] frame 
  # @return [unknown] 
  # @scope class
  attach_function :web_frame_get_horizontal_scrollbar_policy, :webkit_web_frame_get_horizontal_scrollbar_policy, [WebFrame], :char
  
  # (Not documented)
  # 
  # @method web_frame_get_vertical_scrollbar_policy(frame)
  # @param [WebFrame] frame 
  # @return [unknown] 
  # @scope class
  attach_function :web_frame_get_vertical_scrollbar_policy, :webkit_web_frame_get_vertical_scrollbar_policy, [WebFrame], :char
  
  # (Not documented)
  # 
  # @method web_frame_get_data_source(frame)
  # @param [WebFrame] frame 
  # @return [WebDataSource] 
  # @scope class
  attach_function :web_frame_get_data_source, :webkit_web_frame_get_data_source, [WebFrame], WebDataSource
  
  # (Not documented)
  # 
  # @method web_frame_get_provisional_data_source(frame)
  # @param [WebFrame] frame 
  # @return [WebDataSource] 
  # @scope class
  attach_function :web_frame_get_provisional_data_source, :webkit_web_frame_get_provisional_data_source, [WebFrame], WebDataSource
  
  # (Not documented)
  # 
  # @method web_frame_get_security_origin(frame)
  # @param [WebFrame] frame 
  # @return [FFI::Pointer(*WebKitSecurityOrigin)] 
  # @scope class
  attach_function :web_frame_get_security_origin, :webkit_web_frame_get_security_origin, [WebFrame], :pointer
  
  # (Not documented)
  # 
  # @method web_frame_get_network_response(frame)
  # @param [WebFrame] frame 
  # @return [FFI::Pointer(*WebKitNetworkResponse)] 
  # @scope class
  attach_function :web_frame_get_network_response, :webkit_web_frame_get_network_response, [WebFrame], :pointer
  
  # (Not documented)
  # 
  # @method web_frame_replace_selection(frame, text)
  # @param [WebFrame] frame 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :web_frame_replace_selection, :webkit_web_frame_replace_selection, [WebFrame, :string], :void
  
  # (Not documented)
  # 
  # @method web_frame_get_range_for_word_around_caret(frame)
  # @param [WebFrame] frame 
  # @return [DOMRange] 
  # @scope class
  attach_function :web_frame_get_range_for_word_around_caret, :webkit_web_frame_get_range_for_word_around_caret, [WebFrame], DOMRange
  
  # (Not documented)
  # 
  # @method load_status_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :load_status_get_type, :webkit_load_status_get_type, [], :ulong
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_web_navigation_reason).</em>
  # 
  # === Options:
  # :webkit_web_navigation_reason_link_clicked ::
  #   
  # :webkit_web_navigation_reason_form_submitted ::
  #   
  # :webkit_web_navigation_reason_back_forward ::
  #   
  # :webkit_web_navigation_reason_reload ::
  #   
  # :webkit_web_navigation_reason_form_resubmitted ::
  #   
  # :webkit_web_navigation_reason_other ::
  #   
  # 
  # @method _enum_web_kit_web_navigation_reason_
  # @return [Symbol]
  # @scope class
  enum :web_kit_web_navigation_reason, [
    :webkit_web_navigation_reason_link_clicked,
    :webkit_web_navigation_reason_form_submitted,
    :webkit_web_navigation_reason_back_forward,
    :webkit_web_navigation_reason_reload,
    :webkit_web_navigation_reason_form_resubmitted,
    :webkit_web_navigation_reason_other
  ]
  
  # (Not documented)
  class WebNavigationActionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebNavigationActionPrivate) < private >
  module WebNavigationActionWrappers
    def get_reason()
      WebKit.web_navigation_action_get_reason(self)
    end
    
    def set_reason(reason)
      WebKit.web_navigation_action_set_reason(self, reason)
    end
    
    def get_original_uri()
      WebKit.web_navigation_action_get_original_uri(self)
    end
    
    def set_original_uri(original_uri)
      WebKit.web_navigation_action_set_original_uri(self, original_uri)
    end
    
    def get_button()
      WebKit.web_navigation_action_get_button(self)
    end
    
    def get_modifier_state()
      WebKit.web_navigation_action_get_modifier_state(self)
    end
    
    def get_target_frame()
      WebKit.web_navigation_action_get_target_frame(self)
    end
  end
  
  class WebNavigationAction < FFI::Struct
    include WebNavigationActionWrappers
    layout :parent_instance, :char,
           :priv, WebNavigationActionPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebNavigationActionClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_navigation_action_get_type, :webkit_web_navigation_action_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_reason(navigation_action)
  # @param [WebNavigationAction] navigation_action 
  # @return [Symbol from _enum_web_kit_web_navigation_reason_] 
  # @scope class
  attach_function :web_navigation_action_get_reason, :webkit_web_navigation_action_get_reason, [WebNavigationAction], :web_kit_web_navigation_reason
  
  # (Not documented)
  # 
  # @method web_navigation_action_set_reason(navigation_action, reason)
  # @param [WebNavigationAction] navigation_action 
  # @param [Symbol from _enum_web_kit_web_navigation_reason_] reason 
  # @return [nil] 
  # @scope class
  attach_function :web_navigation_action_set_reason, :webkit_web_navigation_action_set_reason, [WebNavigationAction, :web_kit_web_navigation_reason], :void
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_original_uri(navigation_action)
  # @param [WebNavigationAction] navigation_action 
  # @return [String] 
  # @scope class
  attach_function :web_navigation_action_get_original_uri, :webkit_web_navigation_action_get_original_uri, [WebNavigationAction], :string
  
  # (Not documented)
  # 
  # @method web_navigation_action_set_original_uri(navigation_action, original_uri)
  # @param [WebNavigationAction] navigation_action 
  # @param [String] original_uri 
  # @return [nil] 
  # @scope class
  attach_function :web_navigation_action_set_original_uri, :webkit_web_navigation_action_set_original_uri, [WebNavigationAction, :string], :void
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_button(navigation_action)
  # @param [WebNavigationAction] navigation_action 
  # @return [Integer] 
  # @scope class
  attach_function :web_navigation_action_get_button, :webkit_web_navigation_action_get_button, [WebNavigationAction], :int
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_modifier_state(navigation_action)
  # @param [WebNavigationAction] navigation_action 
  # @return [Integer] 
  # @scope class
  attach_function :web_navigation_action_get_modifier_state, :webkit_web_navigation_action_get_modifier_state, [WebNavigationAction], :int
  
  # (Not documented)
  # 
  # @method web_navigation_action_get_target_frame(navigation_action)
  # @param [WebNavigationAction] navigation_action 
  # @return [String] 
  # @scope class
  attach_function :web_navigation_action_get_target_frame, :webkit_web_navigation_action_get_target_frame, [WebNavigationAction], :string
  
  # (Not documented)
  # 
  # @method web_navigation_reason_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_navigation_reason_get_type, :webkit_web_navigation_reason_get_type, [], :ulong
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_editing_behavior).</em>
  # 
  # === Options:
  # :webkit_editing_behavior_mac ::
  #   
  # :webkit_editing_behavior_windows ::
  #   
  # :webkit_editing_behavior_unix ::
  #   
  # 
  # @method _enum_web_kit_editing_behavior_
  # @return [Symbol]
  # @scope class
  enum :web_kit_editing_behavior, [
    :webkit_editing_behavior_mac,
    :webkit_editing_behavior_windows,
    :webkit_editing_behavior_unix
  ]
  
  # (Not documented)
  class WebSettingsPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebSettingsPrivate) < private >
  module WebSettingsWrappers
    def copy()
      WebSettings.new WebKit.web_settings_copy(self)
    end
    
    def get_user_agent()
      WebKit.web_settings_get_user_agent(self)
    end
  end
  
  class WebSettings < FFI::Struct
    include WebSettingsWrappers
    layout :parent_instance, :char,
           :priv, WebSettingsPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WebSettingsClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_settings_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_settings_get_type, :webkit_web_settings_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_settings_new()
  # @return [WebSettings] 
  # @scope class
  attach_function :web_settings_new, :webkit_web_settings_new, [], WebSettings
  
  # (Not documented)
  # 
  # @method web_settings_copy(web_settings)
  # @param [WebSettings] web_settings 
  # @return [WebSettings] 
  # @scope class
  attach_function :web_settings_copy, :webkit_web_settings_copy, [WebSettings], WebSettings
  
  # (Not documented)
  # 
  # @method web_settings_get_user_agent(web_settings)
  # @param [WebSettings] web_settings 
  # @return [String] 
  # @scope class
  attach_function :web_settings_get_user_agent, :webkit_web_settings_get_user_agent, [WebSettings], :string
  
  # (Not documented)
  # 
  # @method editing_behavior_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :editing_behavior_get_type, :webkit_editing_behavior_get_type, [], :ulong
  
  # (Not documented)
  class WebHistoryItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebHistoryItemPrivate) < private >
  module WebHistoryItemWrappers
    def get_title()
      WebKit.web_history_item_get_title(self)
    end
    
    def get_alternate_title()
      WebKit.web_history_item_get_alternate_title(self)
    end
    
    def set_alternate_title(title)
      WebKit.web_history_item_set_alternate_title(self, title)
    end
    
    def get_uri()
      WebKit.web_history_item_get_uri(self)
    end
    
    def get_original_uri()
      WebKit.web_history_item_get_original_uri(self)
    end
    
    def get_last_visited_time()
      WebKit.web_history_item_get_last_visited_time(self)
    end
    
    def copy()
      WebHistoryItem.new WebKit.web_history_item_copy(self)
    end
  end
  
  class WebHistoryItem < FFI::Struct
    include WebHistoryItemWrappers
    layout :parent_instance, :char,
           :priv, WebHistoryItemPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebHistoryItemClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_history_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_history_item_get_type, :webkit_web_history_item_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_history_item_new()
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_history_item_new, :webkit_web_history_item_new, [], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_history_item_new_with_data(uri, title)
  # @param [String] uri 
  # @param [String] title 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_history_item_new_with_data, :webkit_web_history_item_new_with_data, [:string, :string], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_history_item_get_title(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [String] 
  # @scope class
  attach_function :web_history_item_get_title, :webkit_web_history_item_get_title, [WebHistoryItem], :string
  
  # (Not documented)
  # 
  # @method web_history_item_get_alternate_title(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [String] 
  # @scope class
  attach_function :web_history_item_get_alternate_title, :webkit_web_history_item_get_alternate_title, [WebHistoryItem], :string
  
  # (Not documented)
  # 
  # @method web_history_item_set_alternate_title(web_history_item, title)
  # @param [WebHistoryItem] web_history_item 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :web_history_item_set_alternate_title, :webkit_web_history_item_set_alternate_title, [WebHistoryItem, :string], :void
  
  # (Not documented)
  # 
  # @method web_history_item_get_uri(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [String] 
  # @scope class
  attach_function :web_history_item_get_uri, :webkit_web_history_item_get_uri, [WebHistoryItem], :string
  
  # (Not documented)
  # 
  # @method web_history_item_get_original_uri(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [String] 
  # @scope class
  attach_function :web_history_item_get_original_uri, :webkit_web_history_item_get_original_uri, [WebHistoryItem], :string
  
  # (Not documented)
  # 
  # @method web_history_item_get_last_visited_time(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [Float] 
  # @scope class
  attach_function :web_history_item_get_last_visited_time, :webkit_web_history_item_get_last_visited_time, [WebHistoryItem], :double
  
  # (Not documented)
  # 
  # @method web_history_item_copy(web_history_item)
  # @param [WebHistoryItem] web_history_item 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_history_item_copy, :webkit_web_history_item_copy, [WebHistoryItem], WebHistoryItem
  
  # (Not documented)
  class WebBackForwardListPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebBackForwardListPrivate) < private >
  module WebBackForwardListWrappers
    def go_forward()
      WebKit.web_back_forward_list_go_forward(self)
    end
    
    def go_back()
      WebKit.web_back_forward_list_go_back(self)
    end
    
    def contains_item(history_item)
      WebKit.web_back_forward_list_contains_item(self, history_item)
    end
    
    def go_to_item(history_item)
      WebKit.web_back_forward_list_go_to_item(self, history_item)
    end
    
    def get_forward_list_with_limit(limit)
      WebKit.web_back_forward_list_get_forward_list_with_limit(self, limit)
    end
    
    def get_back_list_with_limit(limit)
      WebKit.web_back_forward_list_get_back_list_with_limit(self, limit)
    end
    
    def get_back_item()
      WebHistoryItem.new WebKit.web_back_forward_list_get_back_item(self)
    end
    
    def get_current_item()
      WebHistoryItem.new WebKit.web_back_forward_list_get_current_item(self)
    end
    
    def get_forward_item()
      WebHistoryItem.new WebKit.web_back_forward_list_get_forward_item(self)
    end
    
    def get_nth_item(index)
      WebHistoryItem.new WebKit.web_back_forward_list_get_nth_item(self, index)
    end
    
    def get_back_length()
      WebKit.web_back_forward_list_get_back_length(self)
    end
    
    def get_forward_length()
      WebKit.web_back_forward_list_get_forward_length(self)
    end
    
    def get_limit()
      WebKit.web_back_forward_list_get_limit(self)
    end
    
    def set_limit(limit)
      WebKit.web_back_forward_list_set_limit(self, limit)
    end
    
    def add_item(history_item)
      WebKit.web_back_forward_list_add_item(self, history_item)
    end
    
    def clear()
      WebKit.web_back_forward_list_clear(self)
    end
  end
  
  class WebBackForwardList < FFI::Struct
    include WebBackForwardListWrappers
    layout :parent_instance, :char,
           :priv, WebBackForwardListPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebBackForwardListClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_back_forward_list_get_type, :webkit_web_back_forward_list_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_back_forward_list_new_with_web_view(web_view)
  # @param [FFI::Pointer(*WebKitWebView)] web_view 
  # @return [WebBackForwardList] 
  # @scope class
  attach_function :web_back_forward_list_new_with_web_view, :webkit_web_back_forward_list_new_with_web_view, [:pointer], WebBackForwardList
  
  # (Not documented)
  # 
  # @method web_back_forward_list_go_forward(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_go_forward, :webkit_web_back_forward_list_go_forward, [WebBackForwardList], :void
  
  # (Not documented)
  # 
  # @method web_back_forward_list_go_back(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_go_back, :webkit_web_back_forward_list_go_back, [WebBackForwardList], :void
  
  # (Not documented)
  # 
  # @method web_back_forward_list_contains_item(web_back_forward_list, history_item)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [WebHistoryItem] history_item 
  # @return [Integer] 
  # @scope class
  attach_function :web_back_forward_list_contains_item, :webkit_web_back_forward_list_contains_item, [WebBackForwardList, WebHistoryItem], :int
  
  # (Not documented)
  # 
  # @method web_back_forward_list_go_to_item(web_back_forward_list, history_item)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [WebHistoryItem] history_item 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_go_to_item, :webkit_web_back_forward_list_go_to_item, [WebBackForwardList, WebHistoryItem], :void
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_forward_list_with_limit(web_back_forward_list, limit)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [Integer] limit 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :web_back_forward_list_get_forward_list_with_limit, :webkit_web_back_forward_list_get_forward_list_with_limit, [WebBackForwardList, :int], :pointer
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_back_list_with_limit(web_back_forward_list, limit)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [Integer] limit 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :web_back_forward_list_get_back_list_with_limit, :webkit_web_back_forward_list_get_back_list_with_limit, [WebBackForwardList, :int], :pointer
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_back_item(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_back_forward_list_get_back_item, :webkit_web_back_forward_list_get_back_item, [WebBackForwardList], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_current_item(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_back_forward_list_get_current_item, :webkit_web_back_forward_list_get_current_item, [WebBackForwardList], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_forward_item(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_back_forward_list_get_forward_item, :webkit_web_back_forward_list_get_forward_item, [WebBackForwardList], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_nth_item(web_back_forward_list, index)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [Integer] index 
  # @return [WebHistoryItem] 
  # @scope class
  attach_function :web_back_forward_list_get_nth_item, :webkit_web_back_forward_list_get_nth_item, [WebBackForwardList, :int], WebHistoryItem
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_back_length(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [Integer] 
  # @scope class
  attach_function :web_back_forward_list_get_back_length, :webkit_web_back_forward_list_get_back_length, [WebBackForwardList], :int
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_forward_length(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [Integer] 
  # @scope class
  attach_function :web_back_forward_list_get_forward_length, :webkit_web_back_forward_list_get_forward_length, [WebBackForwardList], :int
  
  # (Not documented)
  # 
  # @method web_back_forward_list_get_limit(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [Integer] 
  # @scope class
  attach_function :web_back_forward_list_get_limit, :webkit_web_back_forward_list_get_limit, [WebBackForwardList], :int
  
  # (Not documented)
  # 
  # @method web_back_forward_list_set_limit(web_back_forward_list, limit)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [Integer] limit 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_set_limit, :webkit_web_back_forward_list_set_limit, [WebBackForwardList, :int], :void
  
  # (Not documented)
  # 
  # @method web_back_forward_list_add_item(web_back_forward_list, history_item)
  # @param [WebBackForwardList] web_back_forward_list 
  # @param [WebHistoryItem] history_item 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_add_item, :webkit_web_back_forward_list_add_item, [WebBackForwardList, WebHistoryItem], :void
  
  # (Not documented)
  # 
  # @method web_back_forward_list_clear(web_back_forward_list)
  # @param [WebBackForwardList] web_back_forward_list 
  # @return [nil] 
  # @scope class
  attach_function :web_back_forward_list_clear, :webkit_web_back_forward_list_clear, [WebBackForwardList], :void
  
  # (Not documented)
  class WebViewPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_navigation_response).</em>
  # 
  # === Options:
  # :webkit_navigation_response_accept ::
  #   
  # :webkit_navigation_response_ignore ::
  #   
  # :webkit_navigation_response_download ::
  #   
  # 
  # @method _enum_web_kit_navigation_response_
  # @return [Symbol]
  # @scope class
  enum :web_kit_navigation_response, [
    :webkit_navigation_response_accept,
    :webkit_navigation_response_ignore,
    :webkit_navigation_response_download
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_web_view_target_info).</em>
  # 
  # === Options:
  # :webkit_web_view_target_info_html ::
  #   
  # :webkit_web_view_target_info_text ::
  #   
  # :webkit_web_view_target_info_image ::
  #   
  # :webkit_web_view_target_info_uri_list ::
  #   
  # :webkit_web_view_target_info_netscape_url ::
  #   
  # 
  # @method _enum_web_kit_web_view_target_info_
  # @return [Symbol]
  # @scope class
  enum :web_kit_web_view_target_info, [
    :webkit_web_view_target_info_html,
    :webkit_web_view_target_info_text,
    :webkit_web_view_target_info_image,
    :webkit_web_view_target_info_uri_list,
    :webkit_web_view_target_info_netscape_url
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_web_view_view_mode).</em>
  # 
  # === Options:
  # :webkit_web_view_view_mode_windowed ::
  #   
  # :webkit_web_view_view_mode_floating ::
  #   
  # :webkit_web_view_view_mode_fullscreen ::
  #   
  # :webkit_web_view_view_mode_maximized ::
  #   
  # :webkit_web_view_view_mode_minimized ::
  #   
  # 
  # @method _enum_web_kit_web_view_view_mode_
  # @return [Symbol]
  # @scope class
  enum :web_kit_web_view_view_mode, [
    :webkit_web_view_view_mode_windowed,
    :webkit_web_view_view_mode_floating,
    :webkit_web_view_view_mode_fullscreen,
    :webkit_web_view_view_mode_maximized,
    :webkit_web_view_view_mode_minimized
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_selection_affinity).</em>
  # 
  # === Options:
  # :webkit_selection_affinity_upstream ::
  #   
  # :webkit_selection_affinity_downstream ::
  #   
  # 
  # @method _enum_web_kit_selection_affinity_
  # @return [Symbol]
  # @scope class
  enum :web_kit_selection_affinity, [
    :webkit_selection_affinity_upstream,
    :webkit_selection_affinity_downstream
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:web_kit_insert_action).</em>
  # 
  # === Options:
  # :webkit_insert_action_typed ::
  #   
  # :webkit_insert_action_pasted ::
  #   
  # :webkit_insert_action_dropped ::
  #   
  # 
  # @method _enum_web_kit_insert_action_
  # @return [Symbol]
  # @scope class
  enum :web_kit_insert_action, [
    :webkit_insert_action_typed,
    :webkit_insert_action_pasted,
    :webkit_insert_action_dropped
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebViewPrivate) < private >
  module WebViewWrappers
    def get_title()
      WebKit.web_view_get_title(self)
    end
    
    def get_uri()
      WebKit.web_view_get_uri(self)
    end
    
    def set_maintains_back_forward_list(flag)
      WebKit.web_view_set_maintains_back_forward_list(self, flag)
    end
    
    def get_back_forward_list()
      WebBackForwardList.new WebKit.web_view_get_back_forward_list(self)
    end
    
    def go_to_back_forward_item(item)
      WebKit.web_view_go_to_back_forward_item(self, item)
    end
    
    def can_go_back()
      WebKit.web_view_can_go_back(self)
    end
    
    def can_go_back_or_forward(steps)
      WebKit.web_view_can_go_back_or_forward(self, steps)
    end
    
    def can_go_forward()
      WebKit.web_view_can_go_forward(self)
    end
    
    def go_back()
      WebKit.web_view_go_back(self)
    end
    
    def go_back_or_forward(steps)
      WebKit.web_view_go_back_or_forward(self, steps)
    end
    
    def go_forward()
      WebKit.web_view_go_forward(self)
    end
    
    def stop_loading()
      WebKit.web_view_stop_loading(self)
    end
    
    def open(uri)
      WebKit.web_view_open(self, uri)
    end
    
    def reload()
      WebKit.web_view_reload(self)
    end
    
    def reload_bypass_cache()
      WebKit.web_view_reload_bypass_cache(self)
    end
    
    def load_uri(uri)
      WebKit.web_view_load_uri(self, uri)
    end
    
    def load_string(content, mime_type, encoding, base_uri)
      WebKit.web_view_load_string(self, content, mime_type, encoding, base_uri)
    end
    
    def load_html_string(content, base_uri)
      WebKit.web_view_load_html_string(self, content, base_uri)
    end
    
    def load_request(request)
      WebKit.web_view_load_request(self, request)
    end
    
    def search_text(text, case_sensitive, forward, wrap)
      WebKit.web_view_search_text(self, text, case_sensitive, forward, wrap)
    end
    
    def mark_text_matches(string, case_sensitive, limit)
      WebKit.web_view_mark_text_matches(self, string, case_sensitive, limit)
    end
    
    def set_highlight_text_matches(highlight)
      WebKit.web_view_set_highlight_text_matches(self, highlight)
    end
    
    def unmark_text_matches()
      WebKit.web_view_unmark_text_matches(self)
    end
    
    def get_main_frame()
      WebFrame.new WebKit.web_view_get_main_frame(self)
    end
    
    def get_focused_frame()
      WebFrame.new WebKit.web_view_get_focused_frame(self)
    end
    
    def execute_script(script)
      WebKit.web_view_execute_script(self, script)
    end
    
    def can_cut_clipboard()
      WebKit.web_view_can_cut_clipboard(self)
    end
    
    def can_copy_clipboard()
      WebKit.web_view_can_copy_clipboard(self)
    end
    
    def can_paste_clipboard()
      WebKit.web_view_can_paste_clipboard(self)
    end
    
    def cut_clipboard()
      WebKit.web_view_cut_clipboard(self)
    end
    
    def copy_clipboard()
      WebKit.web_view_copy_clipboard(self)
    end
    
    def paste_clipboard()
      WebKit.web_view_paste_clipboard(self)
    end
    
    def delete_selection()
      WebKit.web_view_delete_selection(self)
    end
    
    def has_selection()
      WebKit.web_view_has_selection(self)
    end
    
    def select_all()
      WebKit.web_view_select_all(self)
    end
    
    def get_editable()
      WebKit.web_view_get_editable(self)
    end
    
    def set_editable(flag)
      WebKit.web_view_set_editable(self, flag)
    end
    
    def get_copy_target_list()
      WebKit.web_view_get_copy_target_list(self)
    end
    
    def get_paste_target_list()
      WebKit.web_view_get_paste_target_list(self)
    end
    
    def set_settings(settings)
      WebKit.web_view_set_settings(self, settings)
    end
    
    def get_settings()
      WebSettings.new WebKit.web_view_get_settings(self)
    end
    
    def get_inspector()
      WebInspector.new WebKit.web_view_get_inspector(self)
    end
    
    def get_window_features()
      WebWindowFeatures.new WebKit.web_view_get_window_features(self)
    end
    
    def can_show_mime_type(mime_type)
      WebKit.web_view_can_show_mime_type(self, mime_type)
    end
    
    def get_transparent()
      WebKit.web_view_get_transparent(self)
    end
    
    def set_transparent(flag)
      WebKit.web_view_set_transparent(self, flag)
    end
    
    def get_zoom_level()
      WebKit.web_view_get_zoom_level(self)
    end
    
    def set_zoom_level(zoom_level)
      WebKit.web_view_set_zoom_level(self, zoom_level)
    end
    
    def zoom_in()
      WebKit.web_view_zoom_in(self)
    end
    
    def zoom_out()
      WebKit.web_view_zoom_out(self)
    end
    
    def get_full_content_zoom()
      WebKit.web_view_get_full_content_zoom(self)
    end
    
    def set_full_content_zoom(full_content_zoom)
      WebKit.web_view_set_full_content_zoom(self, full_content_zoom)
    end
    
    def get_encoding()
      WebKit.web_view_get_encoding(self)
    end
    
    def set_custom_encoding(encoding)
      WebKit.web_view_set_custom_encoding(self, encoding)
    end
    
    def get_custom_encoding()
      WebKit.web_view_get_custom_encoding(self)
    end
    
    def set_view_mode(mode)
      WebKit.web_view_set_view_mode(self, mode)
    end
    
    def get_view_mode()
      WebKit.web_view_get_view_mode(self)
    end
    
    def move_cursor(step, count)
      WebKit.web_view_move_cursor(self, step, count)
    end
    
    def get_load_status()
      WebKit.web_view_get_load_status(self)
    end
    
    def get_progress()
      WebKit.web_view_get_progress(self)
    end
    
    def undo()
      WebKit.web_view_undo(self)
    end
    
    def can_undo()
      WebKit.web_view_can_undo(self)
    end
    
    def redo()
      WebKit.web_view_redo(self)
    end
    
    def can_redo()
      WebKit.web_view_can_redo(self)
    end
    
    def set_view_source_mode(view_source_mode)
      WebKit.web_view_set_view_source_mode(self, view_source_mode)
    end
    
    def get_view_source_mode()
      WebKit.web_view_get_view_source_mode(self)
    end
    
    def get_hit_test_result(event)
      HitTestResult.new WebKit.web_view_get_hit_test_result(self, event)
    end
    
    def get_icon_uri()
      WebKit.web_view_get_icon_uri(self)
    end
    
    def get_icon_pixbuf()
      WebKit.web_view_get_icon_pixbuf(self)
    end
    
    def get_dom_document()
      DOMDocument.new WebKit.web_view_get_dom_document(self)
    end
    
    def get_viewport_attributes()
      ViewportAttributes.new WebKit.web_view_get_viewport_attributes(self)
    end
  end
  
  class WebView < FFI::Struct
    include WebViewWrappers
    layout :parent_instance, :char,
           :priv, WebViewPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :create_web_view ::
  #   (FFI::Pointer(*)) default handler/virtual methods
  # :web_view_ready ::
  #   (FFI::Pointer(*)) 
  # :close_web_view ::
  #   (FFI::Pointer(*)) 
  # :navigation_requested ::
  #   (FFI::Pointer(*)) 
  # :window_object_cleared ::
  #   (FFI::Pointer(*)) 
  # :choose_file ::
  #   (FFI::Pointer(*)) 
  # :script_alert ::
  #   (FFI::Pointer(*)) 
  # :script_confirm ::
  #   (FFI::Pointer(*)) 
  # :script_prompt ::
  #   (FFI::Pointer(*)) 
  # :console_message ::
  #   (FFI::Pointer(*)) 
  # :select_all ::
  #   (FFI::Pointer(*)) 
  # :cut_clipboard ::
  #   (FFI::Pointer(*)) 
  # :copy_clipboard ::
  #   (FFI::Pointer(*)) 
  # :paste_clipboard ::
  #   (FFI::Pointer(*)) 
  # :move_cursor ::
  #   (FFI::Pointer(*)) 
  # :set_scroll_adjustments ::
  #   (FFI::Pointer(*)) internal
  # :undo ::
  #   (FFI::Pointer(*)) 
  # :redo ::
  #   (FFI::Pointer(*)) 
  # :should_allow_editing_action ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  class WebViewClass < FFI::Struct
    layout :parent_class, :char,
           :create_web_view, :pointer,
           :web_view_ready, :pointer,
           :close_web_view, :pointer,
           :navigation_requested, :pointer,
           :window_object_cleared, :pointer,
           :choose_file, :pointer,
           :script_alert, :pointer,
           :script_confirm, :pointer,
           :script_prompt, :pointer,
           :console_message, :pointer,
           :select_all, :pointer,
           :cut_clipboard, :pointer,
           :copy_clipboard, :pointer,
           :paste_clipboard, :pointer,
           :move_cursor, :pointer,
           :set_scroll_adjustments, :pointer,
           :undo, :pointer,
           :redo, :pointer,
           :should_allow_editing_action, :pointer,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_view_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_view_get_type, :webkit_web_view_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_view_new()
  # @return [FFI::Pointer(*GtkWidget)] 
  # @scope class
  attach_function :web_view_new, :webkit_web_view_new, [], :pointer
  
  # (Not documented)
  # 
  # @method web_view_get_title(web_view)
  # @param [WebView] web_view 
  # @return [String] 
  # @scope class
  attach_function :web_view_get_title, :webkit_web_view_get_title, [WebView], :string
  
  # (Not documented)
  # 
  # @method web_view_get_uri(web_view)
  # @param [WebView] web_view 
  # @return [String] 
  # @scope class
  attach_function :web_view_get_uri, :webkit_web_view_get_uri, [WebView], :string
  
  # (Not documented)
  # 
  # @method web_view_set_maintains_back_forward_list(web_view, flag)
  # @param [WebView] web_view 
  # @param [Integer] flag 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_maintains_back_forward_list, :webkit_web_view_set_maintains_back_forward_list, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_back_forward_list(web_view)
  # @param [WebView] web_view 
  # @return [WebBackForwardList] 
  # @scope class
  attach_function :web_view_get_back_forward_list, :webkit_web_view_get_back_forward_list, [WebView], WebBackForwardList
  
  # (Not documented)
  # 
  # @method web_view_go_to_back_forward_item(web_view, item)
  # @param [WebView] web_view 
  # @param [WebHistoryItem] item 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_go_to_back_forward_item, :webkit_web_view_go_to_back_forward_item, [WebView, WebHistoryItem], :int
  
  # (Not documented)
  # 
  # @method web_view_can_go_back(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_go_back, :webkit_web_view_can_go_back, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_can_go_back_or_forward(web_view, steps)
  # @param [WebView] web_view 
  # @param [Integer] steps 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_go_back_or_forward, :webkit_web_view_can_go_back_or_forward, [WebView, :int], :int
  
  # (Not documented)
  # 
  # @method web_view_can_go_forward(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_go_forward, :webkit_web_view_can_go_forward, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_go_back(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_go_back, :webkit_web_view_go_back, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_go_back_or_forward(web_view, steps)
  # @param [WebView] web_view 
  # @param [Integer] steps 
  # @return [nil] 
  # @scope class
  attach_function :web_view_go_back_or_forward, :webkit_web_view_go_back_or_forward, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_go_forward(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_go_forward, :webkit_web_view_go_forward, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_stop_loading(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_stop_loading, :webkit_web_view_stop_loading, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_open(web_view, uri)
  # @param [WebView] web_view 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :web_view_open, :webkit_web_view_open, [WebView, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_reload(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_reload, :webkit_web_view_reload, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_reload_bypass_cache(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_reload_bypass_cache, :webkit_web_view_reload_bypass_cache, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_load_uri(web_view, uri)
  # @param [WebView] web_view 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :web_view_load_uri, :webkit_web_view_load_uri, [WebView, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_load_string(web_view, content, mime_type, encoding, base_uri)
  # @param [WebView] web_view 
  # @param [String] content 
  # @param [String] mime_type 
  # @param [String] encoding 
  # @param [String] base_uri 
  # @return [nil] 
  # @scope class
  attach_function :web_view_load_string, :webkit_web_view_load_string, [WebView, :string, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_load_html_string(web_view, content, base_uri)
  # @param [WebView] web_view 
  # @param [String] content 
  # @param [String] base_uri 
  # @return [nil] 
  # @scope class
  attach_function :web_view_load_html_string, :webkit_web_view_load_html_string, [WebView, :string, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_load_request(web_view, request)
  # @param [WebView] web_view 
  # @param [NetworkRequest] request 
  # @return [nil] 
  # @scope class
  attach_function :web_view_load_request, :webkit_web_view_load_request, [WebView, NetworkRequest], :void
  
  # (Not documented)
  # 
  # @method web_view_search_text(web_view, text, case_sensitive, forward, wrap)
  # @param [WebView] web_view 
  # @param [String] text 
  # @param [Integer] case_sensitive 
  # @param [Integer] forward 
  # @param [Integer] wrap 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_search_text, :webkit_web_view_search_text, [WebView, :string, :int, :int, :int], :int
  
  # (Not documented)
  # 
  # @method web_view_mark_text_matches(web_view, string, case_sensitive, limit)
  # @param [WebView] web_view 
  # @param [String] string 
  # @param [Integer] case_sensitive 
  # @param [Integer] limit 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_mark_text_matches, :webkit_web_view_mark_text_matches, [WebView, :string, :int, :uint], :uint
  
  # (Not documented)
  # 
  # @method web_view_set_highlight_text_matches(web_view, highlight)
  # @param [WebView] web_view 
  # @param [Integer] highlight 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_highlight_text_matches, :webkit_web_view_set_highlight_text_matches, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_unmark_text_matches(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_unmark_text_matches, :webkit_web_view_unmark_text_matches, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_get_main_frame(web_view)
  # @param [WebView] web_view 
  # @return [WebFrame] 
  # @scope class
  attach_function :web_view_get_main_frame, :webkit_web_view_get_main_frame, [WebView], WebFrame
  
  # (Not documented)
  # 
  # @method web_view_get_focused_frame(web_view)
  # @param [WebView] web_view 
  # @return [WebFrame] 
  # @scope class
  attach_function :web_view_get_focused_frame, :webkit_web_view_get_focused_frame, [WebView], WebFrame
  
  # (Not documented)
  # 
  # @method web_view_execute_script(web_view, script)
  # @param [WebView] web_view 
  # @param [String] script 
  # @return [nil] 
  # @scope class
  attach_function :web_view_execute_script, :webkit_web_view_execute_script, [WebView, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_can_cut_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_cut_clipboard, :webkit_web_view_can_cut_clipboard, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_can_copy_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_copy_clipboard, :webkit_web_view_can_copy_clipboard, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_can_paste_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_paste_clipboard, :webkit_web_view_can_paste_clipboard, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_cut_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_cut_clipboard, :webkit_web_view_cut_clipboard, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_copy_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_copy_clipboard, :webkit_web_view_copy_clipboard, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_paste_clipboard(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_paste_clipboard, :webkit_web_view_paste_clipboard, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_delete_selection(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_delete_selection, :webkit_web_view_delete_selection, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_has_selection(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_has_selection, :webkit_web_view_has_selection, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_select_all(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_select_all, :webkit_web_view_select_all, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_get_editable(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_get_editable, :webkit_web_view_get_editable, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_set_editable(web_view, flag)
  # @param [WebView] web_view 
  # @param [Integer] flag 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_editable, :webkit_web_view_set_editable, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_copy_target_list(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*GtkTargetList)] 
  # @scope class
  attach_function :web_view_get_copy_target_list, :webkit_web_view_get_copy_target_list, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method web_view_get_paste_target_list(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*GtkTargetList)] 
  # @scope class
  attach_function :web_view_get_paste_target_list, :webkit_web_view_get_paste_target_list, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method web_view_set_settings(web_view, settings)
  # @param [WebView] web_view 
  # @param [WebSettings] settings 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_settings, :webkit_web_view_set_settings, [WebView, WebSettings], :void
  
  # (Not documented)
  # 
  # @method web_view_get_settings(web_view)
  # @param [WebView] web_view 
  # @return [WebSettings] 
  # @scope class
  attach_function :web_view_get_settings, :webkit_web_view_get_settings, [WebView], WebSettings
  
  # (Not documented)
  # 
  # @method web_view_get_inspector(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*WebKitWebInspector)] 
  # @scope class
  attach_function :web_view_get_inspector, :webkit_web_view_get_inspector, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method web_view_get_window_features(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*WebKitWebWindowFeatures)] 
  # @scope class
  attach_function :web_view_get_window_features, :webkit_web_view_get_window_features, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method web_view_can_show_mime_type(web_view, mime_type)
  # @param [WebView] web_view 
  # @param [String] mime_type 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_show_mime_type, :webkit_web_view_can_show_mime_type, [WebView, :string], :int
  
  # (Not documented)
  # 
  # @method web_view_get_transparent(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_get_transparent, :webkit_web_view_get_transparent, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_set_transparent(web_view, flag)
  # @param [WebView] web_view 
  # @param [Integer] flag 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_transparent, :webkit_web_view_set_transparent, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_zoom_level(web_view)
  # @param [WebView] web_view 
  # @return [Float] 
  # @scope class
  attach_function :web_view_get_zoom_level, :webkit_web_view_get_zoom_level, [WebView], :float
  
  # (Not documented)
  # 
  # @method web_view_set_zoom_level(web_view, zoom_level)
  # @param [WebView] web_view 
  # @param [Float] zoom_level 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_zoom_level, :webkit_web_view_set_zoom_level, [WebView, :float], :void
  
  # (Not documented)
  # 
  # @method web_view_zoom_in(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_zoom_in, :webkit_web_view_zoom_in, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_zoom_out(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_zoom_out, :webkit_web_view_zoom_out, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_get_full_content_zoom(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_get_full_content_zoom, :webkit_web_view_get_full_content_zoom, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_set_full_content_zoom(web_view, full_content_zoom)
  # @param [WebView] web_view 
  # @param [Integer] full_content_zoom 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_full_content_zoom, :webkit_web_view_set_full_content_zoom, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_encoding(web_view)
  # @param [WebView] web_view 
  # @return [String] 
  # @scope class
  attach_function :web_view_get_encoding, :webkit_web_view_get_encoding, [WebView], :string
  
  # (Not documented)
  # 
  # @method web_view_set_custom_encoding(web_view, encoding)
  # @param [WebView] web_view 
  # @param [String] encoding 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_custom_encoding, :webkit_web_view_set_custom_encoding, [WebView, :string], :void
  
  # (Not documented)
  # 
  # @method web_view_get_custom_encoding(web_view)
  # @param [WebView] web_view 
  # @return [String] 
  # @scope class
  attach_function :web_view_get_custom_encoding, :webkit_web_view_get_custom_encoding, [WebView], :string
  
  # (Not documented)
  # 
  # @method web_view_set_view_mode(web_view, mode)
  # @param [WebView] web_view 
  # @param [Symbol from _enum_web_kit_web_view_view_mode_] mode 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_view_mode, :webkit_web_view_set_view_mode, [WebView, :web_kit_web_view_view_mode], :void
  
  # (Not documented)
  # 
  # @method web_view_get_view_mode(web_view)
  # @param [WebView] web_view 
  # @return [Symbol from _enum_web_kit_web_view_view_mode_] 
  # @scope class
  attach_function :web_view_get_view_mode, :webkit_web_view_get_view_mode, [WebView], :web_kit_web_view_view_mode
  
  # (Not documented)
  # 
  # @method web_view_move_cursor(web_view, step, count)
  # @param [WebView] web_view 
  # @param [unknown] step 
  # @param [Integer] count 
  # @return [nil] 
  # @scope class
  attach_function :web_view_move_cursor, :webkit_web_view_move_cursor, [WebView, :char, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_load_status(web_view)
  # @param [WebView] web_view 
  # @return [Symbol from _enum_web_kit_load_status_] 
  # @scope class
  attach_function :web_view_get_load_status, :webkit_web_view_get_load_status, [WebView], :web_kit_load_status
  
  # (Not documented)
  # 
  # @method web_view_get_progress(web_view)
  # @param [WebView] web_view 
  # @return [Float] 
  # @scope class
  attach_function :web_view_get_progress, :webkit_web_view_get_progress, [WebView], :double
  
  # (Not documented)
  # 
  # @method web_view_undo(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_undo, :webkit_web_view_undo, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_can_undo(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_undo, :webkit_web_view_can_undo, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_redo(web_view)
  # @param [WebView] web_view 
  # @return [nil] 
  # @scope class
  attach_function :web_view_redo, :webkit_web_view_redo, [WebView], :void
  
  # (Not documented)
  # 
  # @method web_view_can_redo(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_can_redo, :webkit_web_view_can_redo, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_set_view_source_mode(web_view, view_source_mode)
  # @param [WebView] web_view 
  # @param [Integer] view_source_mode 
  # @return [nil] 
  # @scope class
  attach_function :web_view_set_view_source_mode, :webkit_web_view_set_view_source_mode, [WebView, :int], :void
  
  # (Not documented)
  # 
  # @method web_view_get_view_source_mode(web_view)
  # @param [WebView] web_view 
  # @return [Integer] 
  # @scope class
  attach_function :web_view_get_view_source_mode, :webkit_web_view_get_view_source_mode, [WebView], :int
  
  # (Not documented)
  # 
  # @method web_view_get_hit_test_result(web_view, event)
  # @param [WebView] web_view 
  # @param [FFI::Pointer(*GdkEventButton)] event 
  # @return [HitTestResult] 
  # @scope class
  attach_function :web_view_get_hit_test_result, :webkit_web_view_get_hit_test_result, [WebView, :pointer], HitTestResult
  
  # (Not documented)
  # 
  # @method web_view_get_icon_uri(web_view)
  # @param [WebView] web_view 
  # @return [String] 
  # @scope class
  attach_function :web_view_get_icon_uri, :webkit_web_view_get_icon_uri, [WebView], :string
  
  # (Not documented)
  # 
  # @method web_view_get_icon_pixbuf(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :web_view_get_icon_pixbuf, :webkit_web_view_get_icon_pixbuf, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method web_view_get_dom_document(web_view)
  # @param [WebView] web_view 
  # @return [DOMDocument] 
  # @scope class
  attach_function :web_view_get_dom_document, :webkit_web_view_get_dom_document, [WebView], DOMDocument
  
  # (Not documented)
  # 
  # @method web_view_get_viewport_attributes(web_view)
  # @param [WebView] web_view 
  # @return [FFI::Pointer(*WebKitViewportAttributes)] 
  # @scope class
  attach_function :web_view_get_viewport_attributes, :webkit_web_view_get_viewport_attributes, [WebView], :pointer
  
  # (Not documented)
  # 
  # @method navigation_response_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :navigation_response_get_type, :webkit_navigation_response_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_view_target_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_view_target_info_get_type, :webkit_web_view_target_info_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_view_view_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_view_view_mode_get_type, :webkit_web_view_view_mode_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method selection_affinity_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :selection_affinity_get_type, :webkit_selection_affinity_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method insert_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :insert_action_get_type, :webkit_insert_action_get_type, [], :ulong
  
  # (Not documented)
  class GeolocationPolicyDecisionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GeolocationPolicyDecisionPrivate) < private >
  class GeolocationPolicyDecision < FFI::Struct
    layout :parent_instance, :char,
           :priv, GeolocationPolicyDecisionPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class GeolocationPolicyDecisionClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method geolocation_policy_decision_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :geolocation_policy_decision_get_type, :webkit_geolocation_policy_decision_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method geolocation_policy_allow(decision)
  # @param [GeolocationPolicyDecision] decision 
  # @return [nil] 
  # @scope class
  attach_function :geolocation_policy_allow, :webkit_geolocation_policy_allow, [GeolocationPolicyDecision], :void
  
  # (Not documented)
  # 
  # @method geolocation_policy_deny(decision)
  # @param [GeolocationPolicyDecision] decision 
  # @return [nil] 
  # @scope class
  attach_function :geolocation_policy_deny, :webkit_geolocation_policy_deny, [GeolocationPolicyDecision], :void
  
  # (Not documented)
  class IconDatabasePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (IconDatabasePrivate) < private >
  module IconDatabaseWrappers
    def get_path()
      WebKit.icon_database_get_path(self)
    end
    
    def set_path(path)
      WebKit.icon_database_set_path(self, path)
    end
    
    def get_icon_uri(page_uri)
      WebKit.icon_database_get_icon_uri(self, page_uri)
    end
    
    def get_icon_pixbuf(page_uri)
      WebKit.icon_database_get_icon_pixbuf(self, page_uri)
    end
    
    def clear()
      WebKit.icon_database_clear(self)
    end
  end
  
  class IconDatabase < FFI::Struct
    include IconDatabaseWrappers
    layout :parent_instance, :char,
           :priv, IconDatabasePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class IconDatabaseClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method icon_database_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :icon_database_get_type, :webkit_icon_database_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method icon_database_get_path(database)
  # @param [IconDatabase] database 
  # @return [String] 
  # @scope class
  attach_function :icon_database_get_path, :webkit_icon_database_get_path, [IconDatabase], :string
  
  # (Not documented)
  # 
  # @method icon_database_set_path(database, path)
  # @param [IconDatabase] database 
  # @param [String] path 
  # @return [nil] 
  # @scope class
  attach_function :icon_database_set_path, :webkit_icon_database_set_path, [IconDatabase, :string], :void
  
  # (Not documented)
  # 
  # @method icon_database_get_icon_uri(database, page_uri)
  # @param [IconDatabase] database 
  # @param [String] page_uri 
  # @return [String] 
  # @scope class
  attach_function :icon_database_get_icon_uri, :webkit_icon_database_get_icon_uri, [IconDatabase, :string], :string
  
  # (Not documented)
  # 
  # @method icon_database_get_icon_pixbuf(database, page_uri)
  # @param [IconDatabase] database 
  # @param [String] page_uri 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :icon_database_get_icon_pixbuf, :webkit_icon_database_get_icon_pixbuf, [IconDatabase, :string], :pointer
  
  # (Not documented)
  # 
  # @method icon_database_clear(database)
  # @param [IconDatabase] database 
  # @return [nil] 
  # @scope class
  attach_function :icon_database_clear, :webkit_icon_database_clear, [IconDatabase], :void
  
  # (Not documented)
  class NetworkResponsePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (NetworkResponsePrivate) < private >
  module NetworkResponseWrappers
    def set_uri(uri)
      WebKit.network_response_set_uri(self, uri)
    end
    
    def get_uri()
      WebKit.network_response_get_uri(self)
    end
    
    def get_message()
      WebKit.network_response_get_message(self)
    end
  end
  
  class NetworkResponse < FFI::Struct
    include NetworkResponseWrappers
    layout :parent_instance, :char,
           :priv, NetworkResponsePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class NetworkResponseClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method network_response_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :network_response_get_type, :webkit_network_response_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method network_response_new(uri)
  # @param [String] uri 
  # @return [NetworkResponse] 
  # @scope class
  attach_function :network_response_new, :webkit_network_response_new, [:string], NetworkResponse
  
  # (Not documented)
  # 
  # @method network_response_set_uri(response, uri)
  # @param [NetworkResponse] response 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :network_response_set_uri, :webkit_network_response_set_uri, [NetworkResponse, :string], :void
  
  # (Not documented)
  # 
  # @method network_response_get_uri(response)
  # @param [NetworkResponse] response 
  # @return [String] 
  # @scope class
  attach_function :network_response_get_uri, :webkit_network_response_get_uri, [NetworkResponse], :string
  
  # (Not documented)
  # 
  # @method network_response_get_message(response)
  # @param [NetworkResponse] response 
  # @return [FFI::Pointer(*SoupMessage)] 
  # @scope class
  attach_function :network_response_get_message, :webkit_network_response_get_message, [NetworkResponse], :pointer
  
  # (Not documented)
  class WebDatabasePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebDatabasePrivate) < private >
  module WebDatabaseWrappers
    def get_security_origin()
      SecurityOrigin.new WebKit.web_database_get_security_origin(self)
    end
    
    def get_name()
      WebKit.web_database_get_name(self)
    end
    
    def get_display_name()
      WebKit.web_database_get_display_name(self)
    end
    
    def get_expected_size()
      WebKit.web_database_get_expected_size(self)
    end
    
    def get_size()
      WebKit.web_database_get_size(self)
    end
    
    def get_filename()
      WebKit.web_database_get_filename(self)
    end
    
    def remove()
      WebKit.web_database_remove(self)
    end
  end
  
  class WebDatabase < FFI::Struct
    include WebDatabaseWrappers
    layout :parent_instance, :char,
           :priv, WebDatabasePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WebDatabaseClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_database_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_database_get_type, :webkit_web_database_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_database_get_security_origin(web_database)
  # @param [WebDatabase] web_database 
  # @return [FFI::Pointer(*WebKitSecurityOrigin)] 
  # @scope class
  attach_function :web_database_get_security_origin, :webkit_web_database_get_security_origin, [WebDatabase], :pointer
  
  # (Not documented)
  # 
  # @method web_database_get_name(web_database)
  # @param [WebDatabase] web_database 
  # @return [String] 
  # @scope class
  attach_function :web_database_get_name, :webkit_web_database_get_name, [WebDatabase], :string
  
  # (Not documented)
  # 
  # @method web_database_get_display_name(web_database)
  # @param [WebDatabase] web_database 
  # @return [String] 
  # @scope class
  attach_function :web_database_get_display_name, :webkit_web_database_get_display_name, [WebDatabase], :string
  
  # (Not documented)
  # 
  # @method web_database_get_expected_size(web_database)
  # @param [WebDatabase] web_database 
  # @return [Integer] 
  # @scope class
  attach_function :web_database_get_expected_size, :webkit_web_database_get_expected_size, [WebDatabase], :ulong
  
  # (Not documented)
  # 
  # @method web_database_get_size(web_database)
  # @param [WebDatabase] web_database 
  # @return [Integer] 
  # @scope class
  attach_function :web_database_get_size, :webkit_web_database_get_size, [WebDatabase], :ulong
  
  # (Not documented)
  # 
  # @method web_database_get_filename(web_database)
  # @param [WebDatabase] web_database 
  # @return [String] 
  # @scope class
  attach_function :web_database_get_filename, :webkit_web_database_get_filename, [WebDatabase], :string
  
  # (Not documented)
  # 
  # @method web_database_remove(web_database)
  # @param [WebDatabase] web_database 
  # @return [nil] 
  # @scope class
  attach_function :web_database_remove, :webkit_web_database_remove, [WebDatabase], :void
  
  # (Not documented)
  # 
  # @method remove_all_web_databases()
  # @return [nil] 
  # @scope class
  attach_function :remove_all_web_databases, :webkit_remove_all_web_databases, [], :void
  
  # (Not documented)
  # 
  # @method get_web_database_directory_path()
  # @return [String] 
  # @scope class
  attach_function :get_web_database_directory_path, :webkit_get_web_database_directory_path, [], :string
  
  # (Not documented)
  # 
  # @method set_web_database_directory_path(path)
  # @param [String] path 
  # @return [nil] 
  # @scope class
  attach_function :set_web_database_directory_path, :webkit_set_web_database_directory_path, [:string], :void
  
  # (Not documented)
  # 
  # @method get_default_web_database_quota()
  # @return [Integer] 
  # @scope class
  attach_function :get_default_web_database_quota, :webkit_get_default_web_database_quota, [], :ulong
  
  # (Not documented)
  # 
  # @method set_default_web_database_quota(default_quota)
  # @param [Integer] default_quota 
  # @return [nil] 
  # @scope class
  attach_function :set_default_web_database_quota, :webkit_set_default_web_database_quota, [:ulong], :void
  
  # (Not documented)
  class SecurityOriginPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (SecurityOriginPrivate) < private >
  module SecurityOriginWrappers
    def get_protocol()
      WebKit.security_origin_get_protocol(self)
    end
    
    def get_host()
      WebKit.security_origin_get_host(self)
    end
    
    def get_port()
      WebKit.security_origin_get_port(self)
    end
    
    def get_web_database_usage()
      WebKit.security_origin_get_web_database_usage(self)
    end
    
    def get_web_database_quota()
      WebKit.security_origin_get_web_database_quota(self)
    end
    
    def set_web_database_quota(quota)
      WebKit.security_origin_set_web_database_quota(self, quota)
    end
    
    def get_all_web_databases()
      WebKit.security_origin_get_all_web_databases(self)
    end
  end
  
  class SecurityOrigin < FFI::Struct
    include SecurityOriginWrappers
    layout :parent_instance, :char,
           :priv, SecurityOriginPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class SecurityOriginClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method security_origin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :security_origin_get_type, :webkit_security_origin_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method security_origin_get_protocol(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [String] 
  # @scope class
  attach_function :security_origin_get_protocol, :webkit_security_origin_get_protocol, [SecurityOrigin], :string
  
  # (Not documented)
  # 
  # @method security_origin_get_host(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [String] 
  # @scope class
  attach_function :security_origin_get_host, :webkit_security_origin_get_host, [SecurityOrigin], :string
  
  # (Not documented)
  # 
  # @method security_origin_get_port(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [Integer] 
  # @scope class
  attach_function :security_origin_get_port, :webkit_security_origin_get_port, [SecurityOrigin], :uint
  
  # (Not documented)
  # 
  # @method security_origin_get_web_database_usage(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [Integer] 
  # @scope class
  attach_function :security_origin_get_web_database_usage, :webkit_security_origin_get_web_database_usage, [SecurityOrigin], :ulong
  
  # (Not documented)
  # 
  # @method security_origin_get_web_database_quota(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [Integer] 
  # @scope class
  attach_function :security_origin_get_web_database_quota, :webkit_security_origin_get_web_database_quota, [SecurityOrigin], :ulong
  
  # (Not documented)
  # 
  # @method security_origin_set_web_database_quota(security_origin, quota)
  # @param [SecurityOrigin] security_origin 
  # @param [Integer] quota 
  # @return [nil] 
  # @scope class
  attach_function :security_origin_set_web_database_quota, :webkit_security_origin_set_web_database_quota, [SecurityOrigin, :ulong], :void
  
  # (Not documented)
  # 
  # @method security_origin_get_all_web_databases(security_origin)
  # @param [SecurityOrigin] security_origin 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :security_origin_get_all_web_databases, :webkit_security_origin_get_all_web_databases, [SecurityOrigin], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  class WebKitSoupAuthDialog < FFI::Struct
    layout :parent_instance, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :current_toplevel ::
  #   (FFI::Pointer(*)) 
  class WebKitSoupAuthDialogClass < FFI::Struct
    layout :parent_class, :char,
           :current_toplevel, :pointer
  end
  
  # (Not documented)
  # 
  # @method soup_auth_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :soup_auth_dialog_get_type, :webkit_soup_auth_dialog_get_type, [], :ulong
  
  # dummy typedef
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :check_spelling_of_string ::
  #   (FFI::Pointer(*)) 
  # :get_guesses_for_word ::
  #   (FFI::Pointer(*)) 
  # :update_spell_checking_languages ::
  #   (FFI::Pointer(*)) 
  # :get_autocorrect_suggestions_for_misspelled_word ::
  #   (FFI::Pointer(*)) 
  # :learn_word ::
  #   (FFI::Pointer(*)) 
  # :ignore_word ::
  #   (FFI::Pointer(*)) 
  class SpellCheckerInterface < FFI::Struct
    layout :g_iface, :char,
           :check_spelling_of_string, :pointer,
           :get_guesses_for_word, :pointer,
           :update_spell_checking_languages, :pointer,
           :get_autocorrect_suggestions_for_misspelled_word, :pointer,
           :learn_word, :pointer,
           :ignore_word, :pointer
  end
  
  # (Not documented)
  # 
  # @method spell_checker_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :spell_checker_get_type, :webkit_spell_checker_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method spell_checker_check_spelling_of_string(checker, string, misspelling_location, misspelling_length)
  # @param [SpellChecker] checker 
  # @param [String] string 
  # @param [FFI::Pointer(*Int)] misspelling_location 
  # @param [FFI::Pointer(*Int)] misspelling_length 
  # @return [nil] 
  # @scope class
  attach_function :spell_checker_check_spelling_of_string, :webkit_spell_checker_check_spelling_of_string, [SpellChecker, :string, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method spell_checker_get_guesses_for_word(checker, word, context)
  # @param [SpellChecker] checker 
  # @param [String] word 
  # @param [String] context 
  # @return [FFI::Pointer(**CharS)] 
  # @scope class
  attach_function :spell_checker_get_guesses_for_word, :webkit_spell_checker_get_guesses_for_word, [SpellChecker, :string, :string], :pointer
  
  # (Not documented)
  # 
  # @method spell_checker_update_spell_checking_languages(checker, languages)
  # @param [SpellChecker] checker 
  # @param [String] languages 
  # @return [nil] 
  # @scope class
  attach_function :spell_checker_update_spell_checking_languages, :webkit_spell_checker_update_spell_checking_languages, [SpellChecker, :string], :void
  
  # (Not documented)
  # 
  # @method spell_checker_get_autocorrect_suggestions_for_misspelled_word(checker, word)
  # @param [SpellChecker] checker 
  # @param [String] word 
  # @return [String] 
  # @scope class
  attach_function :spell_checker_get_autocorrect_suggestions_for_misspelled_word, :webkit_spell_checker_get_autocorrect_suggestions_for_misspelled_word, [SpellChecker, :string], :string
  
  # (Not documented)
  # 
  # @method spell_checker_learn_word(checker, word)
  # @param [SpellChecker] checker 
  # @param [String] word 
  # @return [nil] 
  # @scope class
  attach_function :spell_checker_learn_word, :webkit_spell_checker_learn_word, [SpellChecker, :string], :void
  
  # (Not documented)
  # 
  # @method spell_checker_ignore_word(checker, word)
  # @param [SpellChecker] checker 
  # @param [String] word 
  # @return [nil] 
  # @scope class
  attach_function :spell_checker_ignore_word, :webkit_spell_checker_ignore_word, [SpellChecker, :string], :void
  
  # (Not documented)
  class ViewportAttributesPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (ViewportAttributesPrivate) < private >
  module ViewportAttributesWrappers
    def recompute()
      WebKit.viewport_attributes_recompute(self)
    end
  end
  
  class ViewportAttributes < FFI::Struct
    include ViewportAttributesWrappers
    layout :parent_instance, :char,
           :priv, ViewportAttributesPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class ViewportAttributesClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method viewport_attributes_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :viewport_attributes_get_type, :webkit_viewport_attributes_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method viewport_attributes_recompute(viewport_attributes)
  # @param [ViewportAttributes] viewport_attributes 
  # @return [nil] 
  # @scope class
  attach_function :viewport_attributes_recompute, :webkit_viewport_attributes_recompute, [ViewportAttributes], :void
  
  # (Not documented)
  class WebInspectorPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebInspectorPrivate) 
  module WebInspectorWrappers
    def get_web_view()
      WebView.new WebKit.web_inspector_get_web_view(self)
    end
    
    def get_inspected_uri()
      WebKit.web_inspector_get_inspected_uri(self)
    end
    
    def inspect_node(node)
      WebKit.web_inspector_inspect_node(self, node)
    end
    
    def inspect_coordinates(x, y)
      WebKit.web_inspector_inspect_coordinates(self, x, y)
    end
    
    def show()
      WebKit.web_inspector_show(self)
    end
    
    def close()
      WebKit.web_inspector_close(self)
    end
  end
  
  class WebInspector < FFI::Struct
    include WebInspectorWrappers
    layout :parent_instance, :char,
           :priv, WebInspectorPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WebInspectorClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_inspector_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_inspector_get_type, :webkit_web_inspector_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_inspector_get_web_view(web_inspector)
  # @param [WebInspector] web_inspector 
  # @return [WebView] 
  # @scope class
  attach_function :web_inspector_get_web_view, :webkit_web_inspector_get_web_view, [WebInspector], WebView
  
  # (Not documented)
  # 
  # @method web_inspector_get_inspected_uri(web_inspector)
  # @param [WebInspector] web_inspector 
  # @return [String] 
  # @scope class
  attach_function :web_inspector_get_inspected_uri, :webkit_web_inspector_get_inspected_uri, [WebInspector], :string
  
  # (Not documented)
  # 
  # @method web_inspector_inspect_node(web_inspector, node)
  # @param [WebInspector] web_inspector 
  # @param [DOMNode] node 
  # @return [nil] 
  # @scope class
  attach_function :web_inspector_inspect_node, :webkit_web_inspector_inspect_node, [WebInspector, DOMNode], :void
  
  # (Not documented)
  # 
  # @method web_inspector_inspect_coordinates(web_inspector, x, y)
  # @param [WebInspector] web_inspector 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :web_inspector_inspect_coordinates, :webkit_web_inspector_inspect_coordinates, [WebInspector, :double, :double], :void
  
  # (Not documented)
  # 
  # @method web_inspector_show(web_inspector)
  # @param [WebInspector] web_inspector 
  # @return [nil] 
  # @scope class
  attach_function :web_inspector_show, :webkit_web_inspector_show, [WebInspector], :void
  
  # (Not documented)
  # 
  # @method web_inspector_close(web_inspector)
  # @param [WebInspector] web_inspector 
  # @return [nil] 
  # @scope class
  attach_function :web_inspector_close, :webkit_web_inspector_close, [WebInspector], :void
  
  # (Not documented)
  class WebPluginPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # WebKitWebPluginMIMEType:
  # @name: the name of the MIME type.
  # @description: the description of the MIME type.
  # @extensions: a %NULL-terminated array with the extensions
  # associated with this MIME type.
  # 
  # A structure representing one of the MIME types associated with a
  # plugin. A #GSList of these objects will be returned by
  # #webkit_web_plugin_get_mimetypes, use
  # #webkit_web_plugin_mime_type_list_free to free it.
  # 
  # Since: 1.3.8
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :description ::
  #   (String) 
  # :extensions ::
  #   (FFI::Pointer(**CharS)) 
  class WebPluginMIMEType < FFI::Struct
    layout :name, :string,
           :description, :string,
           :extensions, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  class WebPluginClass < FFI::Struct
    layout :parent_class, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebPluginPrivate) 
  module WebPluginWrappers
    def get_name()
      WebKit.web_plugin_get_name(self)
    end
    
    def get_description()
      WebKit.web_plugin_get_description(self)
    end
    
    def get_path()
      WebKit.web_plugin_get_path(self)
    end
    
    def get_mimetypes()
      WebKit.web_plugin_get_mimetypes(self)
    end
    
    def set_enabled(arg1)
      WebKit.web_plugin_set_enabled(self, arg1)
    end
    
    def get_enabled()
      WebKit.web_plugin_get_enabled(self)
    end
  end
  
  class WebPlugin < FFI::Struct
    include WebPluginWrappers
    layout :parent_instance, :char,
           :priv, WebPluginPrivate
  end
  
  # (Not documented)
  # 
  # @method web_plugin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_plugin_get_type, :webkit_web_plugin_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_plugin_get_name(web_plugin)
  # @param [WebPlugin] web_plugin 
  # @return [String] 
  # @scope class
  attach_function :web_plugin_get_name, :webkit_web_plugin_get_name, [WebPlugin], :string
  
  # (Not documented)
  # 
  # @method web_plugin_get_description(web_plugin)
  # @param [WebPlugin] web_plugin 
  # @return [String] 
  # @scope class
  attach_function :web_plugin_get_description, :webkit_web_plugin_get_description, [WebPlugin], :string
  
  # (Not documented)
  # 
  # @method web_plugin_get_path(web_plugin)
  # @param [WebPlugin] web_plugin 
  # @return [String] 
  # @scope class
  attach_function :web_plugin_get_path, :webkit_web_plugin_get_path, [WebPlugin], :string
  
  # (Not documented)
  # 
  # @method web_plugin_get_mimetypes(web_plugin)
  # @param [WebPlugin] web_plugin 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :web_plugin_get_mimetypes, :webkit_web_plugin_get_mimetypes, [WebPlugin], :pointer
  
  # (Not documented)
  # 
  # @method web_plugin_set_enabled(web_plugin, integer)
  # @param [WebPlugin] web_plugin 
  # @param [Integer] integer 
  # @return [nil] 
  # @scope class
  attach_function :web_plugin_set_enabled, :webkit_web_plugin_set_enabled, [WebPlugin, :int], :void
  
  # (Not documented)
  # 
  # @method web_plugin_get_enabled(web_plugin)
  # @param [WebPlugin] web_plugin 
  # @return [Integer] 
  # @scope class
  attach_function :web_plugin_get_enabled, :webkit_web_plugin_get_enabled, [WebPlugin], :int
  
  # (Not documented)
  class WebPluginDatabasePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  class WebPluginDatabaseClass < FFI::Struct
    layout :parent_class, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebPluginDatabasePrivate) 
  module WebPluginDatabaseWrappers
    def get_plugins()
      WebKit.web_plugin_database_get_plugins(self)
    end
    
    def get_plugin_for_mimetype(arg1)
      WebPlugin.new WebKit.web_plugin_database_get_plugin_for_mimetype(self, arg1)
    end
    
    def refresh()
      WebKit.web_plugin_database_refresh(self)
    end
  end
  
  class WebPluginDatabase < FFI::Struct
    include WebPluginDatabaseWrappers
    layout :parent_instance, :char,
           :priv, WebPluginDatabasePrivate
  end
  
  # (Not documented)
  # 
  # @method web_plugin_database_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_plugin_database_get_type, :webkit_web_plugin_database_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_plugin_database_plugins_list_free(gs_list)
  # @param [FFI::Pointer(*GSList)] gs_list 
  # @return [nil] 
  # @scope class
  attach_function :web_plugin_database_plugins_list_free, :webkit_web_plugin_database_plugins_list_free, [:pointer], :void
  
  # (Not documented)
  # 
  # @method web_plugin_database_get_plugins(web_plugin_database)
  # @param [WebPluginDatabase] web_plugin_database 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :web_plugin_database_get_plugins, :webkit_web_plugin_database_get_plugins, [WebPluginDatabase], :pointer
  
  # (Not documented)
  # 
  # @method web_plugin_database_get_plugin_for_mimetype(web_plugin_database, string)
  # @param [WebPluginDatabase] web_plugin_database 
  # @param [String] string 
  # @return [WebPlugin] 
  # @scope class
  attach_function :web_plugin_database_get_plugin_for_mimetype, :webkit_web_plugin_database_get_plugin_for_mimetype, [WebPluginDatabase, :string], WebPlugin
  
  # (Not documented)
  # 
  # @method web_plugin_database_refresh(web_plugin_database)
  # @param [WebPluginDatabase] web_plugin_database 
  # @return [nil] 
  # @scope class
  attach_function :web_plugin_database_refresh, :webkit_web_plugin_database_refresh, [WebPluginDatabase], :void
  
  # (Not documented)
  class WebPolicyDecisionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebPolicyDecisionPrivate) < private >
  module WebPolicyDecisionWrappers
    def use()
      WebKit.web_policy_decision_use(self)
    end
    
    def ignore()
      WebKit.web_policy_decision_ignore(self)
    end
    
    def download()
      WebKit.web_policy_decision_download(self)
    end
  end
  
  class WebPolicyDecision < FFI::Struct
    include WebPolicyDecisionWrappers
    layout :parent_instance, :char,
           :priv, WebPolicyDecisionPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebPolicyDecisionClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_policy_decision_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_policy_decision_get_type, :webkit_web_policy_decision_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_policy_decision_use(decision)
  # @param [WebPolicyDecision] decision 
  # @return [nil] 
  # @scope class
  attach_function :web_policy_decision_use, :webkit_web_policy_decision_use, [WebPolicyDecision], :void
  
  # (Not documented)
  # 
  # @method web_policy_decision_ignore(decision)
  # @param [WebPolicyDecision] decision 
  # @return [nil] 
  # @scope class
  attach_function :web_policy_decision_ignore, :webkit_web_policy_decision_ignore, [WebPolicyDecision], :void
  
  # (Not documented)
  # 
  # @method web_policy_decision_download(decision)
  # @param [WebPolicyDecision] decision 
  # @return [nil] 
  # @scope class
  attach_function :web_policy_decision_download, :webkit_web_policy_decision_download, [WebPolicyDecision], :void
  
  # (Not documented)
  class WebResourcePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebResourcePrivate) < private >
  module WebResourceWrappers
    def get_data()
      WebKit.web_resource_get_data(self)
    end
    
    def get_uri()
      WebKit.web_resource_get_uri(self)
    end
    
    def get_mime_type()
      WebKit.web_resource_get_mime_type(self)
    end
    
    def get_encoding()
      WebKit.web_resource_get_encoding(self)
    end
    
    def get_frame_name()
      WebKit.web_resource_get_frame_name(self)
    end
  end
  
  class WebResource < FFI::Struct
    include WebResourceWrappers
    layout :parent_instance, :char,
           :priv, WebResourcePrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  class WebResourceClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved0, :pointer,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_resource_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_resource_get_type, :webkit_web_resource_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_resource_new(data, size, uri, mime_type, encoding, frame_name)
  # @param [String] data 
  # @param [Integer] size 
  # @param [String] uri 
  # @param [String] mime_type 
  # @param [String] encoding 
  # @param [String] frame_name 
  # @return [WebResource] 
  # @scope class
  attach_function :web_resource_new, :webkit_web_resource_new, [:string, :long, :string, :string, :string, :string], WebResource
  
  # (Not documented)
  # 
  # @method web_resource_get_data(web_resource)
  # @param [WebResource] web_resource 
  # @return [FFI::Pointer(*GString)] 
  # @scope class
  attach_function :web_resource_get_data, :webkit_web_resource_get_data, [WebResource], :pointer
  
  # (Not documented)
  # 
  # @method web_resource_get_uri(web_resource)
  # @param [WebResource] web_resource 
  # @return [String] 
  # @scope class
  attach_function :web_resource_get_uri, :webkit_web_resource_get_uri, [WebResource], :string
  
  # (Not documented)
  # 
  # @method web_resource_get_mime_type(web_resource)
  # @param [WebResource] web_resource 
  # @return [String] 
  # @scope class
  attach_function :web_resource_get_mime_type, :webkit_web_resource_get_mime_type, [WebResource], :string
  
  # (Not documented)
  # 
  # @method web_resource_get_encoding(web_resource)
  # @param [WebResource] web_resource 
  # @return [String] 
  # @scope class
  attach_function :web_resource_get_encoding, :webkit_web_resource_get_encoding, [WebResource], :string
  
  # (Not documented)
  # 
  # @method web_resource_get_frame_name(web_resource)
  # @param [WebResource] web_resource 
  # @return [String] 
  # @scope class
  attach_function :web_resource_get_frame_name, :webkit_web_resource_get_frame_name, [WebResource], :string
  
  # (Not documented)
  class WebWindowFeaturesPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (WebWindowFeaturesPrivate) < private >
  module WebWindowFeaturesWrappers
    def equal(features2)
      WebKit.web_window_features_equal(self, features2)
    end
  end
  
  class WebWindowFeatures < FFI::Struct
    include WebWindowFeaturesWrappers
    layout :parent_instance, :char,
           :priv, WebWindowFeaturesPrivate
  end
  
  # < private >
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :webkit_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :webkit_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :webkit_reserved4 ::
  #   (FFI::Pointer(*)) 
  class WebWindowFeaturesClass < FFI::Struct
    layout :parent_class, :char,
           :webkit_reserved1, :pointer,
           :webkit_reserved2, :pointer,
           :webkit_reserved3, :pointer,
           :webkit_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method web_window_features_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :web_window_features_get_type, :webkit_web_window_features_get_type, [], :ulong
  
  # (Not documented)
  # 
  # @method web_window_features_new()
  # @return [WebWindowFeatures] 
  # @scope class
  attach_function :web_window_features_new, :webkit_web_window_features_new, [], WebWindowFeatures
  
  # (Not documented)
  # 
  # @method web_window_features_equal(features1, features2)
  # @param [WebWindowFeatures] features1 
  # @param [WebWindowFeatures] features2 
  # @return [Integer] 
  # @scope class
  attach_function :web_window_features_equal, :webkit_web_window_features_equal, [WebWindowFeatures, WebWindowFeatures], :int
  
end
